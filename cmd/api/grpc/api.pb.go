// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/cmd/api/grpc/api.proto

package grpc

import (
	context "context"
	fmt "fmt"
	entity "github.com/elojah/game_03/pkg/entity"
	dto1 "github.com/elojah/game_03/pkg/entity/dto"
	room "github.com/elojah/game_03/pkg/room"
	dto2 "github.com/elojah/game_03/pkg/room/dto"
	dto3 "github.com/elojah/game_03/pkg/twitch/dto"
	dto "github.com/elojah/game_03/pkg/user/dto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/elojah/game_03/cmd/api/grpc/api.proto", fileDescriptor_6dc96cba8df2a9f1)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/cmd/api/grpc/api.proto", fileDescriptor_6dc96cba8df2a9f1)
}

var fileDescriptor_6dc96cba8df2a9f1 = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xbd, 0x6e, 0xd4, 0x4c,
	0x14, 0xb5, 0xf5, 0xe5, 0xcb, 0xcf, 0x28, 0x09, 0xe1, 0x86, 0xa4, 0xd8, 0xa0, 0xa1, 0xa1, 0x80,
	0x22, 0x76, 0xc8, 0x0f, 0x20, 0x21, 0x21, 0x05, 0x2b, 0xfc, 0x48, 0x14, 0x56, 0x00, 0x51, 0x22,
	0xaf, 0x77, 0xe2, 0x18, 0xc6, 0x3b, 0x83, 0x67, 0x56, 0x51, 0x3a, 0x1e, 0x81, 0xc7, 0xe0, 0x11,
	0x28, 0x53, 0xa6, 0x4c, 0x99, 0x92, 0xf5, 0x36, 0x94, 0x29, 0xa1, 0x43, 0x77, 0x6c, 0xaf, 0xed,
	0x90, 0x20, 0x6f, 0xb3, 0x3b, 0xf7, 0xdc, 0x73, 0xe6, 0x1e, 0xdb, 0x67, 0x34, 0x64, 0x23, 0x8a,
	0xf5, 0xe1, 0xa0, 0xeb, 0x84, 0x22, 0x71, 0x19, 0x17, 0x1f, 0x83, 0x43, 0x37, 0x0a, 0x12, 0xf6,
	0x61, 0x63, 0xcb, 0x0d, 0x93, 0x9e, 0x1b, 0xc8, 0xd8, 0x8d, 0x52, 0x19, 0xe2, 0xc2, 0x91, 0xa9,
	0xd0, 0x02, 0xa6, 0xb0, 0xee, 0xac, 0xd7, 0x74, 0x91, 0x88, 0x84, 0x6b, 0x9a, 0xdd, 0xc1, 0x81,
	0xa9, 0x4c, 0x61, 0x56, 0xb9, 0xa8, 0xb3, 0x16, 0x09, 0x11, 0x71, 0x56, 0xb1, 0x58, 0x22, 0xf5,
	0x71, 0xd1, 0x7c, 0x70, 0xbd, 0x07, 0xf9, 0x29, 0x72, 0x59, 0x5f, 0xc7, 0xfa, 0xb8, 0xf8, 0x2b,
	0x24, 0xeb, 0xad, 0x24, 0x32, 0x2c, 0xe8, 0x3b, 0xad, 0xe8, 0x3d, 0x2d, 0x9a, 0x53, 0x1e, 0xb7,
	0x96, 0x05, 0xfd, 0x38, 0x09, 0x74, 0x2c, 0xfa, 0x13, 0x3d, 0x12, 0x2a, 0xc7, 0x1e, 0x1f, 0xb5,
	0x96, 0x68, 0x96, 0x48, 0x1e, 0x68, 0xd6, 0xee, 0x5d, 0xa4, 0x42, 0x24, 0xe6, 0x67, 0x02, 0xfa,
	0x40, 0xb1, 0xb4, 0xdd, 0x93, 0x18, 0x3a, 0x9a, 0x0a, 0x19, 0xe7, 0x13, 0x4a, 0x6a, 0xa6, 0xda,
	0x4a, 0x6a, 0xc6, 0x36, 0x5b, 0x4a, 0x8e, 0x44, 0xca, 0x7b, 0xed, 0x72, 0xa0, 0x8f, 0x62, 0x1d,
	0x1e, 0x1a, 0xd5, 0x81, 0xe0, 0x5c, 0x1c, 0x15, 0xb2, 0xed, 0x7f, 0xcb, 0xd0, 0x94, 0x11, 0x29,
	0xa6, 0xd4, 0x38, 0x03, 0x9b, 0xbf, 0xa7, 0xc9, 0x7f, 0xbb, 0xfe, 0x2b, 0x78, 0x4a, 0x16, 0xbc,
	0x94, 0x05, 0x9a, 0xbd, 0xc9, 0xdb, 0xb0, 0xe2, 0xf4, 0xb4, 0x70, 0x1a, 0xd8, 0x3e, 0xfb, 0xdc,
	0x59, 0xbd, 0x0a, 0x56, 0x12, 0x76, 0x08, 0x79, 0x1d, 0x2b, 0xbd, 0x67, 0x02, 0x00, 0x60, 0x58,
	0x15, 0x80, 0xca, 0xe5, 0xbf, 0x30, 0x25, 0x71, 0x2c, 0x22, 0xbb, 0x65, 0x32, 0x8b, 0xb1, 0x0d,
	0xac, 0x1a, 0x7b, 0x09, 0x56, 0x12, 0xee, 0x91, 0xd9, 0xdc, 0x8b, 0xef, 0xc1, 0x52, 0xcd, 0x9a,
	0xef, 0xa1, 0x8a, 0x38, 0xc5, 0x49, 0xf1, 0x3d, 0xb8, 0x4f, 0xa6, 0x51, 0xee, 0x7b, 0xb0, 0x38,
	0xde, 0x2b, 0x67, 0xdd, 0x68, 0xd4, 0x4a, 0xc2, 0x1d, 0xf2, 0xff, 0x0b, 0x86, 0xcc, 0x05, 0xd3,
	0x31, 0x6b, 0x24, 0xce, 0x98, 0xd2, 0xf7, 0xe0, 0x09, 0x99, 0x47, 0xfa, 0xdb, 0x22, 0xe2, 0x70,
	0x6b, 0xbc, 0x43, 0x09, 0x21, 0x7d, 0xe5, 0x0a, 0x54, 0x49, 0xb8, 0x4b, 0xe6, 0x73, 0x8f, 0xc5,
	0xbb, 0x9a, 0x2b, 0x4d, 0xee, 0x75, 0xaa, 0x25, 0xf8, 0x64, 0xb9, 0xce, 0xda, 0xed, 0xc6, 0x1c,
	0xc9, 0x6b, 0xb5, 0x67, 0x6c, 0x74, 0x70, 0xe0, 0xed, 0xeb, 0x9b, 0x4a, 0x02, 0x25, 0x24, 0x6f,
	0xed, 0x0b, 0x91, 0xc0, 0x8c, 0x63, 0x82, 0xbd, 0xdf, 0x29, 0x17, 0xe0, 0x92, 0x59, 0xf4, 0x6a,
	0xba, 0x4b, 0x63, 0xeb, 0x58, 0xe2, 0xde, 0x37, 0x2f, 0x21, 0xe6, 0x93, 0x2f, 0x96, 0xb5, 0x3f,
	0xe8, 0xf2, 0x38, 0x6c, 0x27, 0xdb, 0x26, 0x8b, 0x95, 0x8f, 0x77, 0x8a, 0xa5, 0x50, 0xcf, 0x54,
	0x09, 0xe6, 0x9f, 0xcf, 0x58, 0x33, 0x9c, 0xc2, 0x9d, 0xc7, 0x38, 0xaf, 0x8d, 0xc1, 0xb2, 0x39,
	0x26, 0x47, 0x94, 0x84, 0x4d, 0x32, 0x87, 0xf5, 0x7b, 0x3c, 0x58, 0x50, 0xf5, 0x4d, 0x8d, 0x12,
	0xb8, 0x0c, 0x55, 0x21, 0x7e, 0x6e, 0x8e, 0x55, 0x2d, 0xc4, 0x39, 0xd0, 0x0c, 0x71, 0x89, 0x29,
	0x09, 0x0f, 0xc9, 0x94, 0x1f, 0xf7, 0x23, 0x58, 0x75, 0xf2, 0x0b, 0xc4, 0x29, 0x2f, 0x10, 0x67,
	0x0f, 0x2f, 0x90, 0xce, 0x35, 0xf8, 0xb3, 0x97, 0xa7, 0x43, 0x6a, 0x9d, 0x0d, 0xa9, 0x75, 0x3e,
	0xa4, 0xd6, 0xc5, 0x90, 0xda, 0xbf, 0x86, 0xd4, 0xfe, 0x92, 0x51, 0xfb, 0x5b, 0x46, 0xed, 0xef,
	0x19, 0xb5, 0x4f, 0x32, 0x6a, 0x9f, 0x66, 0xd4, 0x3e, 0xcb, 0xa8, 0xfd, 0x23, 0xa3, 0xf6, 0xcf,
	0x8c, 0x5a, 0x17, 0x19, 0xb5, 0xbf, 0x8e, 0xa8, 0x75, 0x32, 0xa2, 0xf6, 0xd9, 0x88, 0x5a, 0xe7,
	0x23, 0x6a, 0x75, 0xa7, 0xcd, 0xce, 0x5b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xc8, 0x37,
	0x9b, 0x29, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// Session
	CreateSession(ctx context.Context, in *dto.CreateSessionReq, opts ...grpc.CallOption) (*dto.CreateSessionResp, error)
	// Entity
	ListEntity(ctx context.Context, in *dto1.ListEntityReq, opts ...grpc.CallOption) (*dto1.ListEntityResp, error)
	// Animation
	ListAnimation(ctx context.Context, in *dto1.ListAnimationReq, opts ...grpc.CallOption) (*dto1.ListAnimationResp, error)
	// PC
	CreatePC(ctx context.Context, in *dto1.CreatePCReq, opts ...grpc.CallOption) (*entity.PC, error)
	ListPC(ctx context.Context, in *dto1.ListPCReq, opts ...grpc.CallOption) (*dto1.ListPCResp, error)
	GetPC(ctx context.Context, in *dto1.GetPCReq, opts ...grpc.CallOption) (*dto1.PC, error)
	// Template
	ListTemplate(ctx context.Context, in *dto1.ListTemplateReq, opts ...grpc.CallOption) (*dto1.ListTemplateResp, error)
	// Entity
	CreateEntity(ctx context.Context, in *entity.E, opts ...grpc.CallOption) (*entity.E, error)
	CreateEntityAbility(ctx context.Context, in *dto1.CreateEntityAbilityReq, opts ...grpc.CallOption) (*dto1.CreateEntityAbilityResp, error)
	// Room
	CreateRoom(ctx context.Context, in *room.R, opts ...grpc.CallOption) (*room.R, error)
	ListRoom(ctx context.Context, in *dto2.ListRoomReq, opts ...grpc.CallOption) (*dto2.ListRoomResp, error)
	ListRoomPublic(ctx context.Context, in *dto2.ListRoomReq, opts ...grpc.CallOption) (*dto2.ListRoomResp, error)
	CreateRoomUser(ctx context.Context, in *dto2.CreateRoomUserReq, opts ...grpc.CallOption) (*room.User, error)
	// Cell
	ListCell(ctx context.Context, in *dto2.ListCellReq, opts ...grpc.CallOption) (*dto2.ListCellResp, error)
	// World
	ListWorld(ctx context.Context, in *dto2.ListWorldReq, opts ...grpc.CallOption) (*dto2.ListWorldResp, error)
	// Twitch
	ListFollow(ctx context.Context, in *dto3.ListFollowReq, opts ...grpc.CallOption) (*dto3.ListFollowResp, error)
	// Ping
	Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateSession(ctx context.Context, in *dto.CreateSessionReq, opts ...grpc.CallOption) (*dto.CreateSessionResp, error) {
	out := new(dto.CreateSessionResp)
	err := c.cc.Invoke(ctx, "/grpc.API/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListEntity(ctx context.Context, in *dto1.ListEntityReq, opts ...grpc.CallOption) (*dto1.ListEntityResp, error) {
	out := new(dto1.ListEntityResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListAnimation(ctx context.Context, in *dto1.ListAnimationReq, opts ...grpc.CallOption) (*dto1.ListAnimationResp, error) {
	out := new(dto1.ListAnimationResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreatePC(ctx context.Context, in *dto1.CreatePCReq, opts ...grpc.CallOption) (*entity.PC, error) {
	out := new(entity.PC)
	err := c.cc.Invoke(ctx, "/grpc.API/CreatePC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListPC(ctx context.Context, in *dto1.ListPCReq, opts ...grpc.CallOption) (*dto1.ListPCResp, error) {
	out := new(dto1.ListPCResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPC(ctx context.Context, in *dto1.GetPCReq, opts ...grpc.CallOption) (*dto1.PC, error) {
	out := new(dto1.PC)
	err := c.cc.Invoke(ctx, "/grpc.API/GetPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListTemplate(ctx context.Context, in *dto1.ListTemplateReq, opts ...grpc.CallOption) (*dto1.ListTemplateResp, error) {
	out := new(dto1.ListTemplateResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateEntity(ctx context.Context, in *entity.E, opts ...grpc.CallOption) (*entity.E, error) {
	out := new(entity.E)
	err := c.cc.Invoke(ctx, "/grpc.API/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateEntityAbility(ctx context.Context, in *dto1.CreateEntityAbilityReq, opts ...grpc.CallOption) (*dto1.CreateEntityAbilityResp, error) {
	out := new(dto1.CreateEntityAbilityResp)
	err := c.cc.Invoke(ctx, "/grpc.API/CreateEntityAbility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateRoom(ctx context.Context, in *room.R, opts ...grpc.CallOption) (*room.R, error) {
	out := new(room.R)
	err := c.cc.Invoke(ctx, "/grpc.API/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListRoom(ctx context.Context, in *dto2.ListRoomReq, opts ...grpc.CallOption) (*dto2.ListRoomResp, error) {
	out := new(dto2.ListRoomResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListRoomPublic(ctx context.Context, in *dto2.ListRoomReq, opts ...grpc.CallOption) (*dto2.ListRoomResp, error) {
	out := new(dto2.ListRoomResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListRoomPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateRoomUser(ctx context.Context, in *dto2.CreateRoomUserReq, opts ...grpc.CallOption) (*room.User, error) {
	out := new(room.User)
	err := c.cc.Invoke(ctx, "/grpc.API/CreateRoomUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListCell(ctx context.Context, in *dto2.ListCellReq, opts ...grpc.CallOption) (*dto2.ListCellResp, error) {
	out := new(dto2.ListCellResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListWorld(ctx context.Context, in *dto2.ListWorldReq, opts ...grpc.CallOption) (*dto2.ListWorldResp, error) {
	out := new(dto2.ListWorldResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListFollow(ctx context.Context, in *dto3.ListFollowReq, opts ...grpc.CallOption) (*dto3.ListFollowResp, error) {
	out := new(dto3.ListFollowResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.API/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// Session
	CreateSession(context.Context, *dto.CreateSessionReq) (*dto.CreateSessionResp, error)
	// Entity
	ListEntity(context.Context, *dto1.ListEntityReq) (*dto1.ListEntityResp, error)
	// Animation
	ListAnimation(context.Context, *dto1.ListAnimationReq) (*dto1.ListAnimationResp, error)
	// PC
	CreatePC(context.Context, *dto1.CreatePCReq) (*entity.PC, error)
	ListPC(context.Context, *dto1.ListPCReq) (*dto1.ListPCResp, error)
	GetPC(context.Context, *dto1.GetPCReq) (*dto1.PC, error)
	// Template
	ListTemplate(context.Context, *dto1.ListTemplateReq) (*dto1.ListTemplateResp, error)
	// Entity
	CreateEntity(context.Context, *entity.E) (*entity.E, error)
	CreateEntityAbility(context.Context, *dto1.CreateEntityAbilityReq) (*dto1.CreateEntityAbilityResp, error)
	// Room
	CreateRoom(context.Context, *room.R) (*room.R, error)
	ListRoom(context.Context, *dto2.ListRoomReq) (*dto2.ListRoomResp, error)
	ListRoomPublic(context.Context, *dto2.ListRoomReq) (*dto2.ListRoomResp, error)
	CreateRoomUser(context.Context, *dto2.CreateRoomUserReq) (*room.User, error)
	// Cell
	ListCell(context.Context, *dto2.ListCellReq) (*dto2.ListCellResp, error)
	// World
	ListWorld(context.Context, *dto2.ListWorldReq) (*dto2.ListWorldResp, error)
	// Twitch
	ListFollow(context.Context, *dto3.ListFollowReq) (*dto3.ListFollowResp, error)
	// Ping
	Ping(context.Context, *types.Empty) (*types.Empty, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) CreateSession(ctx context.Context, req *dto.CreateSessionReq) (*dto.CreateSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedAPIServer) ListEntity(ctx context.Context, req *dto1.ListEntityReq) (*dto1.ListEntityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntity not implemented")
}
func (*UnimplementedAPIServer) ListAnimation(ctx context.Context, req *dto1.ListAnimationReq) (*dto1.ListAnimationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnimation not implemented")
}
func (*UnimplementedAPIServer) CreatePC(ctx context.Context, req *dto1.CreatePCReq) (*entity.PC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePC not implemented")
}
func (*UnimplementedAPIServer) ListPC(ctx context.Context, req *dto1.ListPCReq) (*dto1.ListPCResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPC not implemented")
}
func (*UnimplementedAPIServer) GetPC(ctx context.Context, req *dto1.GetPCReq) (*dto1.PC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPC not implemented")
}
func (*UnimplementedAPIServer) ListTemplate(ctx context.Context, req *dto1.ListTemplateReq) (*dto1.ListTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplate not implemented")
}
func (*UnimplementedAPIServer) CreateEntity(ctx context.Context, req *entity.E) (*entity.E, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (*UnimplementedAPIServer) CreateEntityAbility(ctx context.Context, req *dto1.CreateEntityAbilityReq) (*dto1.CreateEntityAbilityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntityAbility not implemented")
}
func (*UnimplementedAPIServer) CreateRoom(ctx context.Context, req *room.R) (*room.R, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (*UnimplementedAPIServer) ListRoom(ctx context.Context, req *dto2.ListRoomReq) (*dto2.ListRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoom not implemented")
}
func (*UnimplementedAPIServer) ListRoomPublic(ctx context.Context, req *dto2.ListRoomReq) (*dto2.ListRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoomPublic not implemented")
}
func (*UnimplementedAPIServer) CreateRoomUser(ctx context.Context, req *dto2.CreateRoomUserReq) (*room.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoomUser not implemented")
}
func (*UnimplementedAPIServer) ListCell(ctx context.Context, req *dto2.ListCellReq) (*dto2.ListCellResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCell not implemented")
}
func (*UnimplementedAPIServer) ListWorld(ctx context.Context, req *dto2.ListWorldReq) (*dto2.ListWorldResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorld not implemented")
}
func (*UnimplementedAPIServer) ListFollow(ctx context.Context, req *dto3.ListFollowReq) (*dto3.ListFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollow not implemented")
}
func (*UnimplementedAPIServer) Ping(ctx context.Context, req *types.Empty) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.CreateSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateSession(ctx, req.(*dto.CreateSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto1.ListEntityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListEntity(ctx, req.(*dto1.ListEntityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto1.ListAnimationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListAnimation(ctx, req.(*dto1.ListAnimationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreatePC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto1.CreatePCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreatePC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/CreatePC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreatePC(ctx, req.(*dto1.CreatePCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto1.ListPCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListPC(ctx, req.(*dto1.ListPCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto1.GetPCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/GetPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetPC(ctx, req.(*dto1.GetPCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto1.ListTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListTemplate(ctx, req.(*dto1.ListTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.E)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateEntity(ctx, req.(*entity.E))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateEntityAbility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto1.CreateEntityAbilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateEntityAbility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/CreateEntityAbility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateEntityAbility(ctx, req.(*dto1.CreateEntityAbilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(room.R)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateRoom(ctx, req.(*room.R))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto2.ListRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListRoom(ctx, req.(*dto2.ListRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListRoomPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto2.ListRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListRoomPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListRoomPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListRoomPublic(ctx, req.(*dto2.ListRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateRoomUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto2.CreateRoomUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateRoomUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/CreateRoomUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateRoomUser(ctx, req.(*dto2.CreateRoomUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto2.ListCellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListCell(ctx, req.(*dto2.ListCellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto2.ListWorldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListWorld(ctx, req.(*dto2.ListWorldReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto3.ListFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListFollow(ctx, req.(*dto3.ListFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Ping(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _API_CreateSession_Handler,
		},
		{
			MethodName: "ListEntity",
			Handler:    _API_ListEntity_Handler,
		},
		{
			MethodName: "ListAnimation",
			Handler:    _API_ListAnimation_Handler,
		},
		{
			MethodName: "CreatePC",
			Handler:    _API_CreatePC_Handler,
		},
		{
			MethodName: "ListPC",
			Handler:    _API_ListPC_Handler,
		},
		{
			MethodName: "GetPC",
			Handler:    _API_GetPC_Handler,
		},
		{
			MethodName: "ListTemplate",
			Handler:    _API_ListTemplate_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _API_CreateEntity_Handler,
		},
		{
			MethodName: "CreateEntityAbility",
			Handler:    _API_CreateEntityAbility_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _API_CreateRoom_Handler,
		},
		{
			MethodName: "ListRoom",
			Handler:    _API_ListRoom_Handler,
		},
		{
			MethodName: "ListRoomPublic",
			Handler:    _API_ListRoomPublic_Handler,
		},
		{
			MethodName: "CreateRoomUser",
			Handler:    _API_CreateRoomUser_Handler,
		},
		{
			MethodName: "ListCell",
			Handler:    _API_ListCell_Handler,
		},
		{
			MethodName: "ListWorld",
			Handler:    _API_ListWorld_Handler,
		},
		{
			MethodName: "ListFollow",
			Handler:    _API_ListFollow_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _API_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/elojah/game_03/cmd/api/grpc/api.proto",
}
