// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/cmd/core/grpc/core.proto

package grpc

import (
	context "context"
	fmt "fmt"
	dto "github.com/elojah/game_03/pkg/rtc/dto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/elojah/game_03/cmd/core/grpc/core.proto", fileDescriptor_0272973b33a406b3)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/cmd/core/grpc/core.proto", fileDescriptor_0272973b33a406b3)
}

var fileDescriptor_0272973b33a406b3 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8e, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0x7d, 0xa5, 0xea, 0xeb, 0x27, 0x6f, 0x78, 0x60, 0x08, 0xe2, 0xce, 0x2c, 0xd8, 0x55,
	0x2b, 0x55, 0x62, 0x25, 0x54, 0xa2, 0x5b, 0x45, 0x1f, 0x00, 0xa5, 0x8e, 0x71, 0x03, 0x4d, 0x1c,
	0x45, 0x2e, 0x12, 0x1b, 0x8f, 0xc0, 0x63, 0xf0, 0x08, 0x8c, 0x1d, 0x3b, 0x66, 0xec, 0x48, 0x9c,
	0x85, 0xb1, 0x23, 0x23, 0x8a, 0xc3, 0x3f, 0x09, 0x65, 0xba, 0xe7, 0x9e, 0x7b, 0x7f, 0x47, 0x87,
	0x0e, 0x75, 0x62, 0x97, 0xeb, 0x05, 0x97, 0x26, 0x15, 0x6a, 0x65, 0x6e, 0xa3, 0xa5, 0xd0, 0x51,
	0xaa, 0xae, 0x07, 0x23, 0x21, 0xd3, 0x58, 0x48, 0x53, 0x28, 0xa1, 0x8b, 0x5c, 0x7a, 0xc5, 0xf3,
	0xc2, 0x58, 0xc3, 0x7a, 0x8d, 0x11, 0x9c, 0xfe, 0x22, 0xb5, 0xd1, 0x46, 0xf8, 0xe3, 0x62, 0x7d,
	0xe3, 0x37, 0xbf, 0x78, 0xd5, 0x42, 0xc1, 0x91, 0x36, 0x46, 0xaf, 0xd4, 0xcf, 0x97, 0x4a, 0x73,
	0xfb, 0xf0, 0x79, 0x14, 0xdd, 0x2d, 0xf2, 0x3b, 0x2d, 0x0a, 0x2b, 0x45, 0x6c, 0x4d, 0x33, 0x5b,
	0x60, 0x58, 0x02, 0xed, 0x85, 0xa6, 0x50, 0xec, 0x98, 0xf6, 0x43, 0x93, 0x65, 0x4a, 0x5a, 0xf6,
	0x9f, 0xc7, 0xd6, 0xf0, 0xf9, 0xc5, 0x2c, 0xf8, 0x56, 0x6c, 0x4c, 0xfb, 0x73, 0x95, 0xc5, 0xd3,
	0x70, 0xc2, 0x0e, 0xbc, 0x39, 0x0d, 0x27, 0x61, 0x94, 0xc5, 0x49, 0x1c, 0x59, 0x15, 0x1c, 0xf2,
	0xb6, 0x14, 0xff, 0x2a, 0xc5, 0x27, 0x4d, 0xa9, 0x13, 0x60, 0x67, 0x94, 0x5e, 0x29, 0xa9, 0x92,
	0x7b, 0xd5, 0xa0, 0x1d, 0x7f, 0xc1, 0xdf, 0xc8, 0x01, 0xb0, 0x31, 0xed, 0xcd, 0x92, 0x4c, 0x77,
	0x42, 0x1d, 0xfe, 0xf9, 0xe5, 0xb6, 0x42, 0x52, 0x56, 0x48, 0x76, 0x15, 0x92, 0x7d, 0x85, 0xf0,
	0x5e, 0x21, 0x3c, 0x3a, 0x84, 0x67, 0x87, 0xf0, 0xe2, 0x10, 0x36, 0x0e, 0x61, 0xeb, 0x10, 0x4a,
	0x87, 0xf0, 0xea, 0x10, 0xde, 0x1c, 0x92, 0xbd, 0x43, 0x78, 0xaa, 0x91, 0x6c, 0x6a, 0x84, 0xb2,
	0x46, 0xb2, 0xab, 0x91, 0x2c, 0xfe, 0xf9, 0xe4, 0xd1, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d,
	0xf9, 0x0f, 0x9b, 0xdc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreClient interface {
	// Signal
	Connect(ctx context.Context, in *dto.SDP, opts ...grpc.CallOption) (*dto.SDP, error)
	SendICE(ctx context.Context, opts ...grpc.CallOption) (Core_SendICEClient, error)
	ReceiveICE(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (Core_ReceiveICEClient, error)
	// Ping
	Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
}

type coreClient struct {
	cc *grpc.ClientConn
}

func NewCoreClient(cc *grpc.ClientConn) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) Connect(ctx context.Context, in *dto.SDP, opts ...grpc.CallOption) (*dto.SDP, error) {
	out := new(dto.SDP)
	err := c.cc.Invoke(ctx, "/grpc.Core/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SendICE(ctx context.Context, opts ...grpc.CallOption) (Core_SendICEClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Core_serviceDesc.Streams[0], "/grpc.Core/SendICE", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreSendICEClient{stream}
	return x, nil
}

type Core_SendICEClient interface {
	Send(*dto.ICECandidate) error
	CloseAndRecv() (*types.Empty, error)
	grpc.ClientStream
}

type coreSendICEClient struct {
	grpc.ClientStream
}

func (x *coreSendICEClient) Send(m *dto.ICECandidate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coreSendICEClient) CloseAndRecv() (*types.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ReceiveICE(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (Core_ReceiveICEClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Core_serviceDesc.Streams[1], "/grpc.Core/ReceiveICE", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreReceiveICEClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_ReceiveICEClient interface {
	Recv() (*dto.ICECandidate, error)
	grpc.ClientStream
}

type coreReceiveICEClient struct {
	grpc.ClientStream
}

func (x *coreReceiveICEClient) Recv() (*dto.ICECandidate, error) {
	m := new(dto.ICECandidate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Core/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
type CoreServer interface {
	// Signal
	Connect(context.Context, *dto.SDP) (*dto.SDP, error)
	SendICE(Core_SendICEServer) error
	ReceiveICE(*types.Empty, Core_ReceiveICEServer) error
	// Ping
	Ping(context.Context, *types.Empty) (*types.Empty, error)
}

// UnimplementedCoreServer can be embedded to have forward compatible implementations.
type UnimplementedCoreServer struct {
}

func (*UnimplementedCoreServer) Connect(ctx context.Context, req *dto.SDP) (*dto.SDP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedCoreServer) SendICE(srv Core_SendICEServer) error {
	return status.Errorf(codes.Unimplemented, "method SendICE not implemented")
}
func (*UnimplementedCoreServer) ReceiveICE(req *types.Empty, srv Core_ReceiveICEServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveICE not implemented")
}
func (*UnimplementedCoreServer) Ping(ctx context.Context, req *types.Empty) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterCoreServer(s *grpc.Server, srv CoreServer) {
	s.RegisterService(&_Core_serviceDesc, srv)
}

func _Core_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.SDP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Core/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Connect(ctx, req.(*dto.SDP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SendICE_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoreServer).SendICE(&coreSendICEServer{stream})
}

type Core_SendICEServer interface {
	SendAndClose(*types.Empty) error
	Recv() (*dto.ICECandidate, error)
	grpc.ServerStream
}

type coreSendICEServer struct {
	grpc.ServerStream
}

func (x *coreSendICEServer) SendAndClose(m *types.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coreSendICEServer) Recv() (*dto.ICECandidate, error) {
	m := new(dto.ICECandidate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Core_ReceiveICE_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).ReceiveICE(m, &coreReceiveICEServer{stream})
}

type Core_ReceiveICEServer interface {
	Send(*dto.ICECandidate) error
	grpc.ServerStream
}

type coreReceiveICEServer struct {
	grpc.ServerStream
}

func (x *coreReceiveICEServer) Send(m *dto.ICECandidate) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Core/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Ping(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Core_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Core_Connect_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Core_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendICE",
			Handler:       _Core_SendICE_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveICE",
			Handler:       _Core_ReceiveICE_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/elojah/game_03/cmd/core/grpc/core.proto",
}
