/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/rtc/dto/rtc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../../gogo/protobuf/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace dto {
    export class ConnectReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            SDP?: SDP;
            PCID?: Uint8Array;
            WorldID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("SDP" in data && data.SDP != undefined) {
                    this.SDP = data.SDP;
                }
                if ("PCID" in data && data.PCID != undefined) {
                    this.PCID = data.PCID;
                }
                if ("WorldID" in data && data.WorldID != undefined) {
                    this.WorldID = data.WorldID;
                }
            }
        }
        get SDP() {
            return pb_1.Message.getWrapperField(this, SDP, 1) as SDP;
        }
        set SDP(value: SDP) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_SDP() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get PCID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set PCID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get WorldID() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set WorldID(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            SDP?: ReturnType<typeof SDP.prototype.toObject>;
            PCID?: Uint8Array;
            WorldID?: Uint8Array;
        }): ConnectReq {
            const message = new ConnectReq({});
            if (data.SDP != null) {
                message.SDP = SDP.fromObject(data.SDP);
            }
            if (data.PCID != null) {
                message.PCID = data.PCID;
            }
            if (data.WorldID != null) {
                message.WorldID = data.WorldID;
            }
            return message;
        }
        toObject() {
            const data: {
                SDP?: ReturnType<typeof SDP.prototype.toObject>;
                PCID?: Uint8Array;
                WorldID?: Uint8Array;
            } = {};
            if (this.SDP != null) {
                data.SDP = this.SDP.toObject();
            }
            if (this.PCID != null) {
                data.PCID = this.PCID;
            }
            if (this.WorldID != null) {
                data.WorldID = this.WorldID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_SDP)
                writer.writeMessage(1, this.SDP, () => this.SDP.serialize(writer));
            if (this.PCID.length)
                writer.writeBytes(2, this.PCID);
            if (this.WorldID.length)
                writer.writeBytes(3, this.WorldID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.SDP, () => message.SDP = SDP.deserialize(reader));
                        break;
                    case 2:
                        message.PCID = reader.readBytes();
                        break;
                    case 3:
                        message.WorldID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectReq {
            return ConnectReq.deserialize(bytes);
        }
    }
    export class SDP extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Encoded?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Encoded" in data && data.Encoded != undefined) {
                    this.Encoded = data.Encoded;
                }
            }
        }
        get Encoded() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set Encoded(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            Encoded?: string;
        }): SDP {
            const message = new SDP({});
            if (data.Encoded != null) {
                message.Encoded = data.Encoded;
            }
            return message;
        }
        toObject() {
            const data: {
                Encoded?: string;
            } = {};
            if (this.Encoded != null) {
                data.Encoded = this.Encoded;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Encoded.length)
                writer.writeString(1, this.Encoded);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SDP {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SDP();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Encoded = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SDP {
            return SDP.deserialize(bytes);
        }
    }
    export class ICECandidate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Encoded?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Encoded" in data && data.Encoded != undefined) {
                    this.Encoded = data.Encoded;
                }
            }
        }
        get Encoded() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set Encoded(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            Encoded?: string;
        }): ICECandidate {
            const message = new ICECandidate({});
            if (data.Encoded != null) {
                message.Encoded = data.Encoded;
            }
            return message;
        }
        toObject() {
            const data: {
                Encoded?: string;
            } = {};
            if (this.Encoded != null) {
                data.Encoded = this.Encoded;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Encoded.length)
                writer.writeString(1, this.Encoded);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ICECandidate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ICECandidate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Encoded = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ICECandidate {
            return ICECandidate.deserialize(bytes);
        }
    }
}
