// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/pkg/rtc/dto/rtc.proto

package dto

import (
	fmt "fmt"
	_ "github.com/elojah/game_03/pkg/gogoproto"
	github_com_elojah_game_03_pkg_ulid "github.com/elojah/game_03/pkg/ulid"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConnectReq struct {
	SDP     *SDP                                  `protobuf:"bytes,1,opt,name=SDP,proto3" json:"SDP,omitempty"`
	PCID    github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,2,opt,name=PCID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"PCID"`
	WorldID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,3,opt,name=WorldID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"WorldID"`
}

func (m *ConnectReq) Reset()      { *m = ConnectReq{} }
func (*ConnectReq) ProtoMessage() {}
func (*ConnectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_69348c5736cd8c95, []int{0}
}
func (m *ConnectReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectReq.Merge(m, src)
}
func (m *ConnectReq) XXX_Size() int {
	return m.Size()
}
func (m *ConnectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectReq proto.InternalMessageInfo

type SDP struct {
	Encoded string `protobuf:"bytes,1,opt,name=Encoded,proto3" json:"Encoded,omitempty"`
}

func (m *SDP) Reset()      { *m = SDP{} }
func (*SDP) ProtoMessage() {}
func (*SDP) Descriptor() ([]byte, []int) {
	return fileDescriptor_69348c5736cd8c95, []int{1}
}
func (m *SDP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SDP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SDP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SDP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SDP.Merge(m, src)
}
func (m *SDP) XXX_Size() int {
	return m.Size()
}
func (m *SDP) XXX_DiscardUnknown() {
	xxx_messageInfo_SDP.DiscardUnknown(m)
}

var xxx_messageInfo_SDP proto.InternalMessageInfo

type ICECandidate struct {
	Encoded string `protobuf:"bytes,1,opt,name=Encoded,proto3" json:"Encoded,omitempty"`
}

func (m *ICECandidate) Reset()      { *m = ICECandidate{} }
func (*ICECandidate) ProtoMessage() {}
func (*ICECandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_69348c5736cd8c95, []int{2}
}
func (m *ICECandidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICECandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICECandidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICECandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICECandidate.Merge(m, src)
}
func (m *ICECandidate) XXX_Size() int {
	return m.Size()
}
func (m *ICECandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_ICECandidate.DiscardUnknown(m)
}

var xxx_messageInfo_ICECandidate proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ConnectReq)(nil), "dto.ConnectReq")
	golang_proto.RegisterType((*ConnectReq)(nil), "dto.ConnectReq")
	proto.RegisterType((*SDP)(nil), "dto.SDP")
	golang_proto.RegisterType((*SDP)(nil), "dto.SDP")
	proto.RegisterType((*ICECandidate)(nil), "dto.ICECandidate")
	golang_proto.RegisterType((*ICECandidate)(nil), "dto.ICECandidate")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_03/pkg/rtc/dto/rtc.proto", fileDescriptor_69348c5736cd8c95)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/pkg/rtc/dto/rtc.proto", fileDescriptor_69348c5736cd8c95)
}

var fileDescriptor_69348c5736cd8c95 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xbf, 0x4e, 0x02, 0x41,
	0x10, 0xc6, 0x77, 0xc4, 0x88, 0xae, 0x54, 0x57, 0x5d, 0x28, 0x06, 0x42, 0x62, 0x42, 0xe3, 0xad,
	0x81, 0x27, 0x90, 0x3b, 0xa2, 0xd7, 0x91, 0xa3, 0xb0, 0x34, 0xc7, 0xed, 0xe6, 0x40, 0xe1, 0x06,
	0xc9, 0xd2, 0xfb, 0x08, 0x3e, 0x86, 0x0f, 0x60, 0x61, 0x49, 0x49, 0x49, 0x49, 0x2c, 0x88, 0xb7,
	0xd7, 0x58, 0x52, 0x5a, 0x1a, 0xd6, 0x50, 0x4a, 0x61, 0x35, 0x7f, 0xf2, 0xfd, 0x66, 0xbe, 0x7c,
	0x5c, 0xa4, 0x23, 0x3d, 0x9c, 0x0f, 0xbc, 0x84, 0x26, 0x42, 0x8d, 0xe9, 0x21, 0x1e, 0x8a, 0x34,
	0x9e, 0xa8, 0xfb, 0xab, 0xb6, 0x98, 0x3e, 0xa6, 0x62, 0xa6, 0x13, 0x21, 0x35, 0xed, 0xaa, 0x37,
	0x9d, 0x91, 0x26, 0xa7, 0x24, 0x35, 0x55, 0x5b, 0x87, 0xa9, 0x94, 0x52, 0xb2, 0x6a, 0xdb, 0xfd,
	0x82, 0x8d, 0x37, 0xe0, 0xdc, 0xa7, 0x2c, 0x53, 0x89, 0x8e, 0xd4, 0x93, 0x53, 0xe5, 0xa5, 0x7e,
	0xd0, 0x73, 0xa1, 0x0e, 0xcd, 0xf3, 0xd6, 0xa9, 0x27, 0x35, 0x79, 0xfd, 0xa0, 0x17, 0xed, 0x96,
	0xce, 0x35, 0x3f, 0xee, 0xf9, 0x61, 0xe0, 0x1e, 0xd5, 0xa1, 0x59, 0xe9, 0x5c, 0x2e, 0x37, 0x35,
	0xf6, 0xb1, 0xa9, 0x5d, 0x1c, 0x7e, 0x3a, 0x1f, 0x8f, 0xa4, 0x17, 0x06, 0x91, 0x45, 0x9d, 0x1b,
	0x5e, 0xbe, 0xa3, 0xd9, 0x58, 0x86, 0x81, 0x5b, 0xfa, 0xcf, 0x95, 0x3d, 0xdd, 0xa8, 0x59, 0x9f,
	0x8e, 0xcb, 0xcb, 0xdd, 0x2c, 0x21, 0xa9, 0xa4, 0xb5, 0x7c, 0x16, 0xed, 0xc7, 0x46, 0x93, 0x57,
	0x42, 0xbf, 0xeb, 0xc7, 0x99, 0x1c, 0xc9, 0x58, 0xab, 0xbf, 0x95, 0x9d, 0xdb, 0x65, 0x8e, 0x6c,
	0x95, 0x23, 0x5b, 0xe7, 0xc8, 0xb6, 0x39, 0xc2, 0x77, 0x8e, 0xf0, 0x6c, 0x10, 0x5e, 0x0d, 0xc2,
	0xbb, 0x41, 0x58, 0x18, 0x84, 0xa5, 0x41, 0x58, 0x19, 0x84, 0x4f, 0x83, 0xf0, 0x65, 0x90, 0x6d,
	0x0d, 0xc2, 0x4b, 0x81, 0x6c, 0x51, 0x20, 0xac, 0x0a, 0x64, 0xeb, 0x02, 0xd9, 0xe0, 0xc4, 0x46,
	0xda, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x55, 0xcc, 0x5f, 0xed, 0xbe, 0x01, 0x00, 0x00,
}

func (this *ConnectReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectReq)
	if !ok {
		that2, ok := that.(ConnectReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SDP.Equal(that1.SDP) {
		return false
	}
	if !this.PCID.Equal(that1.PCID) {
		return false
	}
	if !this.WorldID.Equal(that1.WorldID) {
		return false
	}
	return true
}
func (this *SDP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SDP)
	if !ok {
		that2, ok := that.(SDP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Encoded != that1.Encoded {
		return false
	}
	return true
}
func (this *ICECandidate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ICECandidate)
	if !ok {
		that2, ok := that.(ICECandidate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Encoded != that1.Encoded {
		return false
	}
	return true
}
func (this *ConnectReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dto.ConnectReq{")
	if this.SDP != nil {
		s = append(s, "SDP: "+fmt.Sprintf("%#v", this.SDP)+",\n")
	}
	s = append(s, "PCID: "+fmt.Sprintf("%#v", this.PCID)+",\n")
	s = append(s, "WorldID: "+fmt.Sprintf("%#v", this.WorldID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SDP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dto.SDP{")
	s = append(s, "Encoded: "+fmt.Sprintf("%#v", this.Encoded)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ICECandidate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dto.ICECandidate{")
	s = append(s, "Encoded: "+fmt.Sprintf("%#v", this.Encoded)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRtc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ConnectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.WorldID.Size()
		i -= size
		if _, err := m.WorldID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRtc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.PCID.Size()
		i -= size
		if _, err := m.PCID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRtc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.SDP != nil {
		{
			size, err := m.SDP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SDP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SDP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SDP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Encoded) > 0 {
		i -= len(m.Encoded)
		copy(dAtA[i:], m.Encoded)
		i = encodeVarintRtc(dAtA, i, uint64(len(m.Encoded)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ICECandidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICECandidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICECandidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Encoded) > 0 {
		i -= len(m.Encoded)
		copy(dAtA[i:], m.Encoded)
		i = encodeVarintRtc(dAtA, i, uint64(len(m.Encoded)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRtc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRtc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedConnectReq(r randyRtc, easy bool) *ConnectReq {
	this := &ConnectReq{}
	if r.Intn(5) != 0 {
		this.SDP = NewPopulatedSDP(r, easy)
	}
	v1 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.PCID = *v1
	v2 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.WorldID = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSDP(r randyRtc, easy bool) *SDP {
	this := &SDP{}
	this.Encoded = string(randStringRtc(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedICECandidate(r randyRtc, easy bool) *ICECandidate {
	this := &ICECandidate{}
	this.Encoded = string(randStringRtc(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRtc interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRtc(r randyRtc) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRtc(r randyRtc) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneRtc(r)
	}
	return string(tmps)
}
func randUnrecognizedRtc(r randyRtc, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRtc(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRtc(dAtA []byte, r randyRtc, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRtc(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateRtc(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateRtc(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRtc(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRtc(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRtc(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRtc(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ConnectReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SDP != nil {
		l = m.SDP.Size()
		n += 1 + l + sovRtc(uint64(l))
	}
	l = m.PCID.Size()
	n += 1 + l + sovRtc(uint64(l))
	l = m.WorldID.Size()
	n += 1 + l + sovRtc(uint64(l))
	return n
}

func (m *SDP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Encoded)
	if l > 0 {
		n += 1 + l + sovRtc(uint64(l))
	}
	return n
}

func (m *ICECandidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Encoded)
	if l > 0 {
		n += 1 + l + sovRtc(uint64(l))
	}
	return n
}

func sovRtc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRtc(x uint64) (n int) {
	return sovRtc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ConnectReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectReq{`,
		`SDP:` + strings.Replace(this.SDP.String(), "SDP", "SDP", 1) + `,`,
		`PCID:` + fmt.Sprintf("%v", this.PCID) + `,`,
		`WorldID:` + fmt.Sprintf("%v", this.WorldID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SDP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SDP{`,
		`Encoded:` + fmt.Sprintf("%v", this.Encoded) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ICECandidate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ICECandidate{`,
		`Encoded:` + fmt.Sprintf("%v", this.Encoded) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRtc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ConnectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SDP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SDP == nil {
				m.SDP = &SDP{}
			}
			if err := m.SDP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PCID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRtc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PCID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorldID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRtc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WorldID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SDP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SDP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SDP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encoded = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICECandidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICECandidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICECandidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encoded = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRtc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRtc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRtc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRtc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRtc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRtc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRtc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRtc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRtc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRtc = fmt.Errorf("proto: unexpected end of group")
)
