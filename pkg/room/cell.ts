/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/room/cell.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogo/protobuf/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace room {
    export enum Orientation {
        None = 0,
        Up = 1,
        UpRight = 2,
        Right = 3,
        DownRight = 4,
        Down = 5,
        DownLeft = 6,
        Left = 7,
        UpLeft = 8
    }
    export class Cell extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            Contiguous?: Map<number, Uint8Array>;
            Tilemap?: Uint8Array;
            X?: number;
            Y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Contiguous" in data && data.Contiguous != undefined) {
                    this.Contiguous = data.Contiguous;
                }
                if ("Tilemap" in data && data.Tilemap != undefined) {
                    this.Tilemap = data.Tilemap;
                }
                if ("X" in data && data.X != undefined) {
                    this.X = data.X;
                }
                if ("Y" in data && data.Y != undefined) {
                    this.Y = data.Y;
                }
            }
            if (!this.Contiguous)
                this.Contiguous = new Map();
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Contiguous() {
            return pb_1.Message.getField(this, 2) as any as Map<number, Uint8Array>;
        }
        set Contiguous(value: Map<number, Uint8Array>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get Tilemap() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set Tilemap(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get X() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set X(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get Y() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set Y(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            Contiguous?: {
                [key: number]: Uint8Array;
            };
            Tilemap?: Uint8Array;
            X?: number;
            Y?: number;
        }): Cell {
            const message = new Cell({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (typeof data.Contiguous == "object") {
                message.Contiguous = new Map(Object.entries(data.Contiguous).map(([key, value]) => [Number(key), value]));
            }
            if (data.Tilemap != null) {
                message.Tilemap = data.Tilemap;
            }
            if (data.X != null) {
                message.X = data.X;
            }
            if (data.Y != null) {
                message.Y = data.Y;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                Contiguous?: {
                    [key: number]: Uint8Array;
                };
                Tilemap?: Uint8Array;
                X?: number;
                Y?: number;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Contiguous != null) {
                data.Contiguous = (Object.fromEntries)(this.Contiguous);
            }
            if (this.Tilemap != null) {
                data.Tilemap = this.Tilemap;
            }
            if (this.X != null) {
                data.X = this.X;
            }
            if (this.Y != null) {
                data.Y = this.Y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            for (const [key, value] of this.Contiguous) {
                writer.writeMessage(2, this.Contiguous, () => {
                    writer.writeInt32(1, key);
                    writer.writeBytes(2, value);
                });
            }
            if (this.Tilemap.length)
                writer.writeBytes(3, this.Tilemap);
            if (this.X != 0)
                writer.writeInt64(4, this.X);
            if (this.Y != 0)
                writer.writeInt64(5, this.Y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Cell {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Cell();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.Contiguous as any, reader, reader.readInt32, reader.readBytes));
                        break;
                    case 3:
                        message.Tilemap = reader.readBytes();
                        break;
                    case 4:
                        message.X = reader.readInt64();
                        break;
                    case 5:
                        message.Y = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Cell {
            return Cell.deserialize(bytes);
        }
    }
    export class WorldCell extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            WorldID?: Uint8Array;
            CellID?: Uint8Array;
            X?: number;
            Y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("WorldID" in data && data.WorldID != undefined) {
                    this.WorldID = data.WorldID;
                }
                if ("CellID" in data && data.CellID != undefined) {
                    this.CellID = data.CellID;
                }
                if ("X" in data && data.X != undefined) {
                    this.X = data.X;
                }
                if ("Y" in data && data.Y != undefined) {
                    this.Y = data.Y;
                }
            }
        }
        get WorldID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set WorldID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get CellID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set CellID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get X() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set X(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get Y() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set Y(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            WorldID?: Uint8Array;
            CellID?: Uint8Array;
            X?: number;
            Y?: number;
        }): WorldCell {
            const message = new WorldCell({});
            if (data.WorldID != null) {
                message.WorldID = data.WorldID;
            }
            if (data.CellID != null) {
                message.CellID = data.CellID;
            }
            if (data.X != null) {
                message.X = data.X;
            }
            if (data.Y != null) {
                message.Y = data.Y;
            }
            return message;
        }
        toObject() {
            const data: {
                WorldID?: Uint8Array;
                CellID?: Uint8Array;
                X?: number;
                Y?: number;
            } = {};
            if (this.WorldID != null) {
                data.WorldID = this.WorldID;
            }
            if (this.CellID != null) {
                data.CellID = this.CellID;
            }
            if (this.X != null) {
                data.X = this.X;
            }
            if (this.Y != null) {
                data.Y = this.Y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.WorldID.length)
                writer.writeBytes(1, this.WorldID);
            if (this.CellID.length)
                writer.writeBytes(2, this.CellID);
            if (this.X != 0)
                writer.writeInt64(3, this.X);
            if (this.Y != 0)
                writer.writeInt64(4, this.Y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorldCell {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorldCell();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.WorldID = reader.readBytes();
                        break;
                    case 2:
                        message.CellID = reader.readBytes();
                        break;
                    case 3:
                        message.X = reader.readInt64();
                        break;
                    case 4:
                        message.Y = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorldCell {
            return WorldCell.deserialize(bytes);
        }
    }
}
