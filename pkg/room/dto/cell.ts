/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/room/dto/cell.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../../gogo/protobuf/gogoproto/gogo";
import * as dependency_2 from "./../../entity/entity";
import * as dependency_3 from "./../cell";
import * as pb_1 from "google-protobuf";
export namespace dto {
    export class Entity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Entity?: dependency_2.entity.E;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Entity" in data && data.Entity != undefined) {
                    this.Entity = data.Entity;
                }
            }
        }
        get Entity() {
            return pb_1.Message.getWrapperField(this, dependency_2.entity.E, 1) as dependency_2.entity.E;
        }
        set Entity(value: dependency_2.entity.E) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Entity() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            Entity?: ReturnType<typeof dependency_2.entity.E.prototype.toObject>;
        }): Entity {
            const message = new Entity({});
            if (data.Entity != null) {
                message.Entity = dependency_2.entity.E.fromObject(data.Entity);
            }
            return message;
        }
        toObject() {
            const data: {
                Entity?: ReturnType<typeof dependency_2.entity.E.prototype.toObject>;
            } = {};
            if (this.Entity != null) {
                data.Entity = this.Entity.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Entity)
                writer.writeMessage(1, this.Entity, () => this.Entity.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Entity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Entity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Entity, () => message.Entity = dependency_2.entity.E.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Entity {
            return Entity.deserialize(bytes);
        }
    }
    export class Cell extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            Entities?: Entity[];
            TS?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Entities" in data && data.Entities != undefined) {
                    this.Entities = data.Entities;
                }
                if ("TS" in data && data.TS != undefined) {
                    this.TS = data.TS;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Entities() {
            return pb_1.Message.getRepeatedWrapperField(this, Entity, 2) as Entity[];
        }
        set Entities(value: Entity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get TS() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set TS(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            Entities?: ReturnType<typeof Entity.prototype.toObject>[];
            TS?: number;
        }): Cell {
            const message = new Cell({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Entities != null) {
                message.Entities = data.Entities.map(item => Entity.fromObject(item));
            }
            if (data.TS != null) {
                message.TS = data.TS;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                Entities?: ReturnType<typeof Entity.prototype.toObject>[];
                TS?: number;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Entities != null) {
                data.Entities = this.Entities.map((item: Entity) => item.toObject());
            }
            if (this.TS != null) {
                data.TS = this.TS;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.Entities.length)
                writer.writeRepeatedMessage(2, this.Entities, (item: Entity) => item.serialize(writer));
            if (this.TS != 0)
                writer.writeInt64(3, this.TS);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Cell {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Cell();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.Entities, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Entity.deserialize(reader), Entity));
                        break;
                    case 3:
                        message.TS = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Cell {
            return Cell.deserialize(bytes);
        }
    }
    export class ListCellReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            IDs?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("IDs" in data && data.IDs != undefined) {
                    this.IDs = data.IDs;
                }
            }
        }
        get IDs() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set IDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            IDs?: Uint8Array[];
        }): ListCellReq {
            const message = new ListCellReq({});
            if (data.IDs != null) {
                message.IDs = data.IDs;
            }
            return message;
        }
        toObject() {
            const data: {
                IDs?: Uint8Array[];
            } = {};
            if (this.IDs != null) {
                data.IDs = this.IDs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.IDs.length)
                writer.writeRepeatedBytes(1, this.IDs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCellReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCellReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCellReq {
            return ListCellReq.deserialize(bytes);
        }
    }
    export class ListCellResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Cells?: dependency_3.room.Cell[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Cells" in data && data.Cells != undefined) {
                    this.Cells = data.Cells;
                }
            }
        }
        get Cells() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.room.Cell, 1) as dependency_3.room.Cell[];
        }
        set Cells(value: dependency_3.room.Cell[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            Cells?: ReturnType<typeof dependency_3.room.Cell.prototype.toObject>[];
        }): ListCellResp {
            const message = new ListCellResp({});
            if (data.Cells != null) {
                message.Cells = data.Cells.map(item => dependency_3.room.Cell.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                Cells?: ReturnType<typeof dependency_3.room.Cell.prototype.toObject>[];
            } = {};
            if (this.Cells != null) {
                data.Cells = this.Cells.map((item: dependency_3.room.Cell) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Cells.length)
                writer.writeRepeatedMessage(1, this.Cells, (item: dependency_3.room.Cell) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCellResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCellResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Cells, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.room.Cell.deserialize(reader), dependency_3.room.Cell));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCellResp {
            return ListCellResp.deserialize(bytes);
        }
    }
}
