/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/room/dto/room.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../../gogo/protobuf/gogoproto/gogo";
import * as dependency_2 from "./../room";
import * as dependency_3 from "./../../user/user";
import * as pb_1 from "google-protobuf";
export namespace dto {
    export class Room extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Room?: dependency_2.room.R;
            Owner?: dependency_3.user.U;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Room" in data && data.Room != undefined) {
                    this.Room = data.Room;
                }
                if ("Owner" in data && data.Owner != undefined) {
                    this.Owner = data.Owner;
                }
            }
        }
        get Room() {
            return pb_1.Message.getWrapperField(this, dependency_2.room.R, 1) as dependency_2.room.R;
        }
        set Room(value: dependency_2.room.R) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Room() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Owner() {
            return pb_1.Message.getWrapperField(this, dependency_3.user.U, 2) as dependency_3.user.U;
        }
        set Owner(value: dependency_3.user.U) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_Owner() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            Room?: ReturnType<typeof dependency_2.room.R.prototype.toObject>;
            Owner?: ReturnType<typeof dependency_3.user.U.prototype.toObject>;
        }): Room {
            const message = new Room({});
            if (data.Room != null) {
                message.Room = dependency_2.room.R.fromObject(data.Room);
            }
            if (data.Owner != null) {
                message.Owner = dependency_3.user.U.fromObject(data.Owner);
            }
            return message;
        }
        toObject() {
            const data: {
                Room?: ReturnType<typeof dependency_2.room.R.prototype.toObject>;
                Owner?: ReturnType<typeof dependency_3.user.U.prototype.toObject>;
            } = {};
            if (this.Room != null) {
                data.Room = this.Room.toObject();
            }
            if (this.Owner != null) {
                data.Owner = this.Owner.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Room)
                writer.writeMessage(1, this.Room, () => this.Room.serialize(writer));
            if (this.has_Owner)
                writer.writeMessage(2, this.Owner, () => this.Owner.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Room {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Room();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Room, () => message.Room = dependency_2.room.R.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.Owner, () => message.Owner = dependency_3.user.U.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Room {
            return Room.deserialize(bytes);
        }
    }
    export class ListRoomReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Size?: number;
            State?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Size" in data && data.Size != undefined) {
                    this.Size = data.Size;
                }
                if ("State" in data && data.State != undefined) {
                    this.State = data.State;
                }
            }
        }
        get Size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set Size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get State() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set State(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Size?: number;
            State?: Uint8Array;
        }): ListRoomReq {
            const message = new ListRoomReq({});
            if (data.Size != null) {
                message.Size = data.Size;
            }
            if (data.State != null) {
                message.State = data.State;
            }
            return message;
        }
        toObject() {
            const data: {
                Size?: number;
                State?: Uint8Array;
            } = {};
            if (this.Size != null) {
                data.Size = this.Size;
            }
            if (this.State != null) {
                data.State = this.State;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Size != 0)
                writer.writeInt64(1, this.Size);
            if (this.State.length)
                writer.writeBytes(2, this.State);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRoomReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRoomReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Size = reader.readInt64();
                        break;
                    case 2:
                        message.State = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRoomReq {
            return ListRoomReq.deserialize(bytes);
        }
    }
    export class ListRoomResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Rooms?: Room[];
            State?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Rooms" in data && data.Rooms != undefined) {
                    this.Rooms = data.Rooms;
                }
                if ("State" in data && data.State != undefined) {
                    this.State = data.State;
                }
            }
        }
        get Rooms() {
            return pb_1.Message.getRepeatedWrapperField(this, Room, 1) as Room[];
        }
        set Rooms(value: Room[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get State() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set State(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Rooms?: ReturnType<typeof Room.prototype.toObject>[];
            State?: Uint8Array;
        }): ListRoomResp {
            const message = new ListRoomResp({});
            if (data.Rooms != null) {
                message.Rooms = data.Rooms.map(item => Room.fromObject(item));
            }
            if (data.State != null) {
                message.State = data.State;
            }
            return message;
        }
        toObject() {
            const data: {
                Rooms?: ReturnType<typeof Room.prototype.toObject>[];
                State?: Uint8Array;
            } = {};
            if (this.Rooms != null) {
                data.Rooms = this.Rooms.map((item: Room) => item.toObject());
            }
            if (this.State != null) {
                data.State = this.State;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Rooms.length)
                writer.writeRepeatedMessage(1, this.Rooms, (item: Room) => item.serialize(writer));
            if (this.State.length)
                writer.writeBytes(2, this.State);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRoomResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRoomResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Rooms, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Room.deserialize(reader), Room));
                        break;
                    case 2:
                        message.State = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRoomResp {
            return ListRoomResp.deserialize(bytes);
        }
    }
}
