// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/pkg/room/dto/room.proto

package dto

import (
	fmt "fmt"
	room "github.com/elojah/game_03/pkg/room"
	user "github.com/elojah/game_03/pkg/user"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Room struct {
	Room  room.R `protobuf:"bytes,1,opt,name=Room,proto3" json:"Room"`
	Owner user.U `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner"`
}

func (m *Room) Reset()      { *m = Room{} }
func (*Room) ProtoMessage() {}
func (*Room) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb76369b24ff759d, []int{0}
}
func (m *Room) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Room) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Room.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Room) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Room.Merge(m, src)
}
func (m *Room) XXX_Size() int {
	return m.Size()
}
func (m *Room) XXX_DiscardUnknown() {
	xxx_messageInfo_Room.DiscardUnknown(m)
}

var xxx_messageInfo_Room proto.InternalMessageInfo

func (m *Room) GetRoom() room.R {
	if m != nil {
		return m.Room
	}
	return room.R{}
}

func (m *Room) GetOwner() user.U {
	if m != nil {
		return m.Owner
	}
	return user.U{}
}

type ListRoomReq struct {
	After string `protobuf:"bytes,1,opt,name=After,proto3" json:"After,omitempty"`
	First int64  `protobuf:"varint,2,opt,name=First,proto3" json:"First,omitempty"`
}

func (m *ListRoomReq) Reset()      { *m = ListRoomReq{} }
func (*ListRoomReq) ProtoMessage() {}
func (*ListRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb76369b24ff759d, []int{1}
}
func (m *ListRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomReq.Merge(m, src)
}
func (m *ListRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *ListRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomReq proto.InternalMessageInfo

func (m *ListRoomReq) GetAfter() string {
	if m != nil {
		return m.After
	}
	return ""
}

func (m *ListRoomReq) GetFirst() int64 {
	if m != nil {
		return m.First
	}
	return 0
}

type ListRoomResp struct {
	Rooms  []Room `protobuf:"bytes,1,rep,name=Rooms,proto3" json:"Rooms"`
	Total  uint64 `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Cursor string `protobuf:"bytes,3,opt,name=Cursor,proto3" json:"Cursor,omitempty"`
}

func (m *ListRoomResp) Reset()      { *m = ListRoomResp{} }
func (*ListRoomResp) ProtoMessage() {}
func (*ListRoomResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb76369b24ff759d, []int{2}
}
func (m *ListRoomResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoomResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoomResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoomResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomResp.Merge(m, src)
}
func (m *ListRoomResp) XXX_Size() int {
	return m.Size()
}
func (m *ListRoomResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomResp proto.InternalMessageInfo

func (m *ListRoomResp) GetRooms() []Room {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (m *ListRoomResp) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListRoomResp) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func init() {
	proto.RegisterType((*Room)(nil), "dto.Room")
	golang_proto.RegisterType((*Room)(nil), "dto.Room")
	proto.RegisterType((*ListRoomReq)(nil), "dto.ListRoomReq")
	golang_proto.RegisterType((*ListRoomReq)(nil), "dto.ListRoomReq")
	proto.RegisterType((*ListRoomResp)(nil), "dto.ListRoomResp")
	golang_proto.RegisterType((*ListRoomResp)(nil), "dto.ListRoomResp")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_03/pkg/room/dto/room.proto", fileDescriptor_eb76369b24ff759d)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/pkg/room/dto/room.proto", fileDescriptor_eb76369b24ff759d)
}

var fileDescriptor_eb76369b24ff759d = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xbf, 0x4e, 0xf3, 0x40,
	0x10, 0xc4, 0x7d, 0x9f, 0x93, 0x7c, 0xca, 0x85, 0xca, 0x42, 0xc8, 0xa2, 0x58, 0x42, 0x10, 0x52,
	0x1a, 0x6c, 0x48, 0x2a, 0x4a, 0x02, 0xa2, 0x42, 0x20, 0x9d, 0xa0, 0x46, 0xf9, 0xe3, 0x38, 0x81,
	0x98, 0x0d, 0xe7, 0xb3, 0x68, 0x79, 0x04, 0x1e, 0x83, 0x47, 0xa0, 0x4c, 0x99, 0x32, 0x65, 0x2a,
	0x84, 0xcf, 0x0d, 0x65, 0x4a, 0x4a, 0xe4, 0xbd, 0xa0, 0x40, 0x81, 0x68, 0xec, 0x9d, 0xdd, 0x99,
	0xdf, 0x48, 0xc7, 0x0f, 0xc2, 0xa1, 0x1a, 0x24, 0x1d, 0xaf, 0x8b, 0x91, 0x1f, 0x8c, 0xf0, 0xa6,
	0x3d, 0xf0, 0xc3, 0x76, 0x14, 0x5c, 0xef, 0x37, 0xfd, 0xf1, 0x6d, 0xe8, 0x4b, 0xc4, 0xc8, 0xef,
	0x29, 0xa4, 0xc1, 0x1b, 0x4b, 0x54, 0xe8, 0xd8, 0x3d, 0x85, 0x9b, 0x7b, 0xdf, 0x72, 0x21, 0x86,
	0xe8, 0xd3, 0xad, 0x93, 0xf4, 0x49, 0x91, 0xa0, 0xc9, 0x64, 0x7e, 0xd8, 0x7f, 0xab, 0x59, 0x55,
	0xfc, 0x65, 0x4f, 0xe2, 0x40, 0xd2, 0xc7, 0xd8, 0x6b, 0xe7, 0xbc, 0x20, 0x10, 0x23, 0x67, 0xdb,
	0xfc, 0x5d, 0x56, 0x65, 0xf5, 0x4a, 0xe3, 0xbf, 0x47, 0x44, 0xd1, 0x2a, 0x4c, 0x5f, 0xb7, 0x2c,
	0x61, 0x2c, 0x3b, 0xbc, 0x78, 0xf1, 0x70, 0x17, 0x48, 0xf7, 0xdf, 0xd2, 0x43, 0x98, 0xab, 0xa5,
	0xc7, 0xdc, 0x6a, 0x87, 0xbc, 0x72, 0x36, 0x8c, 0x55, 0x1e, 0x10, 0xc1, 0xbd, 0xb3, 0xce, 0x8b,
	0x47, 0x7d, 0x15, 0x48, 0xe2, 0x96, 0x85, 0x11, 0xf9, 0xf6, 0x74, 0x28, 0x63, 0x45, 0x24, 0x5b,
	0x18, 0x51, 0xeb, 0xf2, 0xb5, 0x55, 0x34, 0x1e, 0x3b, 0xbb, 0xbc, 0x98, 0xcf, 0xb1, 0xcb, 0xaa,
	0x76, 0xbd, 0xd2, 0x28, 0x7b, 0x3d, 0x85, 0x5e, 0xbe, 0xf9, 0x6a, 0xa4, 0x6b, 0x0e, 0xbb, 0x44,
	0xd5, 0x1e, 0x11, 0xac, 0x20, 0x8c, 0x70, 0x36, 0x78, 0xe9, 0x38, 0x91, 0x31, 0x4a, 0xd7, 0xa6,
	0xe6, 0xa5, 0x6a, 0x9d, 0xcc, 0x52, 0xb0, 0xe6, 0x29, 0x58, 0x8b, 0x14, 0xd8, 0x47, 0x0a, 0xec,
	0x51, 0x03, 0x7b, 0xd6, 0xc0, 0x5e, 0x34, 0xb0, 0x89, 0x06, 0x36, 0xd5, 0xc0, 0x66, 0x1a, 0xd8,
	0x9b, 0x06, 0xf6, 0xae, 0xc1, 0x5a, 0x68, 0x60, 0x4f, 0x19, 0x58, 0x93, 0x0c, 0xd8, 0x2c, 0x03,
	0x6b, 0x9e, 0x81, 0xd5, 0x29, 0xd1, 0xe3, 0x35, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x51,
	0x5a, 0x1c, 0x03, 0x02, 0x00, 0x00,
}

func (this *Room) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Room)
	if !ok {
		that2, ok := that.(Room)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(&that1.Room) {
		return false
	}
	if !this.Owner.Equal(&that1.Owner) {
		return false
	}
	return true
}
func (this *ListRoomReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomReq)
	if !ok {
		that2, ok := that.(ListRoomReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.After != that1.After {
		return false
	}
	if this.First != that1.First {
		return false
	}
	return true
}
func (this *ListRoomResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomResp)
	if !ok {
		that2, ok := that.(ListRoomResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return false
	}
	for i := range this.Rooms {
		if !this.Rooms[i].Equal(&that1.Rooms[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	if this.Cursor != that1.Cursor {
		return false
	}
	return true
}
func (this *Room) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dto.Room{")
	s = append(s, "Room: "+strings.Replace(this.Room.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Owner: "+strings.Replace(this.Owner.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRoomReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dto.ListRoomReq{")
	s = append(s, "After: "+fmt.Sprintf("%#v", this.After)+",\n")
	s = append(s, "First: "+fmt.Sprintf("%#v", this.First)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRoomResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dto.ListRoomResp{")
	if this.Rooms != nil {
		vs := make([]Room, len(this.Rooms))
		for i := range vs {
			vs[i] = this.Rooms[i]
		}
		s = append(s, "Rooms: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "Cursor: "+fmt.Sprintf("%#v", this.Cursor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRoom(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Room) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Room) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Room) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoom(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoom(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoomReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.First != 0 {
		i = encodeVarintRoom(dAtA, i, uint64(m.First))
		i--
		dAtA[i] = 0x10
	}
	if len(m.After) > 0 {
		i -= len(m.After)
		copy(dAtA[i:], m.After)
		i = encodeVarintRoom(dAtA, i, uint64(len(m.After)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRoomResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoomResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cursor) > 0 {
		i -= len(m.Cursor)
		copy(dAtA[i:], m.Cursor)
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Cursor)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Total != 0 {
		i = encodeVarintRoom(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rooms) > 0 {
		for iNdEx := len(m.Rooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoom(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRoom(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoom(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedRoom(r randyRoom, easy bool) *Room {
	this := &Room{}
	v1 := room.NewPopulatedR(r, easy)
	this.Room = *v1
	v2 := user.NewPopulatedU(r, easy)
	this.Owner = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListRoomReq(r randyRoom, easy bool) *ListRoomReq {
	this := &ListRoomReq{}
	this.After = string(randStringRoom(r))
	this.First = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.First *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListRoomResp(r randyRoom, easy bool) *ListRoomResp {
	this := &ListRoomResp{}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.Rooms = make([]Room, v3)
		for i := 0; i < v3; i++ {
			v4 := NewPopulatedRoom(r, easy)
			this.Rooms[i] = *v4
		}
	}
	this.Total = uint64(uint64(r.Uint32()))
	this.Cursor = string(randStringRoom(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRoom interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRoom(r randyRoom) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRoom(r randyRoom) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneRoom(r)
	}
	return string(tmps)
}
func randUnrecognizedRoom(r randyRoom, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRoom(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRoom(dAtA []byte, r randyRoom, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRoom(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRoom(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Room) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Room.Size()
	n += 1 + l + sovRoom(uint64(l))
	l = m.Owner.Size()
	n += 1 + l + sovRoom(uint64(l))
	return n
}

func (m *ListRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.After)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.First != 0 {
		n += 1 + sovRoom(uint64(m.First))
	}
	return n
}

func (m *ListRoomResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovRoom(uint64(m.Total))
	}
	l = len(m.Cursor)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func sovRoom(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoom(x uint64) (n int) {
	return sovRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Room) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Room{`,
		`Room:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Room), "R", "room.R", 1), `&`, ``, 1) + `,`,
		`Owner:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Owner), "U", "user.U", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoomReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoomReq{`,
		`After:` + fmt.Sprintf("%v", this.After) + `,`,
		`First:` + fmt.Sprintf("%v", this.First) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoomResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRooms := "[]Room{"
	for _, f := range this.Rooms {
		repeatedStringForRooms += strings.Replace(strings.Replace(f.String(), "Room", "Room", 1), `&`, ``, 1) + ","
	}
	repeatedStringForRooms += "}"
	s := strings.Join([]string{`&ListRoomResp{`,
		`Rooms:` + repeatedStringForRooms + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`Cursor:` + fmt.Sprintf("%v", this.Cursor) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRoom(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Room) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.After = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			m.First = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.First |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoomResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoomResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoomResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, Room{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoom
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoom
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoom
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoom        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoom          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoom = fmt.Errorf("proto: unexpected end of group")
)
