/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/room/dto/world.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../../gogo/protobuf/gogoproto/gogo";
import * as dependency_2 from "./../world";
import * as pb_1 from "google-protobuf";
export namespace dto {
    export class ListWorldReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            IDs?: Uint8Array[];
            All?: boolean;
            Size?: number;
            State?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("IDs" in data && data.IDs != undefined) {
                    this.IDs = data.IDs;
                }
                if ("All" in data && data.All != undefined) {
                    this.All = data.All;
                }
                if ("Size" in data && data.Size != undefined) {
                    this.Size = data.Size;
                }
                if ("State" in data && data.State != undefined) {
                    this.State = data.State;
                }
            }
        }
        get IDs() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set IDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get All() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set All(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get Size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set Size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get State() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set State(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            IDs?: Uint8Array[];
            All?: boolean;
            Size?: number;
            State?: Uint8Array;
        }): ListWorldReq {
            const message = new ListWorldReq({});
            if (data.IDs != null) {
                message.IDs = data.IDs;
            }
            if (data.All != null) {
                message.All = data.All;
            }
            if (data.Size != null) {
                message.Size = data.Size;
            }
            if (data.State != null) {
                message.State = data.State;
            }
            return message;
        }
        toObject() {
            const data: {
                IDs?: Uint8Array[];
                All?: boolean;
                Size?: number;
                State?: Uint8Array;
            } = {};
            if (this.IDs != null) {
                data.IDs = this.IDs;
            }
            if (this.All != null) {
                data.All = this.All;
            }
            if (this.Size != null) {
                data.Size = this.Size;
            }
            if (this.State != null) {
                data.State = this.State;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.IDs.length)
                writer.writeRepeatedBytes(1, this.IDs);
            if (this.All != false)
                writer.writeBool(2, this.All);
            if (this.Size != 0)
                writer.writeInt64(3, this.Size);
            if (this.State.length)
                writer.writeBytes(4, this.State);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWorldReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWorldReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        message.All = reader.readBool();
                        break;
                    case 3:
                        message.Size = reader.readInt64();
                        break;
                    case 4:
                        message.State = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWorldReq {
            return ListWorldReq.deserialize(bytes);
        }
    }
    export class ListWorldResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Worlds?: dependency_2.room.World[];
            State?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Worlds" in data && data.Worlds != undefined) {
                    this.Worlds = data.Worlds;
                }
                if ("State" in data && data.State != undefined) {
                    this.State = data.State;
                }
            }
        }
        get Worlds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.room.World, 1) as dependency_2.room.World[];
        }
        set Worlds(value: dependency_2.room.World[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get State() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set State(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Worlds?: ReturnType<typeof dependency_2.room.World.prototype.toObject>[];
            State?: Uint8Array;
        }): ListWorldResp {
            const message = new ListWorldResp({});
            if (data.Worlds != null) {
                message.Worlds = data.Worlds.map(item => dependency_2.room.World.fromObject(item));
            }
            if (data.State != null) {
                message.State = data.State;
            }
            return message;
        }
        toObject() {
            const data: {
                Worlds?: ReturnType<typeof dependency_2.room.World.prototype.toObject>[];
                State?: Uint8Array;
            } = {};
            if (this.Worlds != null) {
                data.Worlds = this.Worlds.map((item: dependency_2.room.World) => item.toObject());
            }
            if (this.State != null) {
                data.State = this.State;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Worlds.length)
                writer.writeRepeatedMessage(1, this.Worlds, (item: dependency_2.room.World) => item.serialize(writer));
            if (this.State.length)
                writer.writeBytes(2, this.State);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWorldResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWorldResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Worlds, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.room.World.deserialize(reader), dependency_2.room.World));
                        break;
                    case 2:
                        message.State = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWorldResp {
            return ListWorldResp.deserialize(bytes);
        }
    }
}
