// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/pkg/room/dto/cell.proto

package dto

import (
	fmt "fmt"
	entity "github.com/elojah/game_03/pkg/entity"
	room "github.com/elojah/game_03/pkg/room"
	github_com_elojah_game_03_pkg_ulid "github.com/elojah/game_03/pkg/ulid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Entity struct {
	Entity *entity.E `protobuf:"bytes,1,opt,name=Entity,proto3" json:"Entity,omitempty"`
}

func (m *Entity) Reset()      { *m = Entity{} }
func (*Entity) ProtoMessage() {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_538b037165b7b867, []int{0}
}
func (m *Entity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return m.Size()
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

func (m *Entity) GetEntity() *entity.E {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Cell struct {
	Cell     *room.Cell                              `protobuf:"bytes,1,opt,name=Cell,proto3" json:"Cell,omitempty"`
	Entities []github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,2,rep,name=Entities,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"Entities"`
	TS       int64                                   `protobuf:"varint,3,opt,name=TS,proto3" json:"TS,omitempty"`
}

func (m *Cell) Reset()      { *m = Cell{} }
func (*Cell) ProtoMessage() {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_538b037165b7b867, []int{1}
}
func (m *Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(m, src)
}
func (m *Cell) XXX_Size() int {
	return m.Size()
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetCell() *room.Cell {
	if m != nil {
		return m.Cell
	}
	return nil
}

func (m *Cell) GetTS() int64 {
	if m != nil {
		return m.TS
	}
	return 0
}

func init() {
	proto.RegisterType((*Entity)(nil), "dto.Entity")
	golang_proto.RegisterType((*Entity)(nil), "dto.Entity")
	proto.RegisterType((*Cell)(nil), "dto.Cell")
	golang_proto.RegisterType((*Cell)(nil), "dto.Cell")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_03/pkg/room/dto/cell.proto", fileDescriptor_538b037165b7b867)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/pkg/room/dto/cell.proto", fileDescriptor_538b037165b7b867)
}

var fileDescriptor_538b037165b7b867 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x3f, 0x4f, 0x02, 0x31,
	0x18, 0xc6, 0xfb, 0x72, 0x86, 0x68, 0x49, 0x1c, 0x6e, 0x22, 0x0c, 0x2f, 0x48, 0x62, 0x42, 0x62,
	0x68, 0x15, 0xbe, 0x01, 0xc2, 0xe0, 0x7a, 0x10, 0x57, 0x03, 0x5c, 0x3d, 0x4e, 0x8b, 0x25, 0xd8,
	0x1b, 0xdc, 0xfc, 0x04, 0xc6, 0x8f, 0xe1, 0x47, 0x70, 0x64, 0x64, 0xbc, 0x91, 0x38, 0x10, 0xaf,
	0xb7, 0x38, 0x32, 0x3a, 0x1a, 0x7a, 0xe7, 0x9f, 0x49, 0x9d, 0xde, 0xf7, 0xe9, 0xd3, 0xdf, 0xd3,
	0x27, 0xa5, 0x27, 0x41, 0xa8, 0x27, 0xd1, 0x88, 0x8d, 0xd5, 0x94, 0x0b, 0xa9, 0xae, 0x86, 0x13,
	0x1e, 0x0c, 0xa7, 0xe2, 0xe2, 0xb8, 0xcd, 0x67, 0xd7, 0x01, 0x9f, 0x2b, 0x35, 0xe5, 0xbe, 0x56,
	0x7c, 0x2c, 0xa4, 0x64, 0xb3, 0xb9, 0xd2, 0xca, 0x75, 0x7c, 0xad, 0x2a, 0xcd, 0x1f, 0x5c, 0xa0,
	0x02, 0xc5, 0xad, 0x37, 0x8a, 0x2e, 0xad, 0xb2, 0xc2, 0x6e, 0x19, 0x53, 0xf9, 0xe3, 0x19, 0x71,
	0xa3, 0x43, 0x7d, 0x97, 0x8f, 0x1c, 0x69, 0xfe, 0xa3, 0xd9, 0x77, 0xab, 0xfa, 0x11, 0x2d, 0xf6,
	0x2c, 0xee, 0x1e, 0x7c, 0x6e, 0x65, 0xa8, 0x41, 0xa3, 0xd4, 0xda, 0x63, 0x79, 0x6e, 0xcf, 0xcb,
	0x8d, 0xfa, 0x03, 0xd0, 0x9d, 0x53, 0x21, 0xa5, 0x8b, 0xd9, 0xcc, 0x6f, 0x52, 0xb6, 0x4d, 0x65,
	0xdb, 0x13, 0x2f, 0xf3, 0xcf, 0xe9, 0xae, 0x45, 0x42, 0x71, 0x5b, 0x2e, 0xd4, 0x9c, 0x46, 0xa9,
	0x55, 0x62, 0xbe, 0x56, 0x2c, 0xcb, 0xe9, 0x34, 0x97, 0xeb, 0x2a, 0x79, 0x59, 0x57, 0x0f, 0x7f,
	0xef, 0x1a, 0xc9, 0xd0, 0x67, 0x67, 0x5d, 0xef, 0x2b, 0xcb, 0xdd, 0xa7, 0x85, 0x41, 0xbf, 0xec,
	0xd4, 0xa0, 0xe1, 0x78, 0x85, 0x41, 0xbf, 0xd3, 0x8d, 0x13, 0x24, 0xab, 0x04, 0xc9, 0x26, 0x41,
	0x78, 0x4f, 0x10, 0xee, 0x0d, 0xc2, 0x93, 0x41, 0x78, 0x36, 0x08, 0x0b, 0x83, 0xb0, 0x34, 0x08,
	0xb1, 0x41, 0x78, 0x35, 0x08, 0x6f, 0x06, 0xc9, 0xc6, 0x20, 0x3c, 0xa6, 0x48, 0x16, 0x29, 0x42,
	0x9c, 0x22, 0x59, 0xa5, 0x48, 0x46, 0x45, 0xfb, 0x15, 0xed, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x55, 0xbc, 0x2d, 0x2c, 0xd5, 0x01, 0x00, 0x00,
}

func (this *Entity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Entity)
	if !ok {
		that2, ok := that.(Entity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *Cell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cell)
	if !ok {
		that2, ok := that.(Cell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cell.Equal(that1.Cell) {
		return false
	}
	if len(this.Entities) != len(that1.Entities) {
		return false
	}
	for i := range this.Entities {
		if !this.Entities[i].Equal(that1.Entities[i]) {
			return false
		}
	}
	if this.TS != that1.TS {
		return false
	}
	return true
}
func (this *Entity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dto.Entity{")
	if this.Entity != nil {
		s = append(s, "Entity: "+fmt.Sprintf("%#v", this.Entity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cell) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dto.Cell{")
	if this.Cell != nil {
		s = append(s, "Cell: "+fmt.Sprintf("%#v", this.Cell)+",\n")
	}
	s = append(s, "Entities: "+fmt.Sprintf("%#v", this.Entities)+",\n")
	s = append(s, "TS: "+fmt.Sprintf("%#v", this.TS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCell(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entity != nil {
		{
			size, err := m.Entity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCell(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TS != 0 {
		i = encodeVarintCell(dAtA, i, uint64(m.TS))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Entities[iNdEx].Size()
				i -= size
				if _, err := m.Entities[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintCell(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Cell != nil {
		{
			size, err := m.Cell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCell(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCell(dAtA []byte, offset int, v uint64) int {
	offset -= sovCell(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedEntity(r randyCell, easy bool) *Entity {
	this := &Entity{}
	if r.Intn(5) != 0 {
		this.Entity = entity.NewPopulatedE(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCell(r randyCell, easy bool) *Cell {
	this := &Cell{}
	if r.Intn(5) != 0 {
		this.Cell = room.NewPopulatedCell(r, easy)
	}
	if r.Intn(5) != 0 {
		v1 := r.Intn(10)
		this.Entities = make([]github_com_elojah_game_03_pkg_ulid.ID, v1)
		for i := 0; i < v1; i++ {
			v2 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
			this.Entities[i] = *v2
		}
	}
	this.TS = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TS *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyCell interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCell(r randyCell) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCell(r randyCell) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneCell(r)
	}
	return string(tmps)
}
func randUnrecognizedCell(r randyCell, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCell(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCell(dAtA []byte, r randyCell, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCell(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateCell(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateCell(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCell(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCell(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCell(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCell(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Entity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovCell(uint64(l))
	}
	return n
}

func (m *Cell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovCell(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovCell(uint64(l))
		}
	}
	if m.TS != 0 {
		n += 1 + sovCell(uint64(m.TS))
	}
	return n
}

func sovCell(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCell(x uint64) (n int) {
	return sovCell(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Entity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Entity{`,
		`Entity:` + strings.Replace(fmt.Sprintf("%v", this.Entity), "E", "entity.E", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cell) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cell{`,
		`Cell:` + strings.Replace(fmt.Sprintf("%v", this.Cell), "Cell", "room.Cell", 1) + `,`,
		`Entities:` + fmt.Sprintf("%v", this.Entities) + `,`,
		`TS:` + fmt.Sprintf("%v", this.TS) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCell(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCell
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCell
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCell
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCell
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &entity.E{}
			}
			if err := m.Entity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCell(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCell
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCell
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCell
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCell
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCell
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCell
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &room.Cell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCell
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCell
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCell
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, github_com_elojah_game_03_pkg_ulid.ID{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TS", wireType)
			}
			m.TS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCell
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCell(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCell
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCell
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCell(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCell
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCell
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCell
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCell
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCell
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCell
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCell        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCell          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCell = fmt.Errorf("proto: unexpected end of group")
)
