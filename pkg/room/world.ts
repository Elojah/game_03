/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/room/world.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogo/protobuf/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace room {
    export class World extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            Name?: string;
            Height?: number;
            Width?: number;
            CellHeight?: number;
            CellWidth?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Height" in data && data.Height != undefined) {
                    this.Height = data.Height;
                }
                if ("Width" in data && data.Width != undefined) {
                    this.Width = data.Width;
                }
                if ("CellHeight" in data && data.CellHeight != undefined) {
                    this.CellHeight = data.CellHeight;
                }
                if ("CellWidth" in data && data.CellWidth != undefined) {
                    this.CellWidth = data.CellWidth;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set Height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get Width() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set Width(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get CellHeight() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set CellHeight(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get CellWidth() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set CellWidth(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            Name?: string;
            Height?: number;
            Width?: number;
            CellHeight?: number;
            CellWidth?: number;
        }): World {
            const message = new World({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Height != null) {
                message.Height = data.Height;
            }
            if (data.Width != null) {
                message.Width = data.Width;
            }
            if (data.CellHeight != null) {
                message.CellHeight = data.CellHeight;
            }
            if (data.CellWidth != null) {
                message.CellWidth = data.CellWidth;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                Name?: string;
                Height?: number;
                Width?: number;
                CellHeight?: number;
                CellWidth?: number;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Height != null) {
                data.Height = this.Height;
            }
            if (this.Width != null) {
                data.Width = this.Width;
            }
            if (this.CellHeight != null) {
                data.CellHeight = this.CellHeight;
            }
            if (this.CellWidth != null) {
                data.CellWidth = this.CellWidth;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.Name.length)
                writer.writeString(2, this.Name);
            if (this.Height != 0)
                writer.writeInt64(3, this.Height);
            if (this.Width != 0)
                writer.writeInt64(4, this.Width);
            if (this.CellHeight != 0)
                writer.writeInt64(5, this.CellHeight);
            if (this.CellWidth != 0)
                writer.writeInt64(6, this.CellWidth);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): World {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new World();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        message.Name = reader.readString();
                        break;
                    case 3:
                        message.Height = reader.readInt64();
                        break;
                    case 4:
                        message.Width = reader.readInt64();
                        break;
                    case 5:
                        message.CellHeight = reader.readInt64();
                        break;
                    case 6:
                        message.CellWidth = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): World {
            return World.deserialize(bytes);
        }
    }
}
