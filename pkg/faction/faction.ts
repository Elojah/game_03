/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/faction/faction.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogo/protobuf/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace faction {
    export class F extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            WorldID?: Uint8Array;
            Name?: string;
            Icon?: string;
            Max?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("WorldID" in data && data.WorldID != undefined) {
                    this.WorldID = data.WorldID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Icon" in data && data.Icon != undefined) {
                    this.Icon = data.Icon;
                }
                if ("Max" in data && data.Max != undefined) {
                    this.Max = data.Max;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get WorldID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set WorldID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get Name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Icon() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set Icon(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Max() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set Max(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            WorldID?: Uint8Array;
            Name?: string;
            Icon?: string;
            Max?: number;
        }): F {
            const message = new F({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.WorldID != null) {
                message.WorldID = data.WorldID;
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Icon != null) {
                message.Icon = data.Icon;
            }
            if (data.Max != null) {
                message.Max = data.Max;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                WorldID?: Uint8Array;
                Name?: string;
                Icon?: string;
                Max?: number;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.WorldID != null) {
                data.WorldID = this.WorldID;
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Icon != null) {
                data.Icon = this.Icon;
            }
            if (this.Max != null) {
                data.Max = this.Max;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.WorldID.length)
                writer.writeBytes(2, this.WorldID);
            if (this.Name.length)
                writer.writeString(3, this.Name);
            if (this.Icon.length)
                writer.writeString(4, this.Icon);
            if (this.Max != 0)
                writer.writeInt64(5, this.Max);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): F {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new F();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        message.WorldID = reader.readBytes();
                        break;
                    case 3:
                        message.Name = reader.readString();
                        break;
                    case 4:
                        message.Icon = reader.readString();
                        break;
                    case 5:
                        message.Max = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): F {
            return F.deserialize(bytes);
        }
    }
    export class PC extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            FactionID?: Uint8Array;
            Permission?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("FactionID" in data && data.FactionID != undefined) {
                    this.FactionID = data.FactionID;
                }
                if ("Permission" in data && data.Permission != undefined) {
                    this.Permission = data.Permission;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get FactionID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set FactionID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get Permission() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set Permission(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            FactionID?: Uint8Array;
            Permission?: number;
        }): PC {
            const message = new PC({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.FactionID != null) {
                message.FactionID = data.FactionID;
            }
            if (data.Permission != null) {
                message.Permission = data.Permission;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                FactionID?: Uint8Array;
                Permission?: number;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.FactionID != null) {
                data.FactionID = this.FactionID;
            }
            if (this.Permission != null) {
                data.Permission = this.Permission;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.FactionID.length)
                writer.writeBytes(2, this.FactionID);
            if (this.Permission != 0)
                writer.writeInt64(3, this.Permission);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PC {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PC();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        message.FactionID = reader.readBytes();
                        break;
                    case 3:
                        message.Permission = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PC {
            return PC.deserialize(bytes);
        }
    }
}
