/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('../../../../../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
var github_com_elojah_game_03_pkg_geometry_geometry_pb = require('../../../../../github.com/elojah/game_03/pkg/geometry/geometry_pb.js');
var github_com_elojah_game_03_pkg_entity_animation_pb = require('../../../../../github.com/elojah/game_03/pkg/entity/animation_pb.js');
goog.exportSymbol('proto.entity.E', null, global);
goog.exportSymbol('proto.entity.Stat', null, global);
goog.exportSymbol('proto.entity.Stats', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.entity.Stats.displayName = 'proto.entity.Stats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.Stats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
    damage: jspb.Message.getFieldWithDefault(msg, 1, 0),
    defense: jspb.Message.getFieldWithDefault(msg, 2, 0),
    movespeed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    castspeed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cooldownreduction: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    mp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxhp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    maxmp: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.Stats}
 */
proto.entity.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.Stats;
  return proto.entity.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.Stats}
 */
proto.entity.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDamage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDefense(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMovespeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCastspeed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCooldownreduction(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxhp(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxmp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDamage();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDefense();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMovespeed();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCastspeed();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCooldownreduction();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getMp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getMaxhp();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getMaxmp();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional int64 Damage = 1;
 * @return {number}
 */
proto.entity.Stats.prototype.getDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.entity.Stats.prototype.setDamage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 Defense = 2;
 * @return {number}
 */
proto.entity.Stats.prototype.getDefense = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.entity.Stats.prototype.setDefense = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 MoveSpeed = 3;
 * @return {number}
 */
proto.entity.Stats.prototype.getMovespeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.entity.Stats.prototype.setMovespeed = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 CastSpeed = 4;
 * @return {number}
 */
proto.entity.Stats.prototype.getCastspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.entity.Stats.prototype.setCastspeed = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 CooldownReduction = 5;
 * @return {number}
 */
proto.entity.Stats.prototype.getCooldownreduction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.entity.Stats.prototype.setCooldownreduction = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 HP = 6;
 * @return {number}
 */
proto.entity.Stats.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.entity.Stats.prototype.setHp = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 MP = 7;
 * @return {number}
 */
proto.entity.Stats.prototype.getMp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.entity.Stats.prototype.setMp = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 MaxHP = 8;
 * @return {number}
 */
proto.entity.Stats.prototype.getMaxhp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.entity.Stats.prototype.setMaxhp = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 MaxMP = 9;
 * @return {number}
 */
proto.entity.Stats.prototype.getMaxmp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.entity.Stats.prototype.setMaxmp = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.E = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.entity.E.repeatedFields_, null);
};
goog.inherits(proto.entity.E, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.entity.E.displayName = 'proto.entity.E';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.entity.E.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.E.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.E.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.E} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.E.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    userid: msg.getUserid_asB64(),
    cellid: msg.getCellid_asB64(),
    factionid: msg.getFactionid_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    x: jspb.Message.getFieldWithDefault(msg, 6, 0),
    y: jspb.Message.getFieldWithDefault(msg, 7, 0),
    rot: jspb.Message.getFieldWithDefault(msg, 8, 0),
    radius: jspb.Message.getFieldWithDefault(msg, 9, 0),
    at: jspb.Message.getFieldWithDefault(msg, 10, 0),
    animationid: msg.getAnimationid_asB64(),
    animationat: jspb.Message.getFieldWithDefault(msg, 12, 0),
    objectsList: jspb.Message.toObjectList(msg.getObjectsList(),
    github_com_elojah_game_03_pkg_geometry_geometry_pb.Rect.toObject, includeInstance),
    stats: (f = msg.getStats()) && proto.entity.Stats.toObject(includeInstance, f),
    effectsMap: (f = msg.getEffectsMap()) ? f.toObject(includeInstance, undefined) : [],
    abilitiesMap: (f = msg.getAbilitiesMap()) ? f.toObject(includeInstance, proto.entity.AnimationAbility.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.E}
 */
proto.entity.E.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.E;
  return proto.entity.E.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.E} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.E}
 */
proto.entity.E.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCellid(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFactionid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRot(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRadius(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAt(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAnimationid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAnimationat(value);
      break;
    case 13:
      var value = new github_com_elojah_game_03_pkg_geometry_geometry_pb.Rect;
      reader.readMessage(value,github_com_elojah_game_03_pkg_geometry_geometry_pb.Rect.deserializeBinaryFromReader);
      msg.addObjects(value);
      break;
    case 14:
      var value = new proto.entity.Stats;
      reader.readMessage(value,proto.entity.Stats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    case 15:
      var value = msg.getEffectsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "");
         });
      break;
    case 16:
      var value = msg.getAbilitiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.entity.AnimationAbility.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.E.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.E} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.E.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUserid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCellid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getFactionid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getRot();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getRadius();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getAt();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getAnimationid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getAnimationat();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      github_com_elojah_game_03_pkg_geometry_geometry_pb.Rect.serializeBinaryToWriter
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.entity.Stats.serializeBinaryToWriter
    );
  }
  f = message.getEffectsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getAbilitiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.entity.AnimationAbility.serializeBinaryToWriter);
  }
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.entity.E.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes UserID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getUserid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes UserID = 2;
 * This is a type-conversion wrapper around `getUserid()`
 * @return {string}
 */
proto.entity.E.prototype.getUserid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserid()));
};


/**
 * optional bytes UserID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserid()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getUserid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserid()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setUserid = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes CellID = 3;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getCellid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes CellID = 3;
 * This is a type-conversion wrapper around `getCellid()`
 * @return {string}
 */
proto.entity.E.prototype.getCellid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCellid()));
};


/**
 * optional bytes CellID = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCellid()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getCellid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCellid()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setCellid = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes FactionID = 4;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getFactionid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes FactionID = 4;
 * This is a type-conversion wrapper around `getFactionid()`
 * @return {string}
 */
proto.entity.E.prototype.getFactionid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFactionid()));
};


/**
 * optional bytes FactionID = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFactionid()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getFactionid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFactionid()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setFactionid = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string Name = 5;
 * @return {string}
 */
proto.entity.E.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.entity.E.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 X = 6;
 * @return {number}
 */
proto.entity.E.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.entity.E.prototype.setX = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 Y = 7;
 * @return {number}
 */
proto.entity.E.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.entity.E.prototype.setY = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 Rot = 8;
 * @return {number}
 */
proto.entity.E.prototype.getRot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.entity.E.prototype.setRot = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 Radius = 9;
 * @return {number}
 */
proto.entity.E.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.entity.E.prototype.setRadius = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 At = 10;
 * @return {number}
 */
proto.entity.E.prototype.getAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.entity.E.prototype.setAt = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes AnimationID = 11;
 * @return {!(string|Uint8Array)}
 */
proto.entity.E.prototype.getAnimationid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes AnimationID = 11;
 * This is a type-conversion wrapper around `getAnimationid()`
 * @return {string}
 */
proto.entity.E.prototype.getAnimationid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAnimationid()));
};


/**
 * optional bytes AnimationID = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAnimationid()`
 * @return {!Uint8Array}
 */
proto.entity.E.prototype.getAnimationid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAnimationid()));
};


/** @param {!(string|Uint8Array)} value */
proto.entity.E.prototype.setAnimationid = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional int64 AnimationAt = 12;
 * @return {number}
 */
proto.entity.E.prototype.getAnimationat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.entity.E.prototype.setAnimationat = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * repeated geometry.Rect Objects = 13;
 * @return {!Array<!proto.geometry.Rect>}
 */
proto.entity.E.prototype.getObjectsList = function() {
  return /** @type{!Array<!proto.geometry.Rect>} */ (
    jspb.Message.getRepeatedWrapperField(this, github_com_elojah_game_03_pkg_geometry_geometry_pb.Rect, 13));
};


/** @param {!Array<!proto.geometry.Rect>} value */
proto.entity.E.prototype.setObjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.geometry.Rect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.geometry.Rect}
 */
proto.entity.E.prototype.addObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.geometry.Rect, opt_index);
};


proto.entity.E.prototype.clearObjectsList = function() {
  this.setObjectsList([]);
};


/**
 * optional Stats Stats = 14;
 * @return {?proto.entity.Stats}
 */
proto.entity.E.prototype.getStats = function() {
  return /** @type{?proto.entity.Stats} */ (
    jspb.Message.getWrapperField(this, proto.entity.Stats, 14));
};


/** @param {?proto.entity.Stats|undefined} value */
proto.entity.E.prototype.setStats = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.entity.E.prototype.clearStats = function() {
  this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.entity.E.prototype.hasStats = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * map<string, int64> Effects = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.entity.E.prototype.getEffectsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


proto.entity.E.prototype.clearEffectsMap = function() {
  this.getEffectsMap().clear();
};


/**
 * map<string, AnimationAbility> Abilities = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.entity.AnimationAbility>}
 */
proto.entity.E.prototype.getAbilitiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.entity.AnimationAbility>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      proto.entity.AnimationAbility));
};


proto.entity.E.prototype.clearAbilitiesMap = function() {
  this.getAbilitiesMap().clear();
};


/**
 * @enum {number}
 */
proto.entity.Stat = {
  NONESTAT: 0,
  DAMAGE: 1,
  DEFENSE: 2,
  MOVESPEED: 4,
  CASTSPEED: 5,
  COOLDOWNREDUCTION: 6,
  HP: 7,
  MP: 8,
  MAXHP: 9,
  MAXMP: 10
};

goog.object.extend(exports, proto.entity);
