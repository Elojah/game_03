/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/entity/dto/animation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../../gogo/protobuf/gogoproto/gogo";
import * as dependency_2 from "./../animation";
import * as pb_1 from "google-protobuf";
export namespace dto {
    export class ListAnimationReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            IDs?: Uint8Array[];
            EntityIDs?: Uint8Array[];
            Size?: number;
            State?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("IDs" in data && data.IDs != undefined) {
                    this.IDs = data.IDs;
                }
                if ("EntityIDs" in data && data.EntityIDs != undefined) {
                    this.EntityIDs = data.EntityIDs;
                }
                if ("Size" in data && data.Size != undefined) {
                    this.Size = data.Size;
                }
                if ("State" in data && data.State != undefined) {
                    this.State = data.State;
                }
            }
        }
        get IDs() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set IDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get EntityIDs() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set EntityIDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get Size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set Size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get State() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set State(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            IDs?: Uint8Array[];
            EntityIDs?: Uint8Array[];
            Size?: number;
            State?: Uint8Array;
        }): ListAnimationReq {
            const message = new ListAnimationReq({});
            if (data.IDs != null) {
                message.IDs = data.IDs;
            }
            if (data.EntityIDs != null) {
                message.EntityIDs = data.EntityIDs;
            }
            if (data.Size != null) {
                message.Size = data.Size;
            }
            if (data.State != null) {
                message.State = data.State;
            }
            return message;
        }
        toObject() {
            const data: {
                IDs?: Uint8Array[];
                EntityIDs?: Uint8Array[];
                Size?: number;
                State?: Uint8Array;
            } = {};
            if (this.IDs != null) {
                data.IDs = this.IDs;
            }
            if (this.EntityIDs != null) {
                data.EntityIDs = this.EntityIDs;
            }
            if (this.Size != null) {
                data.Size = this.Size;
            }
            if (this.State != null) {
                data.State = this.State;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.IDs.length)
                writer.writeRepeatedBytes(1, this.IDs);
            if (this.EntityIDs.length)
                writer.writeRepeatedBytes(2, this.EntityIDs);
            if (this.Size != 0)
                writer.writeInt64(3, this.Size);
            if (this.State.length)
                writer.writeBytes(4, this.State);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAnimationReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAnimationReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 3:
                        message.Size = reader.readInt64();
                        break;
                    case 4:
                        message.State = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAnimationReq {
            return ListAnimationReq.deserialize(bytes);
        }
    }
    export class ListAnimationResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Animations?: dependency_2.entity.Animation[];
            State?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Animations" in data && data.Animations != undefined) {
                    this.Animations = data.Animations;
                }
                if ("State" in data && data.State != undefined) {
                    this.State = data.State;
                }
            }
        }
        get Animations() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.entity.Animation, 1) as dependency_2.entity.Animation[];
        }
        set Animations(value: dependency_2.entity.Animation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get State() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set State(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Animations?: ReturnType<typeof dependency_2.entity.Animation.prototype.toObject>[];
            State?: Uint8Array;
        }): ListAnimationResp {
            const message = new ListAnimationResp({});
            if (data.Animations != null) {
                message.Animations = data.Animations.map(item => dependency_2.entity.Animation.fromObject(item));
            }
            if (data.State != null) {
                message.State = data.State;
            }
            return message;
        }
        toObject() {
            const data: {
                Animations?: ReturnType<typeof dependency_2.entity.Animation.prototype.toObject>[];
                State?: Uint8Array;
            } = {};
            if (this.Animations != null) {
                data.Animations = this.Animations.map((item: dependency_2.entity.Animation) => item.toObject());
            }
            if (this.State != null) {
                data.State = this.State;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Animations.length)
                writer.writeRepeatedMessage(1, this.Animations, (item: dependency_2.entity.Animation) => item.serialize(writer));
            if (this.State.length)
                writer.writeBytes(2, this.State);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAnimationResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAnimationResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Animations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.entity.Animation.deserialize(reader), dependency_2.entity.Animation));
                        break;
                    case 2:
                        message.State = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAnimationResp {
            return ListAnimationResp.deserialize(bytes);
        }
    }
    export class CreateAnimationReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            EntityTemplate?: string;
            Animation?: dependency_2.entity.Animation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("EntityTemplate" in data && data.EntityTemplate != undefined) {
                    this.EntityTemplate = data.EntityTemplate;
                }
                if ("Animation" in data && data.Animation != undefined) {
                    this.Animation = data.Animation;
                }
            }
        }
        get EntityTemplate() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set EntityTemplate(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Animation() {
            return pb_1.Message.getWrapperField(this, dependency_2.entity.Animation, 2) as dependency_2.entity.Animation;
        }
        set Animation(value: dependency_2.entity.Animation) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_Animation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            EntityTemplate?: string;
            Animation?: ReturnType<typeof dependency_2.entity.Animation.prototype.toObject>;
        }): CreateAnimationReq {
            const message = new CreateAnimationReq({});
            if (data.EntityTemplate != null) {
                message.EntityTemplate = data.EntityTemplate;
            }
            if (data.Animation != null) {
                message.Animation = dependency_2.entity.Animation.fromObject(data.Animation);
            }
            return message;
        }
        toObject() {
            const data: {
                EntityTemplate?: string;
                Animation?: ReturnType<typeof dependency_2.entity.Animation.prototype.toObject>;
            } = {};
            if (this.EntityTemplate != null) {
                data.EntityTemplate = this.EntityTemplate;
            }
            if (this.Animation != null) {
                data.Animation = this.Animation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.EntityTemplate.length)
                writer.writeString(1, this.EntityTemplate);
            if (this.has_Animation)
                writer.writeMessage(2, this.Animation, () => this.Animation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAnimationReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAnimationReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.EntityTemplate = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.Animation, () => message.Animation = dependency_2.entity.Animation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAnimationReq {
            return CreateAnimationReq.deserialize(bytes);
        }
    }
}
