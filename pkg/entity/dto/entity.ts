/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/entity/dto/entity.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../../gogo/protobuf/gogoproto/gogo";
import * as dependency_2 from "./../../ability/ability";
import * as dependency_3 from "./../entity";
import * as pb_1 from "google-protobuf";
export namespace dto {
    export class ListEntityReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            IDs?: Uint8Array[];
            CellIDs?: Uint8Array[];
            Size?: number;
            State?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("IDs" in data && data.IDs != undefined) {
                    this.IDs = data.IDs;
                }
                if ("CellIDs" in data && data.CellIDs != undefined) {
                    this.CellIDs = data.CellIDs;
                }
                if ("Size" in data && data.Size != undefined) {
                    this.Size = data.Size;
                }
                if ("State" in data && data.State != undefined) {
                    this.State = data.State;
                }
            }
        }
        get IDs() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set IDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get CellIDs() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set CellIDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get Size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set Size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get State() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set State(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            IDs?: Uint8Array[];
            CellIDs?: Uint8Array[];
            Size?: number;
            State?: Uint8Array;
        }): ListEntityReq {
            const message = new ListEntityReq({});
            if (data.IDs != null) {
                message.IDs = data.IDs;
            }
            if (data.CellIDs != null) {
                message.CellIDs = data.CellIDs;
            }
            if (data.Size != null) {
                message.Size = data.Size;
            }
            if (data.State != null) {
                message.State = data.State;
            }
            return message;
        }
        toObject() {
            const data: {
                IDs?: Uint8Array[];
                CellIDs?: Uint8Array[];
                Size?: number;
                State?: Uint8Array;
            } = {};
            if (this.IDs != null) {
                data.IDs = this.IDs;
            }
            if (this.CellIDs != null) {
                data.CellIDs = this.CellIDs;
            }
            if (this.Size != null) {
                data.Size = this.Size;
            }
            if (this.State != null) {
                data.State = this.State;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.IDs.length)
                writer.writeRepeatedBytes(1, this.IDs);
            if (this.CellIDs.length)
                writer.writeRepeatedBytes(2, this.CellIDs);
            if (this.Size != 0)
                writer.writeInt64(3, this.Size);
            if (this.State.length)
                writer.writeBytes(4, this.State);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListEntityReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListEntityReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 3:
                        message.Size = reader.readInt64();
                        break;
                    case 4:
                        message.State = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListEntityReq {
            return ListEntityReq.deserialize(bytes);
        }
    }
    export class ListEntityResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Entities?: dependency_3.entity.E[];
            State?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Entities" in data && data.Entities != undefined) {
                    this.Entities = data.Entities;
                }
                if ("State" in data && data.State != undefined) {
                    this.State = data.State;
                }
            }
        }
        get Entities() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.entity.E, 1) as dependency_3.entity.E[];
        }
        set Entities(value: dependency_3.entity.E[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get State() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set State(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Entities?: ReturnType<typeof dependency_3.entity.E.prototype.toObject>[];
            State?: Uint8Array;
        }): ListEntityResp {
            const message = new ListEntityResp({});
            if (data.Entities != null) {
                message.Entities = data.Entities.map(item => dependency_3.entity.E.fromObject(item));
            }
            if (data.State != null) {
                message.State = data.State;
            }
            return message;
        }
        toObject() {
            const data: {
                Entities?: ReturnType<typeof dependency_3.entity.E.prototype.toObject>[];
                State?: Uint8Array;
            } = {};
            if (this.Entities != null) {
                data.Entities = this.Entities.map((item: dependency_3.entity.E) => item.toObject());
            }
            if (this.State != null) {
                data.State = this.State;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Entities.length)
                writer.writeRepeatedMessage(1, this.Entities, (item: dependency_3.entity.E) => item.serialize(writer));
            if (this.State.length)
                writer.writeBytes(2, this.State);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListEntityResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListEntityResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Entities, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.entity.E.deserialize(reader), dependency_3.entity.E));
                        break;
                    case 2:
                        message.State = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListEntityResp {
            return ListEntityResp.deserialize(bytes);
        }
    }
    export class CreateEntityAbilityReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            EntityID?: Uint8Array;
            Ability?: dependency_2.ability.A;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("EntityID" in data && data.EntityID != undefined) {
                    this.EntityID = data.EntityID;
                }
                if ("Ability" in data && data.Ability != undefined) {
                    this.Ability = data.Ability;
                }
            }
        }
        get EntityID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set EntityID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Ability() {
            return pb_1.Message.getWrapperField(this, dependency_2.ability.A, 2) as dependency_2.ability.A;
        }
        set Ability(value: dependency_2.ability.A) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_Ability() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            EntityID?: Uint8Array;
            Ability?: ReturnType<typeof dependency_2.ability.A.prototype.toObject>;
        }): CreateEntityAbilityReq {
            const message = new CreateEntityAbilityReq({});
            if (data.EntityID != null) {
                message.EntityID = data.EntityID;
            }
            if (data.Ability != null) {
                message.Ability = dependency_2.ability.A.fromObject(data.Ability);
            }
            return message;
        }
        toObject() {
            const data: {
                EntityID?: Uint8Array;
                Ability?: ReturnType<typeof dependency_2.ability.A.prototype.toObject>;
            } = {};
            if (this.EntityID != null) {
                data.EntityID = this.EntityID;
            }
            if (this.Ability != null) {
                data.Ability = this.Ability.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.EntityID.length)
                writer.writeBytes(1, this.EntityID);
            if (this.has_Ability)
                writer.writeMessage(2, this.Ability, () => this.Ability.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEntityAbilityReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEntityAbilityReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.EntityID = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.Ability, () => message.Ability = dependency_2.ability.A.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEntityAbilityReq {
            return CreateEntityAbilityReq.deserialize(bytes);
        }
    }
    export class CreateEntityAbilityResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            EntityID?: Uint8Array;
            AbilityID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("EntityID" in data && data.EntityID != undefined) {
                    this.EntityID = data.EntityID;
                }
                if ("AbilityID" in data && data.AbilityID != undefined) {
                    this.AbilityID = data.AbilityID;
                }
            }
        }
        get EntityID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set EntityID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get AbilityID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set AbilityID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            EntityID?: Uint8Array;
            AbilityID?: Uint8Array;
        }): CreateEntityAbilityResp {
            const message = new CreateEntityAbilityResp({});
            if (data.EntityID != null) {
                message.EntityID = data.EntityID;
            }
            if (data.AbilityID != null) {
                message.AbilityID = data.AbilityID;
            }
            return message;
        }
        toObject() {
            const data: {
                EntityID?: Uint8Array;
                AbilityID?: Uint8Array;
            } = {};
            if (this.EntityID != null) {
                data.EntityID = this.EntityID;
            }
            if (this.AbilityID != null) {
                data.AbilityID = this.AbilityID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.EntityID.length)
                writer.writeBytes(1, this.EntityID);
            if (this.AbilityID.length)
                writer.writeBytes(2, this.AbilityID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEntityAbilityResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEntityAbilityResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.EntityID = reader.readBytes();
                        break;
                    case 2:
                        message.AbilityID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEntityAbilityResp {
            return CreateEntityAbilityResp.deserialize(bytes);
        }
    }
}
