/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/entity/pc_preferences.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogo/protobuf/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace entity {
    export class PCPreferences extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            PCID?: Uint8Array;
            AbilityHotbars?: Map<string, Uint8Array>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("PCID" in data && data.PCID != undefined) {
                    this.PCID = data.PCID;
                }
                if ("AbilityHotbars" in data && data.AbilityHotbars != undefined) {
                    this.AbilityHotbars = data.AbilityHotbars;
                }
            }
            if (!this.AbilityHotbars)
                this.AbilityHotbars = new Map();
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get PCID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set PCID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get AbilityHotbars() {
            return pb_1.Message.getField(this, 3) as any as Map<string, Uint8Array>;
        }
        set AbilityHotbars(value: Map<string, Uint8Array>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            PCID?: Uint8Array;
            AbilityHotbars?: {
                [key: string]: Uint8Array;
            };
        }): PCPreferences {
            const message = new PCPreferences({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.PCID != null) {
                message.PCID = data.PCID;
            }
            if (typeof data.AbilityHotbars == "object") {
                message.AbilityHotbars = new Map(Object.entries(data.AbilityHotbars));
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                PCID?: Uint8Array;
                AbilityHotbars?: {
                    [key: string]: Uint8Array;
                };
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.PCID != null) {
                data.PCID = this.PCID;
            }
            if (this.AbilityHotbars != null) {
                data.AbilityHotbars = (Object.fromEntries)(this.AbilityHotbars);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.PCID.length)
                writer.writeBytes(2, this.PCID);
            for (const [key, value] of this.AbilityHotbars) {
                writer.writeMessage(3, this.AbilityHotbars, () => {
                    writer.writeString(1, key);
                    writer.writeBytes(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PCPreferences {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PCPreferences();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        message.PCID = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.AbilityHotbars as any, reader, reader.readString, reader.readBytes));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PCPreferences {
            return PCPreferences.deserialize(bytes);
        }
    }
}
