// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/pkg/entity/pc_preferences.proto

package entity

import (
	fmt "fmt"
	_ "github.com/elojah/game_03/pkg/gogoproto"
	github_com_elojah_game_03_pkg_ulid "github.com/elojah/game_03/pkg/ulid"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PCPreferences struct {
	ID             github_com_elojah_game_03_pkg_ulid.ID            `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"ID"`
	PCID           github_com_elojah_game_03_pkg_ulid.ID            `protobuf:"bytes,2,opt,name=PCID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"PCID"`
	AbilityHotbars map[string]github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,3,rep,name=AbilityHotbars,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"AbilityHotbars" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PCPreferences) Reset()      { *m = PCPreferences{} }
func (*PCPreferences) ProtoMessage() {}
func (*PCPreferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_07012c2b78bddcc7, []int{0}
}
func (m *PCPreferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PCPreferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PCPreferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PCPreferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PCPreferences.Merge(m, src)
}
func (m *PCPreferences) XXX_Size() int {
	return m.Size()
}
func (m *PCPreferences) XXX_DiscardUnknown() {
	xxx_messageInfo_PCPreferences.DiscardUnknown(m)
}

var xxx_messageInfo_PCPreferences proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PCPreferences)(nil), "entity.PCPreferences")
	golang_proto.RegisterType((*PCPreferences)(nil), "entity.PCPreferences")
	proto.RegisterMapType((map[string]github_com_elojah_game_03_pkg_ulid.ID)(nil), "entity.PCPreferences.AbilityHotbarsEntry")
	golang_proto.RegisterMapType((map[string]github_com_elojah_game_03_pkg_ulid.ID)(nil), "entity.PCPreferences.AbilityHotbarsEntry")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_03/pkg/entity/pc_preferences.proto", fileDescriptor_07012c2b78bddcc7)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/pkg/entity/pc_preferences.proto", fileDescriptor_07012c2b78bddcc7)
}

var fileDescriptor_07012c2b78bddcc7 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x4c, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcd, 0xc9, 0xcf, 0x4a, 0xcc, 0xd0, 0x4f, 0x4f,
	0xcc, 0x4d, 0x8d, 0x37, 0x30, 0xd6, 0x2f, 0xc8, 0x4e, 0xd7, 0x4f, 0xcd, 0x2b, 0xc9, 0x2c, 0xa9,
	0xd4, 0x2f, 0x48, 0x8e, 0x2f, 0x28, 0x4a, 0x4d, 0x4b, 0x2d, 0x4a, 0xcd, 0x4b, 0x4e, 0x2d, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0x48, 0x4a, 0x19, 0xe1, 0x37, 0x22, 0x3d, 0x3f,
	0x3d, 0x1f, 0xac, 0x01, 0xcc, 0x82, 0xe8, 0x55, 0xba, 0xce, 0xc4, 0xc5, 0x1b, 0xe0, 0x1c, 0x80,
	0x30, 0x53, 0xc8, 0x96, 0x8b, 0xc9, 0xd3, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0xc7, 0x49, 0xf7,
	0xc4, 0x3d, 0x79, 0x86, 0x5b, 0xf7, 0xe4, 0x55, 0xf1, 0x9b, 0x5c, 0x9a, 0x93, 0x99, 0xa2, 0xe7,
	0xe9, 0x12, 0xc4, 0xe4, 0xe9, 0x22, 0xe4, 0xc8, 0xc5, 0x12, 0xe0, 0xec, 0xe9, 0x22, 0xc1, 0x44,
	0x8e, 0x01, 0x60, 0xad, 0x42, 0x0d, 0x8c, 0x5c, 0x7c, 0x8e, 0x49, 0x99, 0x39, 0x99, 0x25, 0x95,
	0x1e, 0xf9, 0x25, 0x49, 0x89, 0x45, 0xc5, 0x12, 0xcc, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x9a, 0x7a,
	0x10, 0x9f, 0xea, 0xa1, 0xb8, 0x58, 0x0f, 0x55, 0xad, 0x6b, 0x5e, 0x49, 0x51, 0x25, 0xa9, 0x16,
	0xa3, 0xd9, 0x27, 0xe5, 0xc8, 0x25, 0x8c, 0xc5, 0x54, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a,
	0x70, 0xe0, 0x70, 0x06, 0x81, 0x98, 0x42, 0x22, 0x5c, 0xac, 0x65, 0x89, 0x39, 0xa5, 0xa9, 0x10,
	0xff, 0x06, 0x41, 0x38, 0x56, 0x4c, 0x16, 0x8c, 0x4e, 0x1e, 0x27, 0x1e, 0xca, 0x31, 0x5c, 0x78,
	0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87, 0x72, 0x8c, 0x3f, 0x1e, 0xca, 0x31, 0x36,
	0x3c, 0x92, 0x63, 0x5c, 0xf1, 0x48, 0x8e, 0x71, 0xc7, 0x23, 0x39, 0xc6, 0x03, 0x8f, 0xe4, 0x18,
	0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4,
	0x18, 0x3e, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc0, 0x63, 0x39, 0xc6, 0x0b, 0x8f,
	0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0x47, 0x95, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x5f, 0xf5, 0x09, 0x98, 0x23, 0x02, 0x00, 0x00,
}

func (this *PCPreferences) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PCPreferences)
	if !ok {
		that2, ok := that.(PCPreferences)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.PCID.Equal(that1.PCID) {
		return false
	}
	if len(this.AbilityHotbars) != len(that1.AbilityHotbars) {
		return false
	}
	for i := range this.AbilityHotbars {
		if !this.AbilityHotbars[i].Equal(that1.AbilityHotbars[i]) { //not nullable
			return false
		}
	}
	return true
}
func (this *PCPreferences) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&entity.PCPreferences{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "PCID: "+fmt.Sprintf("%#v", this.PCID)+",\n")
	keysForAbilityHotbars := make([]string, 0, len(this.AbilityHotbars))
	for k, _ := range this.AbilityHotbars {
		keysForAbilityHotbars = append(keysForAbilityHotbars, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAbilityHotbars)
	mapStringForAbilityHotbars := "map[string]github_com_elojah_game_03_pkg_ulid.ID{"
	for _, k := range keysForAbilityHotbars {
		mapStringForAbilityHotbars += fmt.Sprintf("%#v: %#v,", k, this.AbilityHotbars[k])
	}
	mapStringForAbilityHotbars += "}"
	if this.AbilityHotbars != nil {
		s = append(s, "AbilityHotbars: "+mapStringForAbilityHotbars+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPcPreferences(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PCPreferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PCPreferences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PCPreferences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AbilityHotbars) > 0 {
		for k := range m.AbilityHotbars {
			v := m.AbilityHotbars[k]
			baseI := i
			{
				size := v.Size()
				i -= size
				if _, err := v.MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintPcPreferences(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPcPreferences(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPcPreferences(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.PCID.Size()
		i -= size
		if _, err := m.PCID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPcPreferences(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPcPreferences(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPcPreferences(dAtA []byte, offset int, v uint64) int {
	offset -= sovPcPreferences(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedPCPreferences(r randyPcPreferences, easy bool) *PCPreferences {
	this := &PCPreferences{}
	v1 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.ID = *v1
	v2 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.PCID = *v2
	if r.Intn(5) != 0 {
		v3 := r.Intn(10)
		this.AbilityHotbars = make(map[string]github_com_elojah_game_03_pkg_ulid.ID)
		for i := 0; i < v3; i++ {
			this.AbilityHotbars[randStringPcPreferences(r)] = (github_com_elojah_game_03_pkg_ulid.ID)(*github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r))
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyPcPreferences interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePcPreferences(r randyPcPreferences) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPcPreferences(r randyPcPreferences) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RunePcPreferences(r)
	}
	return string(tmps)
}
func randUnrecognizedPcPreferences(r randyPcPreferences, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPcPreferences(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPcPreferences(dAtA []byte, r randyPcPreferences, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePcPreferences(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulatePcPreferences(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulatePcPreferences(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePcPreferences(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePcPreferences(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePcPreferences(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePcPreferences(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *PCPreferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovPcPreferences(uint64(l))
	l = m.PCID.Size()
	n += 1 + l + sovPcPreferences(uint64(l))
	if len(m.AbilityHotbars) > 0 {
		for k, v := range m.AbilityHotbars {
			_ = k
			_ = v
			l = 0
			l = v.Size()
			l += 1 + sovPcPreferences(uint64(l))
			mapEntrySize := 1 + len(k) + sovPcPreferences(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPcPreferences(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPcPreferences(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPcPreferences(x uint64) (n int) {
	return sovPcPreferences(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PCPreferences) String() string {
	if this == nil {
		return "nil"
	}
	keysForAbilityHotbars := make([]string, 0, len(this.AbilityHotbars))
	for k, _ := range this.AbilityHotbars {
		keysForAbilityHotbars = append(keysForAbilityHotbars, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAbilityHotbars)
	mapStringForAbilityHotbars := "map[string]github_com_elojah_game_03_pkg_ulid.ID{"
	for _, k := range keysForAbilityHotbars {
		mapStringForAbilityHotbars += fmt.Sprintf("%v: %v,", k, this.AbilityHotbars[k])
	}
	mapStringForAbilityHotbars += "}"
	s := strings.Join([]string{`&PCPreferences{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`PCID:` + fmt.Sprintf("%v", this.PCID) + `,`,
		`AbilityHotbars:` + mapStringForAbilityHotbars + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPcPreferences(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PCPreferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPcPreferences
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PCPreferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PCPreferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPcPreferences
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPcPreferences
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPcPreferences
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PCID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPcPreferences
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPcPreferences
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPcPreferences
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PCID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityHotbars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPcPreferences
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPcPreferences
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPcPreferences
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbilityHotbars == nil {
				m.AbilityHotbars = make(map[string]github_com_elojah_game_03_pkg_ulid.ID)
			}
			var mapkey string
			var mapvalue1 github_com_elojah_game_03_pkg_ulid.ID
			var mapvalue = &mapvalue1
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPcPreferences
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPcPreferences
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPcPreferences
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPcPreferences
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPcPreferences
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthPcPreferences
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthPcPreferences
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postbytesIndex]); err != nil {
						return err
					}
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPcPreferences(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPcPreferences
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AbilityHotbars[mapkey] = ((github_com_elojah_game_03_pkg_ulid.ID)(*mapvalue))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPcPreferences(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPcPreferences
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPcPreferences
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPcPreferences(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPcPreferences
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPcPreferences
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPcPreferences
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPcPreferences
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPcPreferences
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPcPreferences
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPcPreferences        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPcPreferences          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPcPreferences = fmt.Errorf("proto: unexpected end of group")
)
