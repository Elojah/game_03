/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/entity/spawn.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogo/protobuf/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace entity {
    export class Spawn extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            EntityID?: Uint8Array;
            SpawnID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("EntityID" in data && data.EntityID != undefined) {
                    this.EntityID = data.EntityID;
                }
                if ("SpawnID" in data && data.SpawnID != undefined) {
                    this.SpawnID = data.SpawnID;
                }
            }
        }
        get EntityID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set EntityID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get SpawnID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set SpawnID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            EntityID?: Uint8Array;
            SpawnID?: Uint8Array;
        }): Spawn {
            const message = new Spawn({});
            if (data.EntityID != null) {
                message.EntityID = data.EntityID;
            }
            if (data.SpawnID != null) {
                message.SpawnID = data.SpawnID;
            }
            return message;
        }
        toObject() {
            const data: {
                EntityID?: Uint8Array;
                SpawnID?: Uint8Array;
            } = {};
            if (this.EntityID != null) {
                data.EntityID = this.EntityID;
            }
            if (this.SpawnID != null) {
                data.SpawnID = this.SpawnID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.EntityID.length)
                writer.writeBytes(1, this.EntityID);
            if (this.SpawnID.length)
                writer.writeBytes(2, this.SpawnID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Spawn {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Spawn();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.EntityID = reader.readBytes();
                        break;
                    case 2:
                        message.SpawnID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Spawn {
            return Spawn.deserialize(bytes);
        }
    }
}
