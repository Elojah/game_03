/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/entity/entity.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogo/protobuf/gogoproto/gogo";
import * as dependency_2 from "./../geometry/geometry";
import * as dependency_3 from "./animation";
import * as pb_1 from "google-protobuf";
export namespace entity {
    export enum Stat {
        NoneStat = 0,
        Damage = 1,
        Defense = 2,
        MoveSpeed = 4,
        CastSpeed = 5,
        CooldownReduction = 6,
        HP = 7,
        MP = 8,
        MaxHP = 9,
        MaxMP = 10
    }
    export class Stats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Damage?: number;
            Defense?: number;
            MoveSpeed?: number;
            CastSpeed?: number;
            CooldownReduction?: number;
            HP?: number;
            MP?: number;
            MaxHP?: number;
            MaxMP?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Damage" in data && data.Damage != undefined) {
                    this.Damage = data.Damage;
                }
                if ("Defense" in data && data.Defense != undefined) {
                    this.Defense = data.Defense;
                }
                if ("MoveSpeed" in data && data.MoveSpeed != undefined) {
                    this.MoveSpeed = data.MoveSpeed;
                }
                if ("CastSpeed" in data && data.CastSpeed != undefined) {
                    this.CastSpeed = data.CastSpeed;
                }
                if ("CooldownReduction" in data && data.CooldownReduction != undefined) {
                    this.CooldownReduction = data.CooldownReduction;
                }
                if ("HP" in data && data.HP != undefined) {
                    this.HP = data.HP;
                }
                if ("MP" in data && data.MP != undefined) {
                    this.MP = data.MP;
                }
                if ("MaxHP" in data && data.MaxHP != undefined) {
                    this.MaxHP = data.MaxHP;
                }
                if ("MaxMP" in data && data.MaxMP != undefined) {
                    this.MaxMP = data.MaxMP;
                }
            }
        }
        get Damage() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set Damage(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Defense() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set Defense(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get MoveSpeed() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set MoveSpeed(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get CastSpeed() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set CastSpeed(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get CooldownReduction() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set CooldownReduction(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get HP() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set HP(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get MP() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set MP(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get MaxHP() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set MaxHP(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get MaxMP() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set MaxMP(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            Damage?: number;
            Defense?: number;
            MoveSpeed?: number;
            CastSpeed?: number;
            CooldownReduction?: number;
            HP?: number;
            MP?: number;
            MaxHP?: number;
            MaxMP?: number;
        }): Stats {
            const message = new Stats({});
            if (data.Damage != null) {
                message.Damage = data.Damage;
            }
            if (data.Defense != null) {
                message.Defense = data.Defense;
            }
            if (data.MoveSpeed != null) {
                message.MoveSpeed = data.MoveSpeed;
            }
            if (data.CastSpeed != null) {
                message.CastSpeed = data.CastSpeed;
            }
            if (data.CooldownReduction != null) {
                message.CooldownReduction = data.CooldownReduction;
            }
            if (data.HP != null) {
                message.HP = data.HP;
            }
            if (data.MP != null) {
                message.MP = data.MP;
            }
            if (data.MaxHP != null) {
                message.MaxHP = data.MaxHP;
            }
            if (data.MaxMP != null) {
                message.MaxMP = data.MaxMP;
            }
            return message;
        }
        toObject() {
            const data: {
                Damage?: number;
                Defense?: number;
                MoveSpeed?: number;
                CastSpeed?: number;
                CooldownReduction?: number;
                HP?: number;
                MP?: number;
                MaxHP?: number;
                MaxMP?: number;
            } = {};
            if (this.Damage != null) {
                data.Damage = this.Damage;
            }
            if (this.Defense != null) {
                data.Defense = this.Defense;
            }
            if (this.MoveSpeed != null) {
                data.MoveSpeed = this.MoveSpeed;
            }
            if (this.CastSpeed != null) {
                data.CastSpeed = this.CastSpeed;
            }
            if (this.CooldownReduction != null) {
                data.CooldownReduction = this.CooldownReduction;
            }
            if (this.HP != null) {
                data.HP = this.HP;
            }
            if (this.MP != null) {
                data.MP = this.MP;
            }
            if (this.MaxHP != null) {
                data.MaxHP = this.MaxHP;
            }
            if (this.MaxMP != null) {
                data.MaxMP = this.MaxMP;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Damage != 0)
                writer.writeInt64(1, this.Damage);
            if (this.Defense != 0)
                writer.writeInt64(2, this.Defense);
            if (this.MoveSpeed != 0)
                writer.writeInt64(3, this.MoveSpeed);
            if (this.CastSpeed != 0)
                writer.writeInt64(4, this.CastSpeed);
            if (this.CooldownReduction != 0)
                writer.writeInt64(5, this.CooldownReduction);
            if (this.HP != 0)
                writer.writeInt64(6, this.HP);
            if (this.MP != 0)
                writer.writeInt64(7, this.MP);
            if (this.MaxHP != 0)
                writer.writeInt64(8, this.MaxHP);
            if (this.MaxMP != 0)
                writer.writeInt64(9, this.MaxMP);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Stats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Stats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Damage = reader.readInt64();
                        break;
                    case 2:
                        message.Defense = reader.readInt64();
                        break;
                    case 3:
                        message.MoveSpeed = reader.readInt64();
                        break;
                    case 4:
                        message.CastSpeed = reader.readInt64();
                        break;
                    case 5:
                        message.CooldownReduction = reader.readInt64();
                        break;
                    case 6:
                        message.HP = reader.readInt64();
                        break;
                    case 7:
                        message.MP = reader.readInt64();
                        break;
                    case 8:
                        message.MaxHP = reader.readInt64();
                        break;
                    case 9:
                        message.MaxMP = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Stats {
            return Stats.deserialize(bytes);
        }
    }
    export class E extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            UserID?: Uint8Array;
            CellID?: Uint8Array;
            FactionID?: Uint8Array;
            Name?: string;
            X?: number;
            Y?: number;
            Rot?: number;
            Radius?: number;
            At?: number;
            AnimationID?: Uint8Array;
            AnimationAt?: number;
            Objects?: dependency_2.geometry.Rect[];
            Stats?: Stats;
            Effects?: Map<string, number>;
            Abilities?: Map<string, dependency_3.entity.AnimationAbility>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("UserID" in data && data.UserID != undefined) {
                    this.UserID = data.UserID;
                }
                if ("CellID" in data && data.CellID != undefined) {
                    this.CellID = data.CellID;
                }
                if ("FactionID" in data && data.FactionID != undefined) {
                    this.FactionID = data.FactionID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("X" in data && data.X != undefined) {
                    this.X = data.X;
                }
                if ("Y" in data && data.Y != undefined) {
                    this.Y = data.Y;
                }
                if ("Rot" in data && data.Rot != undefined) {
                    this.Rot = data.Rot;
                }
                if ("Radius" in data && data.Radius != undefined) {
                    this.Radius = data.Radius;
                }
                if ("At" in data && data.At != undefined) {
                    this.At = data.At;
                }
                if ("AnimationID" in data && data.AnimationID != undefined) {
                    this.AnimationID = data.AnimationID;
                }
                if ("AnimationAt" in data && data.AnimationAt != undefined) {
                    this.AnimationAt = data.AnimationAt;
                }
                if ("Objects" in data && data.Objects != undefined) {
                    this.Objects = data.Objects;
                }
                if ("Stats" in data && data.Stats != undefined) {
                    this.Stats = data.Stats;
                }
                if ("Effects" in data && data.Effects != undefined) {
                    this.Effects = data.Effects;
                }
                if ("Abilities" in data && data.Abilities != undefined) {
                    this.Abilities = data.Abilities;
                }
            }
            if (!this.Effects)
                this.Effects = new Map();
            if (!this.Abilities)
                this.Abilities = new Map();
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get UserID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set UserID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get CellID() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set CellID(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get FactionID() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set FactionID(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get Name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get X() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set X(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get Y() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set Y(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get Rot() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set Rot(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get Radius() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set Radius(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get At() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set At(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get AnimationID() {
            return pb_1.Message.getFieldWithDefault(this, 11, new Uint8Array(0)) as Uint8Array;
        }
        set AnimationID(value: Uint8Array) {
            pb_1.Message.setField(this, 11, value);
        }
        get AnimationAt() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set AnimationAt(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get Objects() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.geometry.Rect, 13) as dependency_2.geometry.Rect[];
        }
        set Objects(value: dependency_2.geometry.Rect[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get Stats() {
            return pb_1.Message.getWrapperField(this, Stats, 14) as Stats;
        }
        set Stats(value: Stats) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_Stats() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get Effects() {
            return pb_1.Message.getField(this, 15) as any as Map<string, number>;
        }
        set Effects(value: Map<string, number>) {
            pb_1.Message.setField(this, 15, value as any);
        }
        get Abilities() {
            return pb_1.Message.getField(this, 16) as any as Map<string, dependency_3.entity.AnimationAbility>;
        }
        set Abilities(value: Map<string, dependency_3.entity.AnimationAbility>) {
            pb_1.Message.setField(this, 16, value as any);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            UserID?: Uint8Array;
            CellID?: Uint8Array;
            FactionID?: Uint8Array;
            Name?: string;
            X?: number;
            Y?: number;
            Rot?: number;
            Radius?: number;
            At?: number;
            AnimationID?: Uint8Array;
            AnimationAt?: number;
            Objects?: ReturnType<typeof dependency_2.geometry.Rect.prototype.toObject>[];
            Stats?: ReturnType<typeof Stats.prototype.toObject>;
            Effects?: {
                [key: string]: number;
            };
            Abilities?: {
                [key: string]: ReturnType<typeof dependency_3.entity.AnimationAbility.prototype.toObject>;
            };
        }): E {
            const message = new E({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.UserID != null) {
                message.UserID = data.UserID;
            }
            if (data.CellID != null) {
                message.CellID = data.CellID;
            }
            if (data.FactionID != null) {
                message.FactionID = data.FactionID;
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.X != null) {
                message.X = data.X;
            }
            if (data.Y != null) {
                message.Y = data.Y;
            }
            if (data.Rot != null) {
                message.Rot = data.Rot;
            }
            if (data.Radius != null) {
                message.Radius = data.Radius;
            }
            if (data.At != null) {
                message.At = data.At;
            }
            if (data.AnimationID != null) {
                message.AnimationID = data.AnimationID;
            }
            if (data.AnimationAt != null) {
                message.AnimationAt = data.AnimationAt;
            }
            if (data.Objects != null) {
                message.Objects = data.Objects.map(item => dependency_2.geometry.Rect.fromObject(item));
            }
            if (data.Stats != null) {
                message.Stats = Stats.fromObject(data.Stats);
            }
            if (typeof data.Effects == "object") {
                message.Effects = new Map(Object.entries(data.Effects));
            }
            if (typeof data.Abilities == "object") {
                message.Abilities = new Map(Object.entries(data.Abilities).map(([key, value]) => [key, dependency_3.entity.AnimationAbility.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                UserID?: Uint8Array;
                CellID?: Uint8Array;
                FactionID?: Uint8Array;
                Name?: string;
                X?: number;
                Y?: number;
                Rot?: number;
                Radius?: number;
                At?: number;
                AnimationID?: Uint8Array;
                AnimationAt?: number;
                Objects?: ReturnType<typeof dependency_2.geometry.Rect.prototype.toObject>[];
                Stats?: ReturnType<typeof Stats.prototype.toObject>;
                Effects?: {
                    [key: string]: number;
                };
                Abilities?: {
                    [key: string]: ReturnType<typeof dependency_3.entity.AnimationAbility.prototype.toObject>;
                };
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.UserID != null) {
                data.UserID = this.UserID;
            }
            if (this.CellID != null) {
                data.CellID = this.CellID;
            }
            if (this.FactionID != null) {
                data.FactionID = this.FactionID;
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.X != null) {
                data.X = this.X;
            }
            if (this.Y != null) {
                data.Y = this.Y;
            }
            if (this.Rot != null) {
                data.Rot = this.Rot;
            }
            if (this.Radius != null) {
                data.Radius = this.Radius;
            }
            if (this.At != null) {
                data.At = this.At;
            }
            if (this.AnimationID != null) {
                data.AnimationID = this.AnimationID;
            }
            if (this.AnimationAt != null) {
                data.AnimationAt = this.AnimationAt;
            }
            if (this.Objects != null) {
                data.Objects = this.Objects.map((item: dependency_2.geometry.Rect) => item.toObject());
            }
            if (this.Stats != null) {
                data.Stats = this.Stats.toObject();
            }
            if (this.Effects != null) {
                data.Effects = (Object.fromEntries)(this.Effects);
            }
            if (this.Abilities != null) {
                data.Abilities = (Object.fromEntries)((Array.from)(this.Abilities).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.UserID.length)
                writer.writeBytes(2, this.UserID);
            if (this.CellID.length)
                writer.writeBytes(3, this.CellID);
            if (this.FactionID.length)
                writer.writeBytes(4, this.FactionID);
            if (this.Name.length)
                writer.writeString(5, this.Name);
            if (this.X != 0)
                writer.writeInt64(6, this.X);
            if (this.Y != 0)
                writer.writeInt64(7, this.Y);
            if (this.Rot != 0)
                writer.writeInt32(8, this.Rot);
            if (this.Radius != 0)
                writer.writeInt32(9, this.Radius);
            if (this.At != 0)
                writer.writeInt64(10, this.At);
            if (this.AnimationID.length)
                writer.writeBytes(11, this.AnimationID);
            if (this.AnimationAt != 0)
                writer.writeInt64(12, this.AnimationAt);
            if (this.Objects.length)
                writer.writeRepeatedMessage(13, this.Objects, (item: dependency_2.geometry.Rect) => item.serialize(writer));
            if (this.has_Stats)
                writer.writeMessage(14, this.Stats, () => this.Stats.serialize(writer));
            for (const [key, value] of this.Effects) {
                writer.writeMessage(15, this.Effects, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            for (const [key, value] of this.Abilities) {
                writer.writeMessage(16, this.Abilities, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): E {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new E();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        message.UserID = reader.readBytes();
                        break;
                    case 3:
                        message.CellID = reader.readBytes();
                        break;
                    case 4:
                        message.FactionID = reader.readBytes();
                        break;
                    case 5:
                        message.Name = reader.readString();
                        break;
                    case 6:
                        message.X = reader.readInt64();
                        break;
                    case 7:
                        message.Y = reader.readInt64();
                        break;
                    case 8:
                        message.Rot = reader.readInt32();
                        break;
                    case 9:
                        message.Radius = reader.readInt32();
                        break;
                    case 10:
                        message.At = reader.readInt64();
                        break;
                    case 11:
                        message.AnimationID = reader.readBytes();
                        break;
                    case 12:
                        message.AnimationAt = reader.readInt64();
                        break;
                    case 13:
                        reader.readMessage(message.Objects, () => pb_1.Message.addToRepeatedWrapperField(message, 13, dependency_2.geometry.Rect.deserialize(reader), dependency_2.geometry.Rect));
                        break;
                    case 14:
                        reader.readMessage(message.Stats, () => message.Stats = Stats.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.Effects as any, reader, reader.readString, reader.readInt64));
                        break;
                    case 16:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.Abilities as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_3.entity.AnimationAbility.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): E {
            return E.deserialize(bytes);
        }
    }
}
