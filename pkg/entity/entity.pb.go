// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/pkg/entity/entity.proto

package entity

import (
	fmt "fmt"
	geometry "github.com/elojah/game_03/pkg/geometry"
	github_com_elojah_game_03_pkg_ulid "github.com/elojah/game_03/pkg/ulid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Stat int32

const (
	NoneStat          Stat = 0
	Damage            Stat = 1
	Defense           Stat = 2
	MoveSpeed         Stat = 4
	CastSpeed         Stat = 5
	CooldownReduction Stat = 6
	HP                Stat = 7
	MP                Stat = 8
	MaxHP             Stat = 9
	MaxMP             Stat = 10
)

var Stat_name = map[int32]string{
	0:  "NoneStat",
	1:  "Damage",
	2:  "Defense",
	4:  "MoveSpeed",
	5:  "CastSpeed",
	6:  "CooldownReduction",
	7:  "HP",
	8:  "MP",
	9:  "MaxHP",
	10: "MaxMP",
}

var Stat_value = map[string]int32{
	"NoneStat":          0,
	"Damage":            1,
	"Defense":           2,
	"MoveSpeed":         4,
	"CastSpeed":         5,
	"CooldownReduction": 6,
	"HP":                7,
	"MP":                8,
	"MaxHP":             9,
	"MaxMP":             10,
}

func (Stat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e2701362edd4c296, []int{0}
}

type Stats struct {
	Damage            int64 `protobuf:"varint,1,opt,name=Damage,proto3" json:"Damage,omitempty"`
	Defense           int64 `protobuf:"varint,2,opt,name=Defense,proto3" json:"Defense,omitempty"`
	MoveSpeed         int64 `protobuf:"varint,3,opt,name=MoveSpeed,proto3" json:"MoveSpeed,omitempty"`
	CastSpeed         int64 `protobuf:"varint,4,opt,name=CastSpeed,proto3" json:"CastSpeed,omitempty"`
	CooldownReduction int64 `protobuf:"varint,5,opt,name=CooldownReduction,proto3" json:"CooldownReduction,omitempty"`
	HP                int64 `protobuf:"varint,6,opt,name=HP,proto3" json:"HP,omitempty"`
	MP                int64 `protobuf:"varint,7,opt,name=MP,proto3" json:"MP,omitempty"`
	MaxHP             int64 `protobuf:"varint,8,opt,name=MaxHP,proto3" json:"MaxHP,omitempty"`
	MaxMP             int64 `protobuf:"varint,9,opt,name=MaxMP,proto3" json:"MaxMP,omitempty"`
}

func (m *Stats) Reset()      { *m = Stats{} }
func (*Stats) ProtoMessage() {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2701362edd4c296, []int{0}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return m.Size()
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

type E struct {
	ID          github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"ID"`
	UserID      github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,2,opt,name=UserID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"UserID"`
	CellID      github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,3,opt,name=CellID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"CellID"`
	FactionID   github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,4,opt,name=FactionID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"FactionID"`
	Name        string                                `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	X           int64                                 `protobuf:"varint,6,opt,name=X,proto3" json:"X,omitempty"`
	Y           int64                                 `protobuf:"varint,7,opt,name=Y,proto3" json:"Y,omitempty"`
	Rot         int32                                 `protobuf:"varint,8,opt,name=Rot,proto3" json:"Rot,omitempty"`
	Radius      int32                                 `protobuf:"varint,9,opt,name=Radius,proto3" json:"Radius,omitempty"`
	At          int64                                 `protobuf:"varint,10,opt,name=At,proto3" json:"At,omitempty"`
	AnimationID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,11,opt,name=AnimationID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"AnimationID"`
	AnimationAt int64                                 `protobuf:"varint,12,opt,name=AnimationAt,proto3" json:"AnimationAt,omitempty"`
	Objects     []geometry.Rect                       `protobuf:"bytes,13,rep,name=Objects,proto3" json:"Objects"`
	Stats       Stats                                 `protobuf:"bytes,14,opt,name=Stats,proto3" json:"Stats"`
	Effects     map[string]int64                      `protobuf:"bytes,15,rep,name=Effects,proto3" json:"Effects" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Abilities   map[string]AnimationAbility           `protobuf:"bytes,16,rep,name=Abilities,proto3" json:"Abilities" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *E) Reset()      { *m = E{} }
func (*E) ProtoMessage() {}
func (*E) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2701362edd4c296, []int{1}
}
func (m *E) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E.Merge(m, src)
}
func (m *E) XXX_Size() int {
	return m.Size()
}
func (m *E) XXX_DiscardUnknown() {
	xxx_messageInfo_E.DiscardUnknown(m)
}

var xxx_messageInfo_E proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("entity.Stat", Stat_name, Stat_value)
	golang_proto.RegisterEnum("entity.Stat", Stat_name, Stat_value)
	proto.RegisterType((*Stats)(nil), "entity.Stats")
	golang_proto.RegisterType((*Stats)(nil), "entity.Stats")
	proto.RegisterType((*E)(nil), "entity.E")
	golang_proto.RegisterType((*E)(nil), "entity.E")
	proto.RegisterMapType((map[string]AnimationAbility)(nil), "entity.E.AbilitiesEntry")
	golang_proto.RegisterMapType((map[string]AnimationAbility)(nil), "entity.E.AbilitiesEntry")
	proto.RegisterMapType((map[string]int64)(nil), "entity.E.EffectsEntry")
	golang_proto.RegisterMapType((map[string]int64)(nil), "entity.E.EffectsEntry")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_03/pkg/entity/entity.proto", fileDescriptor_e2701362edd4c296)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/pkg/entity/entity.proto", fileDescriptor_e2701362edd4c296)
}

var fileDescriptor_e2701362edd4c296 = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0xf5, 0xe4, 0xc3, 0xa9, 0x27, 0x69, 0x9e, 0xdf, 0xe8, 0xbd, 0x6a, 0x14, 0xa1, 0x69, 0x54,
	0x09, 0xa9, 0x20, 0xea, 0x40, 0x0b, 0x08, 0x55, 0xb0, 0x48, 0xeb, 0xa0, 0x44, 0xc8, 0xad, 0xe5,
	0x0a, 0xd4, 0xae, 0x90, 0x93, 0x4c, 0x52, 0xb7, 0x49, 0x5c, 0x25, 0x93, 0x42, 0x76, 0x2c, 0x59,
	0xf2, 0x33, 0xf8, 0x09, 0x2c, 0xbb, 0xec, 0xb2, 0xcb, 0x8a, 0x45, 0x21, 0xce, 0x86, 0x1d, 0x5d,
	0xb2, 0x44, 0x33, 0x9e, 0x38, 0x46, 0x54, 0x15, 0x65, 0xe5, 0x7b, 0xee, 0x9d, 0x73, 0x66, 0x7c,
	0x66, 0xee, 0x85, 0x0f, 0xda, 0x1e, 0xdb, 0x1f, 0xd6, 0x8d, 0x86, 0xdf, 0x2d, 0xd1, 0x8e, 0x7f,
	0xe0, 0xee, 0x97, 0xda, 0x6e, 0x97, 0xbe, 0xbe, 0xbf, 0x56, 0x3a, 0x3a, 0x6c, 0x97, 0x68, 0x8f,
	0x79, 0x6c, 0x24, 0x3f, 0xc6, 0x51, 0xdf, 0x67, 0x3e, 0x52, 0x43, 0x54, 0x58, 0x89, 0x51, 0xdb,
	0x7e, 0xdb, 0x2f, 0x89, 0x72, 0x7d, 0xd8, 0x12, 0x48, 0x00, 0x11, 0x85, 0xb4, 0xc2, 0xa3, 0xeb,
	0x77, 0x6a, 0x53, 0xbf, 0x4b, 0x59, 0x7f, 0x14, 0x05, 0x92, 0xf6, 0xf0, 0x8f, 0x0e, 0xe8, 0xf6,
	0xbc, 0xae, 0xcb, 0x3c, 0xbf, 0x17, 0xb2, 0x96, 0xbe, 0x03, 0x98, 0xde, 0x61, 0x2e, 0x1b, 0xa0,
	0x05, 0xa8, 0x9a, 0x6e, 0xd7, 0x6d, 0x53, 0x0c, 0x8a, 0x60, 0x39, 0xe9, 0x48, 0x84, 0x30, 0xcc,
	0x98, 0xb4, 0x45, 0x7b, 0x03, 0x8a, 0x13, 0xa2, 0x30, 0x85, 0xe8, 0x16, 0xd4, 0x2c, 0xff, 0x98,
	0xee, 0x1c, 0x51, 0xda, 0xc4, 0x49, 0x51, 0x9b, 0x25, 0x78, 0x75, 0xd3, 0x1d, 0xb0, 0xb0, 0x9a,
	0x0a, 0xab, 0x51, 0x02, 0xdd, 0x83, 0xff, 0x6e, 0xfa, 0x7e, 0xa7, 0xe9, 0xbf, 0xe9, 0x39, 0xb4,
	0x39, 0x6c, 0xf0, 0x23, 0xe1, 0xb4, 0x58, 0xf5, 0x7b, 0x01, 0xe5, 0x61, 0xa2, 0x6a, 0x63, 0x55,
	0x94, 0x13, 0x55, 0x9b, 0x63, 0xcb, 0xc6, 0x99, 0x10, 0x5b, 0x36, 0xfa, 0x0f, 0xa6, 0x2d, 0xf7,
	0x6d, 0xd5, 0xc6, 0x73, 0x22, 0x15, 0x02, 0x99, 0xb5, 0x6c, 0xac, 0x45, 0x59, 0xcb, 0x5e, 0xfa,
	0xa2, 0x42, 0x50, 0x41, 0xcf, 0x60, 0xa2, 0x66, 0x8a, 0x3f, 0xcd, 0x6d, 0xac, 0x9c, 0x5e, 0x2c,
	0x2a, 0x9f, 0x2f, 0x16, 0x6f, 0x5f, 0xef, 0xe0, 0xb0, 0xe3, 0x35, 0x8d, 0x9a, 0xe9, 0x24, 0x6a,
	0x26, 0xaa, 0x40, 0xf5, 0xe5, 0x80, 0xf6, 0x6b, 0xa6, 0xf0, 0xe4, 0xc6, 0x12, 0x92, 0xcc, 0x65,
	0x36, 0x69, 0xa7, 0x53, 0x33, 0x85, 0x7d, 0x37, 0x97, 0x09, 0xc9, 0xe8, 0x05, 0xd4, 0x9e, 0xbb,
	0xc2, 0xa9, 0x9a, 0x29, 0xac, 0xbe, 0xb1, 0xd2, 0x8c, 0x8f, 0x10, 0x4c, 0x6d, 0xb9, 0x5d, 0x2a,
	0x2e, 0x43, 0x73, 0x44, 0x8c, 0x72, 0x10, 0xec, 0x4a, 0xfb, 0xc1, 0x2e, 0x47, 0x7b, 0xd2, 0x7c,
	0xb0, 0x87, 0x74, 0x98, 0x74, 0x7c, 0x26, 0x9c, 0x4f, 0x3b, 0x3c, 0xe4, 0x2f, 0xc9, 0x71, 0x9b,
	0xde, 0x70, 0x20, 0x8c, 0x4f, 0x3b, 0x12, 0xf1, 0x5b, 0x2b, 0x33, 0x0c, 0xc3, 0x5b, 0x2b, 0x33,
	0xb4, 0x0d, 0xb3, 0xe5, 0xe9, 0x73, 0xac, 0x99, 0x38, 0xfb, 0x37, 0x07, 0x8f, 0x2b, 0xa0, 0x62,
	0x4c, 0xb0, 0xcc, 0x70, 0x4e, 0xec, 0x14, 0x4f, 0x21, 0x03, 0x66, 0xb6, 0xeb, 0x07, 0xb4, 0xc1,
	0x06, 0x78, 0xbe, 0x98, 0x5c, 0xce, 0xae, 0xe6, 0x8d, 0xa8, 0x8d, 0x1c, 0xda, 0x60, 0x1b, 0x29,
	0xbe, 0xbd, 0x33, 0x5d, 0x84, 0xee, 0xc8, 0xee, 0xc0, 0xf9, 0x22, 0x58, 0xce, 0xae, 0xce, 0x1b,
	0xb2, 0xc1, 0x45, 0x52, 0x2e, 0x96, 0xfd, 0xf3, 0x18, 0x66, 0x2a, 0xad, 0x96, 0x90, 0xfe, 0x47,
	0x48, 0x2f, 0x4c, 0x17, 0x57, 0x0c, 0x59, 0xa8, 0xf4, 0x58, 0x7f, 0x34, 0xdd, 0x42, 0xe6, 0xd0,
	0x53, 0xa8, 0x95, 0xeb, 0x5e, 0xc7, 0x63, 0x1e, 0x1d, 0x60, 0x5d, 0x30, 0xf1, 0x8c, 0x19, 0x95,
	0xe2, 0xdc, 0x19, 0xa1, 0xb0, 0x0e, 0x73, 0x71, 0x71, 0x7e, 0x1b, 0x87, 0x74, 0x24, 0x1e, 0xb6,
	0xe6, 0xf0, 0x90, 0x77, 0xc1, 0xb1, 0xdb, 0x19, 0x4e, 0xbb, 0x37, 0x04, 0xeb, 0x89, 0x27, 0xa0,
	0xf0, 0x0a, 0xe6, 0x7f, 0x95, 0xbf, 0x82, 0x6d, 0xc4, 0xd9, 0xb1, 0x93, 0xcd, 0x4c, 0x15, 0x0a,
	0xa3, 0x98, 0xee, 0xdd, 0xf7, 0x00, 0xa6, 0xb8, 0x27, 0x28, 0x07, 0xe7, 0xb6, 0xfc, 0x1e, 0xe5,
	0xb1, 0xae, 0x20, 0x38, 0x1d, 0x30, 0x3a, 0x40, 0xd9, 0x68, 0xa8, 0xe8, 0x09, 0x34, 0x1f, 0x9b,
	0x23, 0x7a, 0x8a, 0xc3, 0x68, 0x4e, 0xe8, 0x69, 0xf4, 0xff, 0x15, 0x93, 0x42, 0x57, 0x91, 0xca,
	0x47, 0x82, 0x9e, 0xe1, 0x5f, 0xcb, 0xd6, 0xe7, 0x90, 0x26, 0x47, 0x80, 0xae, 0xc9, 0xd0, 0xb2,
	0x75, 0xb8, 0x51, 0x3d, 0x1d, 0x13, 0xe5, 0x6c, 0x4c, 0x94, 0xf3, 0x31, 0x51, 0x2e, 0xc7, 0x04,
	0xfc, 0x18, 0x13, 0xf0, 0x2e, 0x20, 0xe0, 0x63, 0x40, 0xc0, 0xa7, 0x80, 0x80, 0x93, 0x80, 0x80,
	0xd3, 0x80, 0x80, 0xb3, 0x80, 0x80, 0xaf, 0x01, 0x01, 0xdf, 0x02, 0xa2, 0x5c, 0x06, 0x04, 0x7c,
	0x98, 0x10, 0xe5, 0x64, 0x42, 0xc0, 0xd9, 0x84, 0x28, 0xe7, 0x13, 0xa2, 0xd4, 0x55, 0x31, 0x2f,
	0xd7, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x01, 0x09, 0x84, 0x08, 0x06, 0x00, 0x00,
}

func (x Stat) String() string {
	s, ok := Stat_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Stats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats)
	if !ok {
		that2, ok := that.(Stats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	if this.Defense != that1.Defense {
		return false
	}
	if this.MoveSpeed != that1.MoveSpeed {
		return false
	}
	if this.CastSpeed != that1.CastSpeed {
		return false
	}
	if this.CooldownReduction != that1.CooldownReduction {
		return false
	}
	if this.HP != that1.HP {
		return false
	}
	if this.MP != that1.MP {
		return false
	}
	if this.MaxHP != that1.MaxHP {
		return false
	}
	if this.MaxMP != that1.MaxMP {
		return false
	}
	return true
}
func (this *E) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*E)
	if !ok {
		that2, ok := that.(E)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.UserID.Equal(that1.UserID) {
		return false
	}
	if !this.CellID.Equal(that1.CellID) {
		return false
	}
	if !this.FactionID.Equal(that1.FactionID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	if this.Rot != that1.Rot {
		return false
	}
	if this.Radius != that1.Radius {
		return false
	}
	if this.At != that1.At {
		return false
	}
	if !this.AnimationID.Equal(that1.AnimationID) {
		return false
	}
	if this.AnimationAt != that1.AnimationAt {
		return false
	}
	if len(this.Objects) != len(that1.Objects) {
		return false
	}
	for i := range this.Objects {
		if !this.Objects[i].Equal(&that1.Objects[i]) {
			return false
		}
	}
	if !this.Stats.Equal(&that1.Stats) {
		return false
	}
	if len(this.Effects) != len(that1.Effects) {
		return false
	}
	for i := range this.Effects {
		if this.Effects[i] != that1.Effects[i] {
			return false
		}
	}
	if len(this.Abilities) != len(that1.Abilities) {
		return false
	}
	for i := range this.Abilities {
		a := this.Abilities[i]
		b := that1.Abilities[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *Stats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&entity.Stats{")
	s = append(s, "Damage: "+fmt.Sprintf("%#v", this.Damage)+",\n")
	s = append(s, "Defense: "+fmt.Sprintf("%#v", this.Defense)+",\n")
	s = append(s, "MoveSpeed: "+fmt.Sprintf("%#v", this.MoveSpeed)+",\n")
	s = append(s, "CastSpeed: "+fmt.Sprintf("%#v", this.CastSpeed)+",\n")
	s = append(s, "CooldownReduction: "+fmt.Sprintf("%#v", this.CooldownReduction)+",\n")
	s = append(s, "HP: "+fmt.Sprintf("%#v", this.HP)+",\n")
	s = append(s, "MP: "+fmt.Sprintf("%#v", this.MP)+",\n")
	s = append(s, "MaxHP: "+fmt.Sprintf("%#v", this.MaxHP)+",\n")
	s = append(s, "MaxMP: "+fmt.Sprintf("%#v", this.MaxMP)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *E) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&entity.E{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "CellID: "+fmt.Sprintf("%#v", this.CellID)+",\n")
	s = append(s, "FactionID: "+fmt.Sprintf("%#v", this.FactionID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "Rot: "+fmt.Sprintf("%#v", this.Rot)+",\n")
	s = append(s, "Radius: "+fmt.Sprintf("%#v", this.Radius)+",\n")
	s = append(s, "At: "+fmt.Sprintf("%#v", this.At)+",\n")
	s = append(s, "AnimationID: "+fmt.Sprintf("%#v", this.AnimationID)+",\n")
	s = append(s, "AnimationAt: "+fmt.Sprintf("%#v", this.AnimationAt)+",\n")
	if this.Objects != nil {
		vs := make([]geometry.Rect, len(this.Objects))
		for i := range vs {
			vs[i] = this.Objects[i]
		}
		s = append(s, "Objects: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "Stats: "+strings.Replace(this.Stats.GoString(), `&`, ``, 1)+",\n")
	keysForEffects := make([]string, 0, len(this.Effects))
	for k, _ := range this.Effects {
		keysForEffects = append(keysForEffects, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffects)
	mapStringForEffects := "map[string]int64{"
	for _, k := range keysForEffects {
		mapStringForEffects += fmt.Sprintf("%#v: %#v,", k, this.Effects[k])
	}
	mapStringForEffects += "}"
	if this.Effects != nil {
		s = append(s, "Effects: "+mapStringForEffects+",\n")
	}
	keysForAbilities := make([]string, 0, len(this.Abilities))
	for k, _ := range this.Abilities {
		keysForAbilities = append(keysForAbilities, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAbilities)
	mapStringForAbilities := "map[string]AnimationAbility{"
	for _, k := range keysForAbilities {
		mapStringForAbilities += fmt.Sprintf("%#v: %#v,", k, this.Abilities[k])
	}
	mapStringForAbilities += "}"
	if this.Abilities != nil {
		s = append(s, "Abilities: "+mapStringForAbilities+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEntity(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxMP != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.MaxMP))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxHP != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.MaxHP))
		i--
		dAtA[i] = 0x40
	}
	if m.MP != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.MP))
		i--
		dAtA[i] = 0x38
	}
	if m.HP != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.HP))
		i--
		dAtA[i] = 0x30
	}
	if m.CooldownReduction != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.CooldownReduction))
		i--
		dAtA[i] = 0x28
	}
	if m.CastSpeed != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.CastSpeed))
		i--
		dAtA[i] = 0x20
	}
	if m.MoveSpeed != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.MoveSpeed))
		i--
		dAtA[i] = 0x18
	}
	if m.Defense != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Defense))
		i--
		dAtA[i] = 0x10
	}
	if m.Damage != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Abilities) > 0 {
		for k := range m.Abilities {
			v := m.Abilities[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintEntity(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEntity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.Effects) > 0 {
		for k := range m.Effects {
			v := m.Effects[k]
			baseI := i
			i = encodeVarintEntity(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintEntity(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEntity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x7a
		}
	}
	{
		size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.AnimationAt != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.AnimationAt))
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.AnimationID.Size()
		i -= size
		if _, err := m.AnimationID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.At != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.At))
		i--
		dAtA[i] = 0x50
	}
	if m.Radius != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Radius))
		i--
		dAtA[i] = 0x48
	}
	if m.Rot != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Rot))
		i--
		dAtA[i] = 0x40
	}
	if m.Y != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x38
	}
	if m.X != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.FactionID.Size()
		i -= size
		if _, err := m.FactionID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CellID.Size()
		i -= size
		if _, err := m.CellID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.UserID.Size()
		i -= size
		if _, err := m.UserID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEntity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEntity(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedStats(r randyEntity, easy bool) *Stats {
	this := &Stats{}
	this.Damage = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Damage *= -1
	}
	this.Defense = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Defense *= -1
	}
	this.MoveSpeed = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MoveSpeed *= -1
	}
	this.CastSpeed = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CastSpeed *= -1
	}
	this.CooldownReduction = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CooldownReduction *= -1
	}
	this.HP = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.HP *= -1
	}
	this.MP = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MP *= -1
	}
	this.MaxHP = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MaxHP *= -1
	}
	this.MaxMP = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MaxMP *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedE(r randyEntity, easy bool) *E {
	this := &E{}
	v1 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.ID = *v1
	v2 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.UserID = *v2
	v3 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.CellID = *v3
	v4 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.FactionID = *v4
	this.Name = string(randStringEntity(r))
	this.X = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.X *= -1
	}
	this.Y = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Y *= -1
	}
	this.Rot = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Rot *= -1
	}
	this.Radius = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Radius *= -1
	}
	this.At = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.At *= -1
	}
	v5 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.AnimationID = *v5
	this.AnimationAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AnimationAt *= -1
	}
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.Objects = make([]geometry.Rect, v6)
		for i := 0; i < v6; i++ {
			v7 := geometry.NewPopulatedRect(r, easy)
			this.Objects[i] = *v7
		}
	}
	v8 := NewPopulatedStats(r, easy)
	this.Stats = *v8
	if r.Intn(5) != 0 {
		v9 := r.Intn(10)
		this.Effects = make(map[string]int64)
		for i := 0; i < v9; i++ {
			v10 := randStringEntity(r)
			this.Effects[v10] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Effects[v10] *= -1
			}
		}
	}
	if r.Intn(5) != 0 {
		v11 := r.Intn(10)
		this.Abilities = make(map[string]AnimationAbility)
		for i := 0; i < v11; i++ {
			this.Abilities[randStringEntity(r)] = *NewPopulatedAnimationAbility(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyEntity interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEntity(r randyEntity) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEntity(r randyEntity) string {
	v12 := r.Intn(100)
	tmps := make([]rune, v12)
	for i := 0; i < v12; i++ {
		tmps[i] = randUTF8RuneEntity(r)
	}
	return string(tmps)
}
func randUnrecognizedEntity(r randyEntity, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEntity(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEntity(dAtA []byte, r randyEntity, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(v13))
	case 1:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEntity(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Stats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Damage != 0 {
		n += 1 + sovEntity(uint64(m.Damage))
	}
	if m.Defense != 0 {
		n += 1 + sovEntity(uint64(m.Defense))
	}
	if m.MoveSpeed != 0 {
		n += 1 + sovEntity(uint64(m.MoveSpeed))
	}
	if m.CastSpeed != 0 {
		n += 1 + sovEntity(uint64(m.CastSpeed))
	}
	if m.CooldownReduction != 0 {
		n += 1 + sovEntity(uint64(m.CooldownReduction))
	}
	if m.HP != 0 {
		n += 1 + sovEntity(uint64(m.HP))
	}
	if m.MP != 0 {
		n += 1 + sovEntity(uint64(m.MP))
	}
	if m.MaxHP != 0 {
		n += 1 + sovEntity(uint64(m.MaxHP))
	}
	if m.MaxMP != 0 {
		n += 1 + sovEntity(uint64(m.MaxMP))
	}
	return n
}

func (m *E) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = m.UserID.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = m.CellID.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = m.FactionID.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.X != 0 {
		n += 1 + sovEntity(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovEntity(uint64(m.Y))
	}
	if m.Rot != 0 {
		n += 1 + sovEntity(uint64(m.Rot))
	}
	if m.Radius != 0 {
		n += 1 + sovEntity(uint64(m.Radius))
	}
	if m.At != 0 {
		n += 1 + sovEntity(uint64(m.At))
	}
	l = m.AnimationID.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.AnimationAt != 0 {
		n += 1 + sovEntity(uint64(m.AnimationAt))
	}
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	l = m.Stats.Size()
	n += 1 + l + sovEntity(uint64(l))
	if len(m.Effects) > 0 {
		for k, v := range m.Effects {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEntity(uint64(len(k))) + 1 + sovEntity(uint64(v))
			n += mapEntrySize + 1 + sovEntity(uint64(mapEntrySize))
		}
	}
	if len(m.Abilities) > 0 {
		for k, v := range m.Abilities {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovEntity(uint64(len(k))) + 1 + l + sovEntity(uint64(l))
			n += mapEntrySize + 2 + sovEntity(uint64(mapEntrySize))
		}
	}
	return n
}

func sovEntity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Stats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Stats{`,
		`Damage:` + fmt.Sprintf("%v", this.Damage) + `,`,
		`Defense:` + fmt.Sprintf("%v", this.Defense) + `,`,
		`MoveSpeed:` + fmt.Sprintf("%v", this.MoveSpeed) + `,`,
		`CastSpeed:` + fmt.Sprintf("%v", this.CastSpeed) + `,`,
		`CooldownReduction:` + fmt.Sprintf("%v", this.CooldownReduction) + `,`,
		`HP:` + fmt.Sprintf("%v", this.HP) + `,`,
		`MP:` + fmt.Sprintf("%v", this.MP) + `,`,
		`MaxHP:` + fmt.Sprintf("%v", this.MaxHP) + `,`,
		`MaxMP:` + fmt.Sprintf("%v", this.MaxMP) + `,`,
		`}`,
	}, "")
	return s
}
func (this *E) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForObjects := "[]Rect{"
	for _, f := range this.Objects {
		repeatedStringForObjects += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForObjects += "}"
	keysForEffects := make([]string, 0, len(this.Effects))
	for k, _ := range this.Effects {
		keysForEffects = append(keysForEffects, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffects)
	mapStringForEffects := "map[string]int64{"
	for _, k := range keysForEffects {
		mapStringForEffects += fmt.Sprintf("%v: %v,", k, this.Effects[k])
	}
	mapStringForEffects += "}"
	keysForAbilities := make([]string, 0, len(this.Abilities))
	for k, _ := range this.Abilities {
		keysForAbilities = append(keysForAbilities, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAbilities)
	mapStringForAbilities := "map[string]AnimationAbility{"
	for _, k := range keysForAbilities {
		mapStringForAbilities += fmt.Sprintf("%v: %v,", k, this.Abilities[k])
	}
	mapStringForAbilities += "}"
	s := strings.Join([]string{`&E{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`CellID:` + fmt.Sprintf("%v", this.CellID) + `,`,
		`FactionID:` + fmt.Sprintf("%v", this.FactionID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`Rot:` + fmt.Sprintf("%v", this.Rot) + `,`,
		`Radius:` + fmt.Sprintf("%v", this.Radius) + `,`,
		`At:` + fmt.Sprintf("%v", this.At) + `,`,
		`AnimationID:` + fmt.Sprintf("%v", this.AnimationID) + `,`,
		`AnimationAt:` + fmt.Sprintf("%v", this.AnimationAt) + `,`,
		`Objects:` + repeatedStringForObjects + `,`,
		`Stats:` + strings.Replace(strings.Replace(this.Stats.String(), "Stats", "Stats", 1), `&`, ``, 1) + `,`,
		`Effects:` + mapStringForEffects + `,`,
		`Abilities:` + mapStringForAbilities + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEntity(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defense", wireType)
			}
			m.Defense = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defense |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveSpeed", wireType)
			}
			m.MoveSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoveSpeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastSpeed", wireType)
			}
			m.CastSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CastSpeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooldownReduction", wireType)
			}
			m.CooldownReduction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CooldownReduction |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HP", wireType)
			}
			m.HP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HP |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MP", wireType)
			}
			m.MP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MP |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHP", wireType)
			}
			m.MaxHP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHP |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMP", wireType)
			}
			m.MaxMP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMP |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CellID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactionID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FactionID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rot", wireType)
			}
			m.Rot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			m.Radius = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Radius |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimationID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnimationID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimationAt", wireType)
			}
			m.AnimationAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnimationAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, geometry.Rect{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Effects == nil {
				m.Effects = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEntity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEntity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEntity
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEntity
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEntity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEntity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEntity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Effects[mapkey] = mapvalue
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Abilities == nil {
				m.Abilities = make(map[string]AnimationAbility)
			}
			var mapkey string
			mapvalue := &AnimationAbility{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEntity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEntity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEntity
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEntity
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEntity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEntity
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthEntity
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AnimationAbility{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEntity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEntity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Abilities[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntity = fmt.Errorf("proto: unexpected end of group")
)
