/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/entity/animation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogo/protobuf/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace entity {
    export class Animation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            EntityID?: Uint8Array;
            SheetID?: Uint8Array;
            DuplicateID?: Uint8Array;
            Name?: string;
            Start?: number;
            End?: number;
            Sequence?: number[];
            Rate?: number;
            FrameWidth?: number;
            FrameHeight?: number;
            FrameStart?: number;
            FrameEnd?: number;
            FrameMargin?: number;
            FrameSpacing?: number;
            Repeat?: number;
            Delay?: number;
            Duration?: number;
            ShowAndHide?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("EntityID" in data && data.EntityID != undefined) {
                    this.EntityID = data.EntityID;
                }
                if ("SheetID" in data && data.SheetID != undefined) {
                    this.SheetID = data.SheetID;
                }
                if ("DuplicateID" in data && data.DuplicateID != undefined) {
                    this.DuplicateID = data.DuplicateID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Start" in data && data.Start != undefined) {
                    this.Start = data.Start;
                }
                if ("End" in data && data.End != undefined) {
                    this.End = data.End;
                }
                if ("Sequence" in data && data.Sequence != undefined) {
                    this.Sequence = data.Sequence;
                }
                if ("Rate" in data && data.Rate != undefined) {
                    this.Rate = data.Rate;
                }
                if ("FrameWidth" in data && data.FrameWidth != undefined) {
                    this.FrameWidth = data.FrameWidth;
                }
                if ("FrameHeight" in data && data.FrameHeight != undefined) {
                    this.FrameHeight = data.FrameHeight;
                }
                if ("FrameStart" in data && data.FrameStart != undefined) {
                    this.FrameStart = data.FrameStart;
                }
                if ("FrameEnd" in data && data.FrameEnd != undefined) {
                    this.FrameEnd = data.FrameEnd;
                }
                if ("FrameMargin" in data && data.FrameMargin != undefined) {
                    this.FrameMargin = data.FrameMargin;
                }
                if ("FrameSpacing" in data && data.FrameSpacing != undefined) {
                    this.FrameSpacing = data.FrameSpacing;
                }
                if ("Repeat" in data && data.Repeat != undefined) {
                    this.Repeat = data.Repeat;
                }
                if ("Delay" in data && data.Delay != undefined) {
                    this.Delay = data.Delay;
                }
                if ("Duration" in data && data.Duration != undefined) {
                    this.Duration = data.Duration;
                }
                if ("ShowAndHide" in data && data.ShowAndHide != undefined) {
                    this.ShowAndHide = data.ShowAndHide;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get EntityID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set EntityID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get SheetID() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set SheetID(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get DuplicateID() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set DuplicateID(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get Name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get Start() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set Start(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get End() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set End(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get Sequence() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
        }
        set Sequence(value: number[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get Rate() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set Rate(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get FrameWidth() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set FrameWidth(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get FrameHeight() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set FrameHeight(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get FrameStart() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set FrameStart(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get FrameEnd() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set FrameEnd(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get FrameMargin() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set FrameMargin(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get FrameSpacing() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set FrameSpacing(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get Repeat() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set Repeat(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get Delay() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set Delay(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get Duration() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set Duration(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get ShowAndHide() {
            return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
        }
        set ShowAndHide(value: boolean) {
            pb_1.Message.setField(this, 19, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            EntityID?: Uint8Array;
            SheetID?: Uint8Array;
            DuplicateID?: Uint8Array;
            Name?: string;
            Start?: number;
            End?: number;
            Sequence?: number[];
            Rate?: number;
            FrameWidth?: number;
            FrameHeight?: number;
            FrameStart?: number;
            FrameEnd?: number;
            FrameMargin?: number;
            FrameSpacing?: number;
            Repeat?: number;
            Delay?: number;
            Duration?: number;
            ShowAndHide?: boolean;
        }): Animation {
            const message = new Animation({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.EntityID != null) {
                message.EntityID = data.EntityID;
            }
            if (data.SheetID != null) {
                message.SheetID = data.SheetID;
            }
            if (data.DuplicateID != null) {
                message.DuplicateID = data.DuplicateID;
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Start != null) {
                message.Start = data.Start;
            }
            if (data.End != null) {
                message.End = data.End;
            }
            if (data.Sequence != null) {
                message.Sequence = data.Sequence;
            }
            if (data.Rate != null) {
                message.Rate = data.Rate;
            }
            if (data.FrameWidth != null) {
                message.FrameWidth = data.FrameWidth;
            }
            if (data.FrameHeight != null) {
                message.FrameHeight = data.FrameHeight;
            }
            if (data.FrameStart != null) {
                message.FrameStart = data.FrameStart;
            }
            if (data.FrameEnd != null) {
                message.FrameEnd = data.FrameEnd;
            }
            if (data.FrameMargin != null) {
                message.FrameMargin = data.FrameMargin;
            }
            if (data.FrameSpacing != null) {
                message.FrameSpacing = data.FrameSpacing;
            }
            if (data.Repeat != null) {
                message.Repeat = data.Repeat;
            }
            if (data.Delay != null) {
                message.Delay = data.Delay;
            }
            if (data.Duration != null) {
                message.Duration = data.Duration;
            }
            if (data.ShowAndHide != null) {
                message.ShowAndHide = data.ShowAndHide;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                EntityID?: Uint8Array;
                SheetID?: Uint8Array;
                DuplicateID?: Uint8Array;
                Name?: string;
                Start?: number;
                End?: number;
                Sequence?: number[];
                Rate?: number;
                FrameWidth?: number;
                FrameHeight?: number;
                FrameStart?: number;
                FrameEnd?: number;
                FrameMargin?: number;
                FrameSpacing?: number;
                Repeat?: number;
                Delay?: number;
                Duration?: number;
                ShowAndHide?: boolean;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.EntityID != null) {
                data.EntityID = this.EntityID;
            }
            if (this.SheetID != null) {
                data.SheetID = this.SheetID;
            }
            if (this.DuplicateID != null) {
                data.DuplicateID = this.DuplicateID;
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Start != null) {
                data.Start = this.Start;
            }
            if (this.End != null) {
                data.End = this.End;
            }
            if (this.Sequence != null) {
                data.Sequence = this.Sequence;
            }
            if (this.Rate != null) {
                data.Rate = this.Rate;
            }
            if (this.FrameWidth != null) {
                data.FrameWidth = this.FrameWidth;
            }
            if (this.FrameHeight != null) {
                data.FrameHeight = this.FrameHeight;
            }
            if (this.FrameStart != null) {
                data.FrameStart = this.FrameStart;
            }
            if (this.FrameEnd != null) {
                data.FrameEnd = this.FrameEnd;
            }
            if (this.FrameMargin != null) {
                data.FrameMargin = this.FrameMargin;
            }
            if (this.FrameSpacing != null) {
                data.FrameSpacing = this.FrameSpacing;
            }
            if (this.Repeat != null) {
                data.Repeat = this.Repeat;
            }
            if (this.Delay != null) {
                data.Delay = this.Delay;
            }
            if (this.Duration != null) {
                data.Duration = this.Duration;
            }
            if (this.ShowAndHide != null) {
                data.ShowAndHide = this.ShowAndHide;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.EntityID.length)
                writer.writeBytes(2, this.EntityID);
            if (this.SheetID.length)
                writer.writeBytes(3, this.SheetID);
            if (this.DuplicateID.length)
                writer.writeBytes(4, this.DuplicateID);
            if (this.Name.length)
                writer.writeString(5, this.Name);
            if (this.Start != 0)
                writer.writeInt64(6, this.Start);
            if (this.End != 0)
                writer.writeInt64(7, this.End);
            if (this.Sequence.length)
                writer.writePackedInt64(8, this.Sequence);
            if (this.Rate != 0)
                writer.writeInt32(9, this.Rate);
            if (this.FrameWidth != 0)
                writer.writeInt64(10, this.FrameWidth);
            if (this.FrameHeight != 0)
                writer.writeInt64(11, this.FrameHeight);
            if (this.FrameStart != 0)
                writer.writeInt64(12, this.FrameStart);
            if (this.FrameEnd != 0)
                writer.writeInt64(13, this.FrameEnd);
            if (this.FrameMargin != 0)
                writer.writeInt64(14, this.FrameMargin);
            if (this.FrameSpacing != 0)
                writer.writeInt64(15, this.FrameSpacing);
            if (this.Repeat != 0)
                writer.writeInt64(16, this.Repeat);
            if (this.Delay != 0)
                writer.writeInt64(17, this.Delay);
            if (this.Duration != 0)
                writer.writeInt64(18, this.Duration);
            if (this.ShowAndHide != false)
                writer.writeBool(19, this.ShowAndHide);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Animation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Animation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        message.EntityID = reader.readBytes();
                        break;
                    case 3:
                        message.SheetID = reader.readBytes();
                        break;
                    case 4:
                        message.DuplicateID = reader.readBytes();
                        break;
                    case 5:
                        message.Name = reader.readString();
                        break;
                    case 6:
                        message.Start = reader.readInt64();
                        break;
                    case 7:
                        message.End = reader.readInt64();
                        break;
                    case 8:
                        message.Sequence = reader.readPackedInt64();
                        break;
                    case 9:
                        message.Rate = reader.readInt32();
                        break;
                    case 10:
                        message.FrameWidth = reader.readInt64();
                        break;
                    case 11:
                        message.FrameHeight = reader.readInt64();
                        break;
                    case 12:
                        message.FrameStart = reader.readInt64();
                        break;
                    case 13:
                        message.FrameEnd = reader.readInt64();
                        break;
                    case 14:
                        message.FrameMargin = reader.readInt64();
                        break;
                    case 15:
                        message.FrameSpacing = reader.readInt64();
                        break;
                    case 16:
                        message.Repeat = reader.readInt64();
                        break;
                    case 17:
                        message.Delay = reader.readInt64();
                        break;
                    case 18:
                        message.Duration = reader.readInt64();
                        break;
                    case 19:
                        message.ShowAndHide = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Animation {
            return Animation.deserialize(bytes);
        }
    }
    export class AnimationAbility extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            AnimationID?: Uint8Array;
            CellID?: Uint8Array;
            X?: number;
            Y?: number;
            Rot?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("AnimationID" in data && data.AnimationID != undefined) {
                    this.AnimationID = data.AnimationID;
                }
                if ("CellID" in data && data.CellID != undefined) {
                    this.CellID = data.CellID;
                }
                if ("X" in data && data.X != undefined) {
                    this.X = data.X;
                }
                if ("Y" in data && data.Y != undefined) {
                    this.Y = data.Y;
                }
                if ("Rot" in data && data.Rot != undefined) {
                    this.Rot = data.Rot;
                }
            }
        }
        get AnimationID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set AnimationID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get CellID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set CellID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get X() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set X(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get Y() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set Y(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get Rot() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set Rot(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            AnimationID?: Uint8Array;
            CellID?: Uint8Array;
            X?: number;
            Y?: number;
            Rot?: number;
        }): AnimationAbility {
            const message = new AnimationAbility({});
            if (data.AnimationID != null) {
                message.AnimationID = data.AnimationID;
            }
            if (data.CellID != null) {
                message.CellID = data.CellID;
            }
            if (data.X != null) {
                message.X = data.X;
            }
            if (data.Y != null) {
                message.Y = data.Y;
            }
            if (data.Rot != null) {
                message.Rot = data.Rot;
            }
            return message;
        }
        toObject() {
            const data: {
                AnimationID?: Uint8Array;
                CellID?: Uint8Array;
                X?: number;
                Y?: number;
                Rot?: number;
            } = {};
            if (this.AnimationID != null) {
                data.AnimationID = this.AnimationID;
            }
            if (this.CellID != null) {
                data.CellID = this.CellID;
            }
            if (this.X != null) {
                data.X = this.X;
            }
            if (this.Y != null) {
                data.Y = this.Y;
            }
            if (this.Rot != null) {
                data.Rot = this.Rot;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.AnimationID.length)
                writer.writeBytes(1, this.AnimationID);
            if (this.CellID.length)
                writer.writeBytes(2, this.CellID);
            if (this.X != 0)
                writer.writeInt64(3, this.X);
            if (this.Y != 0)
                writer.writeInt64(4, this.Y);
            if (this.Rot != 0)
                writer.writeInt32(5, this.Rot);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnimationAbility {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnimationAbility();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.AnimationID = reader.readBytes();
                        break;
                    case 2:
                        message.CellID = reader.readBytes();
                        break;
                    case 3:
                        message.X = reader.readInt64();
                        break;
                    case 4:
                        message.Y = reader.readInt64();
                        break;
                    case 5:
                        message.Rot = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AnimationAbility {
            return AnimationAbility.deserialize(bytes);
        }
    }
}
