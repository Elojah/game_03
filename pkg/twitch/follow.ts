/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/twitch/follow.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogo/protobuf/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace twitch {
    export class Follow extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            FromID?: string;
            FromLogin?: string;
            FromName?: string;
            ToID?: string;
            ToLogin?: string;
            ToName?: string;
            FollowedAt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("FromID" in data && data.FromID != undefined) {
                    this.FromID = data.FromID;
                }
                if ("FromLogin" in data && data.FromLogin != undefined) {
                    this.FromLogin = data.FromLogin;
                }
                if ("FromName" in data && data.FromName != undefined) {
                    this.FromName = data.FromName;
                }
                if ("ToID" in data && data.ToID != undefined) {
                    this.ToID = data.ToID;
                }
                if ("ToLogin" in data && data.ToLogin != undefined) {
                    this.ToLogin = data.ToLogin;
                }
                if ("ToName" in data && data.ToName != undefined) {
                    this.ToName = data.ToName;
                }
                if ("FollowedAt" in data && data.FollowedAt != undefined) {
                    this.FollowedAt = data.FollowedAt;
                }
            }
        }
        get FromID() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set FromID(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get FromLogin() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set FromLogin(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get FromName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set FromName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ToID() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ToID(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ToLogin() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ToLogin(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get ToName() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ToName(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get FollowedAt() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set FollowedAt(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            FromID?: string;
            FromLogin?: string;
            FromName?: string;
            ToID?: string;
            ToLogin?: string;
            ToName?: string;
            FollowedAt?: string;
        }): Follow {
            const message = new Follow({});
            if (data.FromID != null) {
                message.FromID = data.FromID;
            }
            if (data.FromLogin != null) {
                message.FromLogin = data.FromLogin;
            }
            if (data.FromName != null) {
                message.FromName = data.FromName;
            }
            if (data.ToID != null) {
                message.ToID = data.ToID;
            }
            if (data.ToLogin != null) {
                message.ToLogin = data.ToLogin;
            }
            if (data.ToName != null) {
                message.ToName = data.ToName;
            }
            if (data.FollowedAt != null) {
                message.FollowedAt = data.FollowedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                FromID?: string;
                FromLogin?: string;
                FromName?: string;
                ToID?: string;
                ToLogin?: string;
                ToName?: string;
                FollowedAt?: string;
            } = {};
            if (this.FromID != null) {
                data.FromID = this.FromID;
            }
            if (this.FromLogin != null) {
                data.FromLogin = this.FromLogin;
            }
            if (this.FromName != null) {
                data.FromName = this.FromName;
            }
            if (this.ToID != null) {
                data.ToID = this.ToID;
            }
            if (this.ToLogin != null) {
                data.ToLogin = this.ToLogin;
            }
            if (this.ToName != null) {
                data.ToName = this.ToName;
            }
            if (this.FollowedAt != null) {
                data.FollowedAt = this.FollowedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.FromID.length)
                writer.writeString(1, this.FromID);
            if (this.FromLogin.length)
                writer.writeString(2, this.FromLogin);
            if (this.FromName.length)
                writer.writeString(3, this.FromName);
            if (this.ToID.length)
                writer.writeString(4, this.ToID);
            if (this.ToLogin.length)
                writer.writeString(5, this.ToLogin);
            if (this.ToName.length)
                writer.writeString(6, this.ToName);
            if (this.FollowedAt.length)
                writer.writeString(7, this.FollowedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Follow {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Follow();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.FromID = reader.readString();
                        break;
                    case 2:
                        message.FromLogin = reader.readString();
                        break;
                    case 3:
                        message.FromName = reader.readString();
                        break;
                    case 4:
                        message.ToID = reader.readString();
                        break;
                    case 5:
                        message.ToLogin = reader.readString();
                        break;
                    case 6:
                        message.ToName = reader.readString();
                        break;
                    case 7:
                        message.FollowedAt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Follow {
            return Follow.deserialize(bytes);
        }
    }
}
