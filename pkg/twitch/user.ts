/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/twitch/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogo/protobuf/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace twitch {
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: string;
            Login?: string;
            DisplayName?: string;
            BroadcasterType?: string;
            Description?: string;
            ProfileImageURL?: string;
            OfflineImageURL?: string;
            ViewCount?: number;
            Email?: string;
            CreatedAt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Login" in data && data.Login != undefined) {
                    this.Login = data.Login;
                }
                if ("DisplayName" in data && data.DisplayName != undefined) {
                    this.DisplayName = data.DisplayName;
                }
                if ("BroadcasterType" in data && data.BroadcasterType != undefined) {
                    this.BroadcasterType = data.BroadcasterType;
                }
                if ("Description" in data && data.Description != undefined) {
                    this.Description = data.Description;
                }
                if ("ProfileImageURL" in data && data.ProfileImageURL != undefined) {
                    this.ProfileImageURL = data.ProfileImageURL;
                }
                if ("OfflineImageURL" in data && data.OfflineImageURL != undefined) {
                    this.OfflineImageURL = data.OfflineImageURL;
                }
                if ("ViewCount" in data && data.ViewCount != undefined) {
                    this.ViewCount = data.ViewCount;
                }
                if ("Email" in data && data.Email != undefined) {
                    this.Email = data.Email;
                }
                if ("CreatedAt" in data && data.CreatedAt != undefined) {
                    this.CreatedAt = data.CreatedAt;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ID(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Login() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Login(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get DisplayName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set DisplayName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get BroadcasterType() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set BroadcasterType(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get Description() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set Description(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get ProfileImageURL() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ProfileImageURL(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get OfflineImageURL() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set OfflineImageURL(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get ViewCount() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set ViewCount(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get Email() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set Email(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get CreatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set CreatedAt(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            ID?: string;
            Login?: string;
            DisplayName?: string;
            BroadcasterType?: string;
            Description?: string;
            ProfileImageURL?: string;
            OfflineImageURL?: string;
            ViewCount?: number;
            Email?: string;
            CreatedAt?: string;
        }): User {
            const message = new User({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Login != null) {
                message.Login = data.Login;
            }
            if (data.DisplayName != null) {
                message.DisplayName = data.DisplayName;
            }
            if (data.BroadcasterType != null) {
                message.BroadcasterType = data.BroadcasterType;
            }
            if (data.Description != null) {
                message.Description = data.Description;
            }
            if (data.ProfileImageURL != null) {
                message.ProfileImageURL = data.ProfileImageURL;
            }
            if (data.OfflineImageURL != null) {
                message.OfflineImageURL = data.OfflineImageURL;
            }
            if (data.ViewCount != null) {
                message.ViewCount = data.ViewCount;
            }
            if (data.Email != null) {
                message.Email = data.Email;
            }
            if (data.CreatedAt != null) {
                message.CreatedAt = data.CreatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: string;
                Login?: string;
                DisplayName?: string;
                BroadcasterType?: string;
                Description?: string;
                ProfileImageURL?: string;
                OfflineImageURL?: string;
                ViewCount?: number;
                Email?: string;
                CreatedAt?: string;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Login != null) {
                data.Login = this.Login;
            }
            if (this.DisplayName != null) {
                data.DisplayName = this.DisplayName;
            }
            if (this.BroadcasterType != null) {
                data.BroadcasterType = this.BroadcasterType;
            }
            if (this.Description != null) {
                data.Description = this.Description;
            }
            if (this.ProfileImageURL != null) {
                data.ProfileImageURL = this.ProfileImageURL;
            }
            if (this.OfflineImageURL != null) {
                data.OfflineImageURL = this.OfflineImageURL;
            }
            if (this.ViewCount != null) {
                data.ViewCount = this.ViewCount;
            }
            if (this.Email != null) {
                data.Email = this.Email;
            }
            if (this.CreatedAt != null) {
                data.CreatedAt = this.CreatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeString(1, this.ID);
            if (this.Login.length)
                writer.writeString(2, this.Login);
            if (this.DisplayName.length)
                writer.writeString(3, this.DisplayName);
            if (this.BroadcasterType.length)
                writer.writeString(4, this.BroadcasterType);
            if (this.Description.length)
                writer.writeString(5, this.Description);
            if (this.ProfileImageURL.length)
                writer.writeString(6, this.ProfileImageURL);
            if (this.OfflineImageURL.length)
                writer.writeString(7, this.OfflineImageURL);
            if (this.ViewCount != 0)
                writer.writeInt64(8, this.ViewCount);
            if (this.Email.length)
                writer.writeString(9, this.Email);
            if (this.CreatedAt.length)
                writer.writeString(10, this.CreatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readString();
                        break;
                    case 2:
                        message.Login = reader.readString();
                        break;
                    case 3:
                        message.DisplayName = reader.readString();
                        break;
                    case 4:
                        message.BroadcasterType = reader.readString();
                        break;
                    case 5:
                        message.Description = reader.readString();
                        break;
                    case 6:
                        message.ProfileImageURL = reader.readString();
                        break;
                    case 7:
                        message.OfflineImageURL = reader.readString();
                        break;
                    case 8:
                        message.ViewCount = reader.readInt64();
                        break;
                    case 9:
                        message.Email = reader.readString();
                        break;
                    case 10:
                        message.CreatedAt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
}
