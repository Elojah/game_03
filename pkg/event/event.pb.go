// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/pkg/event/event.proto

package event

import (
	fmt "fmt"
	ability "github.com/elojah/game_03/pkg/ability"
	github_com_elojah_game_03_pkg_ulid "github.com/elojah/game_03/pkg/ulid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type E struct {
	ID       github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"ID"`
	EntityID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,2,opt,name=EntityID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"EntityID"`
	SourceID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,3,opt,name=SourceID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"SourceID"`
	At       int64                                 `protobuf:"varint,4,opt,name=At,proto3" json:"At,omitempty"`
	// Receive cast effect
	Effect     ability.CastEffect `protobuf:"bytes,5,opt,name=Effect,proto3" json:"Effect"`
	SourceCast ability.Cast       `protobuf:"bytes,6,opt,name=SourceCast,proto3" json:"SourceCast"`
}

func (m *E) Reset()      { *m = E{} }
func (*E) ProtoMessage() {}
func (*E) Descriptor() ([]byte, []int) {
	return fileDescriptor_eae490fa9ac09366, []int{0}
}
func (m *E) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E.Merge(m, src)
}
func (m *E) XXX_Size() int {
	return m.Size()
}
func (m *E) XXX_DiscardUnknown() {
	xxx_messageInfo_E.DiscardUnknown(m)
}

var xxx_messageInfo_E proto.InternalMessageInfo

func init() {
	proto.RegisterType((*E)(nil), "event.E")
	golang_proto.RegisterType((*E)(nil), "event.E")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_03/pkg/event/event.proto", fileDescriptor_eae490fa9ac09366)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/pkg/event/event.proto", fileDescriptor_eae490fa9ac09366)
}

var fileDescriptor_eae490fa9ac09366 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x3f, 0x4f, 0xfa, 0x40,
	0x18, 0xc7, 0xef, 0x29, 0x7f, 0xf2, 0xcb, 0xfd, 0xd4, 0xa1, 0x2e, 0x0d, 0xc3, 0x03, 0x31, 0x31,
	0x61, 0xa1, 0x87, 0x32, 0x3b, 0x80, 0x25, 0xb1, 0x2b, 0xbe, 0x00, 0xd3, 0xd6, 0x52, 0xaa, 0xc0,
	0x11, 0xb8, 0x9a, 0xb0, 0xf9, 0x12, 0x7c, 0x19, 0xbe, 0x04, 0x47, 0x46, 0xc6, 0x8e, 0xc4, 0x81,
	0xd8, 0xeb, 0xe2, 0xc8, 0xe8, 0x68, 0xb8, 0x56, 0x83, 0x0b, 0x03, 0xcb, 0xe5, 0x9e, 0x3c, 0xdf,
	0xcf, 0xe7, 0x9b, 0xdc, 0x51, 0x16, 0x84, 0x62, 0x10, 0xb9, 0xa6, 0xc7, 0x47, 0xcc, 0x1f, 0xf2,
	0x07, 0x67, 0xc0, 0x02, 0x67, 0xe4, 0xdf, 0x35, 0x5b, 0x6c, 0xf2, 0x18, 0x30, 0xff, 0xc9, 0x1f,
	0x8b, 0xec, 0x34, 0x27, 0x53, 0x2e, 0xb8, 0x5e, 0x52, 0x43, 0xa5, 0xb1, 0xc3, 0x05, 0x3c, 0xe0,
	0x4c, 0x6d, 0xdd, 0xa8, 0xaf, 0x26, 0x35, 0xa8, 0x5b, 0x46, 0x55, 0x9a, 0xfb, 0x6b, 0x1c, 0x37,
	0x1c, 0x86, 0x62, 0xce, 0x3c, 0x67, 0x96, 0xf7, 0x9c, 0xc5, 0x1a, 0x85, 0xae, 0x7e, 0x45, 0x35,
	0xdb, 0x32, 0xa0, 0x06, 0xf5, 0xa3, 0x4e, 0x63, 0xb9, 0xae, 0x92, 0xf7, 0x75, 0xf5, 0x7c, 0xbf,
	0x2b, 0x1a, 0x86, 0xf7, 0xa6, 0x6d, 0xf5, 0x34, 0xdb, 0xd2, 0x6d, 0xfa, 0xaf, 0x3b, 0x16, 0xa1,
	0x98, 0xdb, 0x96, 0xa1, 0x1d, 0x22, 0xf9, 0xc5, 0xb7, 0xaa, 0x5b, 0x1e, 0x4d, 0x3d, 0xdf, 0xb6,
	0x8c, 0xc2, 0x41, 0xaa, 0x1f, 0x5c, 0x3f, 0xa1, 0x5a, 0x5b, 0x18, 0xc5, 0x1a, 0xd4, 0x0b, 0x3d,
	0xad, 0x2d, 0xf4, 0x0b, 0x5a, 0xee, 0xf6, 0xfb, 0xbe, 0x27, 0x8c, 0x52, 0x0d, 0xea, 0xff, 0x2f,
	0x4f, 0xcd, 0xfc, 0x3d, 0xcc, 0x6b, 0x67, 0x26, 0xb2, 0x55, 0xa7, 0xb8, 0x6d, 0xeb, 0xe5, 0x41,
	0xbd, 0x45, 0x69, 0xa6, 0xdb, 0x26, 0x8c, 0xb2, 0xc2, 0x8e, 0xff, 0x60, 0x39, 0xb0, 0x13, 0xeb,
	0xdc, 0x2c, 0x13, 0x24, 0x71, 0x82, 0x64, 0x95, 0x20, 0xd9, 0x24, 0x08, 0x5f, 0x09, 0xc2, 0xb3,
	0x44, 0x78, 0x95, 0x08, 0x6f, 0x12, 0x61, 0x21, 0x11, 0x96, 0x12, 0x21, 0x96, 0x08, 0x1f, 0x12,
	0xe1, 0x53, 0x22, 0xd9, 0x48, 0x84, 0x97, 0x14, 0xc9, 0x22, 0x45, 0x88, 0x53, 0x24, 0xab, 0x14,
	0x89, 0x5b, 0x56, 0x7f, 0xd4, 0xfa, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x63, 0x03, 0x2b, 0x3e,
	0x02, 0x00, 0x00,
}

func (this *E) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*E)
	if !ok {
		that2, ok := that.(E)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.EntityID.Equal(that1.EntityID) {
		return false
	}
	if !this.SourceID.Equal(that1.SourceID) {
		return false
	}
	if this.At != that1.At {
		return false
	}
	if !this.Effect.Equal(&that1.Effect) {
		return false
	}
	if !this.SourceCast.Equal(&that1.SourceCast) {
		return false
	}
	return true
}
func (this *E) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&event.E{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "SourceID: "+fmt.Sprintf("%#v", this.SourceID)+",\n")
	s = append(s, "At: "+fmt.Sprintf("%#v", this.At)+",\n")
	s = append(s, "Effect: "+strings.Replace(this.Effect.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "SourceCast: "+strings.Replace(this.SourceCast.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEvent(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *E) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SourceCast.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Effect.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.At != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.At))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.SourceID.Size()
		i -= size
		if _, err := m.SourceID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.EntityID.Size()
		i -= size
		if _, err := m.EntityID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedE(r randyEvent, easy bool) *E {
	this := &E{}
	v1 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.ID = *v1
	v2 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.EntityID = *v2
	v3 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.SourceID = *v3
	this.At = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.At *= -1
	}
	v4 := ability.NewPopulatedCastEffect(r, easy)
	this.Effect = *v4
	v5 := ability.NewPopulatedCast(r, easy)
	this.SourceCast = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyEvent interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEvent(r randyEvent) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEvent(r randyEvent) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneEvent(r)
	}
	return string(tmps)
}
func randUnrecognizedEvent(r randyEvent, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEvent(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEvent(dAtA []byte, r randyEvent, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEvent(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateEvent(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateEvent(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEvent(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEvent(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEvent(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEvent(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *E) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.EntityID.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.SourceID.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.At != 0 {
		n += 1 + sovEvent(uint64(m.At))
	}
	l = m.Effect.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.SourceCast.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *E) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&E{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`SourceID:` + fmt.Sprintf("%v", this.SourceID) + `,`,
		`At:` + fmt.Sprintf("%v", this.At) + `,`,
		`Effect:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Effect), "CastEffect", "ability.CastEffect", 1), `&`, ``, 1) + `,`,
		`SourceCast:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.SourceCast), "Cast", "ability.Cast", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *E) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntityID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SourceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Effect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SourceCast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
