/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/event/event.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogo/protobuf/gogoproto/gogo";
import * as dependency_2 from "./../entity/entity";
import * as dependency_3 from "./../ability/cast";
import * as pb_1 from "google-protobuf";
export namespace event {
    export class E extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            EntityID?: Uint8Array;
            Source?: dependency_2.entity.E;
            At?: number;
            Effect?: dependency_3.ability.CastEffect;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("EntityID" in data && data.EntityID != undefined) {
                    this.EntityID = data.EntityID;
                }
                if ("Source" in data && data.Source != undefined) {
                    this.Source = data.Source;
                }
                if ("At" in data && data.At != undefined) {
                    this.At = data.At;
                }
                if ("Effect" in data && data.Effect != undefined) {
                    this.Effect = data.Effect;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get EntityID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set EntityID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get Source() {
            return pb_1.Message.getWrapperField(this, dependency_2.entity.E, 3) as dependency_2.entity.E;
        }
        set Source(value: dependency_2.entity.E) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_Source() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get At() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set At(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get Effect() {
            return pb_1.Message.getWrapperField(this, dependency_3.ability.CastEffect, 5) as dependency_3.ability.CastEffect;
        }
        set Effect(value: dependency_3.ability.CastEffect) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_Effect() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            ID?: Uint8Array;
            EntityID?: Uint8Array;
            Source?: ReturnType<typeof dependency_2.entity.E.prototype.toObject>;
            At?: number;
            Effect?: ReturnType<typeof dependency_3.ability.CastEffect.prototype.toObject>;
        }): E {
            const message = new E({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.EntityID != null) {
                message.EntityID = data.EntityID;
            }
            if (data.Source != null) {
                message.Source = dependency_2.entity.E.fromObject(data.Source);
            }
            if (data.At != null) {
                message.At = data.At;
            }
            if (data.Effect != null) {
                message.Effect = dependency_3.ability.CastEffect.fromObject(data.Effect);
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                EntityID?: Uint8Array;
                Source?: ReturnType<typeof dependency_2.entity.E.prototype.toObject>;
                At?: number;
                Effect?: ReturnType<typeof dependency_3.ability.CastEffect.prototype.toObject>;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.EntityID != null) {
                data.EntityID = this.EntityID;
            }
            if (this.Source != null) {
                data.Source = this.Source.toObject();
            }
            if (this.At != null) {
                data.At = this.At;
            }
            if (this.Effect != null) {
                data.Effect = this.Effect.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.EntityID.length)
                writer.writeBytes(2, this.EntityID);
            if (this.has_Source)
                writer.writeMessage(3, this.Source, () => this.Source.serialize(writer));
            if (this.At != 0)
                writer.writeInt64(4, this.At);
            if (this.has_Effect)
                writer.writeMessage(5, this.Effect, () => this.Effect.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): E {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new E();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        message.EntityID = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.Source, () => message.Source = dependency_2.entity.E.deserialize(reader));
                        break;
                    case 4:
                        message.At = reader.readInt64();
                        break;
                    case 5:
                        reader.readMessage(message.Effect, () => message.Effect = dependency_3.ability.CastEffect.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): E {
            return E.deserialize(bytes);
        }
    }
}
