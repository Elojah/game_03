// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/pkg/ability/cast.proto

package ability

import (
	fmt "fmt"
	geometry "github.com/elojah/game_03/pkg/geometry"
	github_com_elojah_game_03_pkg_ulid "github.com/elojah/game_03/pkg/ulid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CastTarget struct {
	ID     github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"ID"`
	CellID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,2,opt,name=CellID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"CellID"`
	Rect   geometry.Rect                         `protobuf:"bytes,3,opt,name=Rect,proto3" json:"Rect"`
	Circle geometry.Circle                       `protobuf:"bytes,4,opt,name=Circle,proto3" json:"Circle"`
}

func (m *CastTarget) Reset()      { *m = CastTarget{} }
func (*CastTarget) ProtoMessage() {}
func (*CastTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c84cca73e45d496, []int{0}
}
func (m *CastTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CastTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CastTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CastTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CastTarget.Merge(m, src)
}
func (m *CastTarget) XXX_Size() int {
	return m.Size()
}
func (m *CastTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_CastTarget.DiscardUnknown(m)
}

var xxx_messageInfo_CastTarget proto.InternalMessageInfo

// Cast object sent to process
type Cast struct {
	AbilityID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=AbilityID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"AbilityID"`
	Targets   map[string]CastTarget                 `protobuf:"bytes,2,rep,name=Targets,proto3" json:"Targets" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	At        int64                                 `protobuf:"varint,3,opt,name=At,proto3" json:"At,omitempty"`
}

func (m *Cast) Reset()      { *m = Cast{} }
func (*Cast) ProtoMessage() {}
func (*Cast) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c84cca73e45d496, []int{1}
}
func (m *Cast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cast.Merge(m, src)
}
func (m *Cast) XXX_Size() int {
	return m.Size()
}
func (m *Cast) XXX_DiscardUnknown() {
	xxx_messageInfo_Cast.DiscardUnknown(m)
}

var xxx_messageInfo_Cast proto.InternalMessageInfo

// Cast effect received to eval
type CastEffect struct {
	AbilityID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=AbilityID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"AbilityID"`
	EffectID  github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,2,opt,name=EffectID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"EffectID"`
	CurrentID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,3,opt,name=CurrentID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"CurrentID"`
	Effect    Effect                                `protobuf:"bytes,4,opt,name=Effect,proto3" json:"Effect"`
	Targets   map[string]CastTarget                 `protobuf:"bytes,5,rep,name=Targets,proto3" json:"Targets" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CastEffect) Reset()      { *m = CastEffect{} }
func (*CastEffect) ProtoMessage() {}
func (*CastEffect) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c84cca73e45d496, []int{2}
}
func (m *CastEffect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CastEffect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CastEffect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CastEffect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CastEffect.Merge(m, src)
}
func (m *CastEffect) XXX_Size() int {
	return m.Size()
}
func (m *CastEffect) XXX_DiscardUnknown() {
	xxx_messageInfo_CastEffect.DiscardUnknown(m)
}

var xxx_messageInfo_CastEffect proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CastTarget)(nil), "ability.CastTarget")
	golang_proto.RegisterType((*CastTarget)(nil), "ability.CastTarget")
	proto.RegisterType((*Cast)(nil), "ability.Cast")
	golang_proto.RegisterType((*Cast)(nil), "ability.Cast")
	proto.RegisterMapType((map[string]CastTarget)(nil), "ability.Cast.TargetsEntry")
	golang_proto.RegisterMapType((map[string]CastTarget)(nil), "ability.Cast.TargetsEntry")
	proto.RegisterType((*CastEffect)(nil), "ability.CastEffect")
	golang_proto.RegisterType((*CastEffect)(nil), "ability.CastEffect")
	proto.RegisterMapType((map[string]CastTarget)(nil), "ability.CastEffect.TargetsEntry")
	golang_proto.RegisterMapType((map[string]CastTarget)(nil), "ability.CastEffect.TargetsEntry")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_03/pkg/ability/cast.proto", fileDescriptor_3c84cca73e45d496)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/pkg/ability/cast.proto", fileDescriptor_3c84cca73e45d496)
}

var fileDescriptor_3c84cca73e45d496 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xbf, 0x6b, 0xdb, 0x40,
	0x14, 0xd6, 0x93, 0x1c, 0xa7, 0x39, 0x87, 0x34, 0x5c, 0x17, 0xe1, 0xe1, 0xc5, 0x18, 0x0a, 0xee,
	0x60, 0x29, 0xd8, 0x14, 0x4a, 0xa0, 0x50, 0xff, 0x82, 0x8a, 0x0e, 0x05, 0xd1, 0xbd, 0xc8, 0xee,
	0x59, 0x51, 0x23, 0x47, 0x41, 0x3e, 0x15, 0xbc, 0xf5, 0x4f, 0xe8, 0x9f, 0xd1, 0xbd, 0x4b, 0xc7,
	0x8c, 0x1e, 0x3d, 0x86, 0x0e, 0xa1, 0x92, 0x97, 0x0e, 0x1d, 0x3c, 0x76, 0x2c, 0xba, 0x3b, 0xcb,
	0xc9, 0x62, 0x82, 0xc9, 0xa4, 0xbb, 0x77, 0xdf, 0xf7, 0xdd, 0x7b, 0xdf, 0x77, 0x22, 0xa7, 0x7e,
	0xc0, 0xcf, 0x93, 0xa1, 0x35, 0x8a, 0x26, 0x36, 0x0b, 0xa3, 0xcf, 0xde, 0xb9, 0xed, 0x7b, 0x13,
	0xf6, 0xf1, 0xb4, 0x6d, 0x5f, 0x5d, 0xf8, 0xb6, 0x37, 0x0c, 0xc2, 0x80, 0xcf, 0xec, 0x91, 0x37,
	0xe5, 0xd6, 0x55, 0x1c, 0xf1, 0x88, 0xee, 0xab, 0x5a, 0xb5, 0x79, 0x87, 0xea, 0x47, 0x7e, 0x64,
	0x8b, 0xf3, 0x61, 0x32, 0x16, 0x3b, 0xb1, 0x11, 0x2b, 0xc9, 0xab, 0xbe, 0xdc, 0x7e, 0x93, 0xcf,
	0xa2, 0x09, 0xe3, 0xf1, 0xac, 0x58, 0x28, 0x5a, 0xfb, 0x61, 0x0d, 0xaa, 0xaf, 0x24, 0xd5, 0xff,
	0x02, 0x21, 0x3d, 0x6f, 0xca, 0x3f, 0x78, 0xb1, 0xcf, 0x38, 0x7d, 0x4d, 0x74, 0xa7, 0x6f, 0x42,
	0x0d, 0x1a, 0x87, 0xdd, 0xe6, 0xfc, 0xf6, 0x44, 0xfb, 0x75, 0x7b, 0xf2, 0x7c, 0xbb, 0x6e, 0x12,
	0x06, 0x9f, 0x2c, 0xa7, 0xef, 0xea, 0x4e, 0x9f, 0x0e, 0x48, 0xb9, 0xc7, 0xc2, 0xd0, 0xe9, 0x9b,
	0xfa, 0x2e, 0x12, 0x8a, 0x4c, 0x1b, 0xa4, 0xe4, 0xb2, 0x11, 0x37, 0x8d, 0x1a, 0x34, 0x2a, 0xad,
	0x23, 0xab, 0x18, 0x34, 0xaf, 0x76, 0x4b, 0xb9, 0xa8, 0x2b, 0x10, 0xd4, 0x22, 0xe5, 0x5e, 0x10,
	0x8f, 0x42, 0x66, 0x96, 0x04, 0xf6, 0x78, 0x83, 0x95, 0x75, 0x85, 0x56, 0xa8, 0xfa, 0x0a, 0x48,
	0x29, 0x1f, 0x97, 0xbe, 0x23, 0x07, 0x1d, 0x69, 0xc4, 0xae, 0xf3, 0x6e, 0xf8, 0xf4, 0x8c, 0xec,
	0x4b, 0xff, 0xa6, 0xa6, 0x5e, 0x33, 0x1a, 0x95, 0x56, 0xd5, 0x5a, 0xbb, 0x9c, 0x5f, 0x66, 0xa9,
	0xc3, 0xc1, 0x25, 0x8f, 0x67, 0xaa, 0xa1, 0x35, 0x81, 0x1e, 0x11, 0xbd, 0x23, 0x27, 0x35, 0x5c,
	0xbd, 0xc3, 0xab, 0xef, 0xc9, 0xe1, 0x5d, 0x38, 0x3d, 0x26, 0xc6, 0x05, 0x9b, 0x89, 0x16, 0x0f,
	0xdc, 0x7c, 0x49, 0x5f, 0x90, 0xbd, 0x2f, 0x5e, 0x98, 0x30, 0xe1, 0x71, 0xa5, 0xf5, 0xec, 0xde,
	0x5d, 0x92, 0xeb, 0x4a, 0xc4, 0x99, 0xfe, 0x0a, 0xea, 0x3f, 0x0c, 0x99, 0xf0, 0x60, 0x3c, 0xce,
	0x1d, 0x7b, 0xd4, 0xc1, 0x1d, 0xf2, 0x44, 0xca, 0xee, 0x9a, 0x78, 0x41, 0xcf, 0xfb, 0xea, 0x25,
	0x71, 0xcc, 0x2e, 0x73, 0x2d, 0x63, 0xa7, 0xbe, 0x0a, 0x3e, 0x6d, 0x92, 0xb2, 0x14, 0x56, 0xcf,
	0xe2, 0x69, 0xe1, 0x91, 0x2c, 0xaf, 0x5f, 0x85, 0xf2, 0xe4, 0xcd, 0x26, 0xbf, 0x3d, 0x91, 0x5f,
	0xed, 0x9e, 0xa7, 0x12, 0xb5, 0x2d, 0xc5, 0x47, 0x4f, 0xad, 0xfb, 0x76, 0x9e, 0xa2, 0xb6, 0x48,
	0x51, 0xbb, 0x49, 0x51, 0x5b, 0xa5, 0x08, 0xff, 0x52, 0x84, 0xaf, 0x19, 0xc2, 0xf7, 0x0c, 0xe1,
	0x67, 0x86, 0x70, 0x9d, 0x21, 0xcc, 0x33, 0x84, 0x45, 0x86, 0xf0, 0x3b, 0x43, 0xf8, 0x93, 0xa1,
	0xb6, 0xca, 0x10, 0xbe, 0x2d, 0x51, 0xbb, 0x5e, 0x22, 0x2c, 0x96, 0xa8, 0xdd, 0x2c, 0x51, 0x1b,
	0x96, 0xc5, 0x8f, 0xde, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xd8, 0x47, 0xd0, 0xc0, 0x04,
	0x00, 0x00,
}

func (this *CastTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CastTarget)
	if !ok {
		that2, ok := that.(CastTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.CellID.Equal(that1.CellID) {
		return false
	}
	if !this.Rect.Equal(&that1.Rect) {
		return false
	}
	if !this.Circle.Equal(&that1.Circle) {
		return false
	}
	return true
}
func (this *Cast) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cast)
	if !ok {
		that2, ok := that.(Cast)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AbilityID.Equal(that1.AbilityID) {
		return false
	}
	if len(this.Targets) != len(that1.Targets) {
		return false
	}
	for i := range this.Targets {
		a := this.Targets[i]
		b := that1.Targets[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if this.At != that1.At {
		return false
	}
	return true
}
func (this *CastEffect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CastEffect)
	if !ok {
		that2, ok := that.(CastEffect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AbilityID.Equal(that1.AbilityID) {
		return false
	}
	if !this.EffectID.Equal(that1.EffectID) {
		return false
	}
	if !this.CurrentID.Equal(that1.CurrentID) {
		return false
	}
	if !this.Effect.Equal(&that1.Effect) {
		return false
	}
	if len(this.Targets) != len(that1.Targets) {
		return false
	}
	for i := range this.Targets {
		a := this.Targets[i]
		b := that1.Targets[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *CastTarget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ability.CastTarget{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "CellID: "+fmt.Sprintf("%#v", this.CellID)+",\n")
	s = append(s, "Rect: "+strings.Replace(this.Rect.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Circle: "+strings.Replace(this.Circle.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cast) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ability.Cast{")
	s = append(s, "AbilityID: "+fmt.Sprintf("%#v", this.AbilityID)+",\n")
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]CastTarget{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%#v: %#v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	if this.Targets != nil {
		s = append(s, "Targets: "+mapStringForTargets+",\n")
	}
	s = append(s, "At: "+fmt.Sprintf("%#v", this.At)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CastEffect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ability.CastEffect{")
	s = append(s, "AbilityID: "+fmt.Sprintf("%#v", this.AbilityID)+",\n")
	s = append(s, "EffectID: "+fmt.Sprintf("%#v", this.EffectID)+",\n")
	s = append(s, "CurrentID: "+fmt.Sprintf("%#v", this.CurrentID)+",\n")
	s = append(s, "Effect: "+strings.Replace(this.Effect.GoString(), `&`, ``, 1)+",\n")
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]CastTarget{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%#v: %#v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	if this.Targets != nil {
		s = append(s, "Targets: "+mapStringForTargets+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCast(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CastTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CastTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CastTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Circle.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Rect.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CellID.Size()
		i -= size
		if _, err := m.CellID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Cast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cast) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cast) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.At != 0 {
		i = encodeVarintCast(dAtA, i, uint64(m.At))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Targets) > 0 {
		for k := range m.Targets {
			v := m.Targets[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCast(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCast(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCast(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.AbilityID.Size()
		i -= size
		if _, err := m.AbilityID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CastEffect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CastEffect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CastEffect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for k := range m.Targets {
			v := m.Targets[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCast(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCast(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCast(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.Effect.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CurrentID.Size()
		i -= size
		if _, err := m.CurrentID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.EffectID.Size()
		i -= size
		if _, err := m.EffectID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.AbilityID.Size()
		i -= size
		if _, err := m.AbilityID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCast(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCast(dAtA []byte, offset int, v uint64) int {
	offset -= sovCast(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedCastTarget(r randyCast, easy bool) *CastTarget {
	this := &CastTarget{}
	v1 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.ID = *v1
	v2 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.CellID = *v2
	v3 := geometry.NewPopulatedRect(r, easy)
	this.Rect = *v3
	v4 := geometry.NewPopulatedCircle(r, easy)
	this.Circle = *v4
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCast(r randyCast, easy bool) *Cast {
	this := &Cast{}
	v5 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.AbilityID = *v5
	if r.Intn(5) != 0 {
		v6 := r.Intn(10)
		this.Targets = make(map[string]CastTarget)
		for i := 0; i < v6; i++ {
			this.Targets[randStringCast(r)] = *NewPopulatedCastTarget(r, easy)
		}
	}
	this.At = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.At *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCastEffect(r randyCast, easy bool) *CastEffect {
	this := &CastEffect{}
	v7 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.AbilityID = *v7
	v8 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.EffectID = *v8
	v9 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.CurrentID = *v9
	v10 := NewPopulatedEffect(r, easy)
	this.Effect = *v10
	if r.Intn(5) != 0 {
		v11 := r.Intn(10)
		this.Targets = make(map[string]CastTarget)
		for i := 0; i < v11; i++ {
			this.Targets[randStringCast(r)] = *NewPopulatedCastTarget(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyCast interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCast(r randyCast) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCast(r randyCast) string {
	v12 := r.Intn(100)
	tmps := make([]rune, v12)
	for i := 0; i < v12; i++ {
		tmps[i] = randUTF8RuneCast(r)
	}
	return string(tmps)
}
func randUnrecognizedCast(r randyCast, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCast(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCast(dAtA []byte, r randyCast, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCast(dAtA, uint64(key))
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		dAtA = encodeVarintPopulateCast(dAtA, uint64(v13))
	case 1:
		dAtA = encodeVarintPopulateCast(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCast(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCast(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCast(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCast(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CastTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovCast(uint64(l))
	l = m.CellID.Size()
	n += 1 + l + sovCast(uint64(l))
	l = m.Rect.Size()
	n += 1 + l + sovCast(uint64(l))
	l = m.Circle.Size()
	n += 1 + l + sovCast(uint64(l))
	return n
}

func (m *Cast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AbilityID.Size()
	n += 1 + l + sovCast(uint64(l))
	if len(m.Targets) > 0 {
		for k, v := range m.Targets {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovCast(uint64(len(k))) + 1 + l + sovCast(uint64(l))
			n += mapEntrySize + 1 + sovCast(uint64(mapEntrySize))
		}
	}
	if m.At != 0 {
		n += 1 + sovCast(uint64(m.At))
	}
	return n
}

func (m *CastEffect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AbilityID.Size()
	n += 1 + l + sovCast(uint64(l))
	l = m.EffectID.Size()
	n += 1 + l + sovCast(uint64(l))
	l = m.CurrentID.Size()
	n += 1 + l + sovCast(uint64(l))
	l = m.Effect.Size()
	n += 1 + l + sovCast(uint64(l))
	if len(m.Targets) > 0 {
		for k, v := range m.Targets {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovCast(uint64(len(k))) + 1 + l + sovCast(uint64(l))
			n += mapEntrySize + 1 + sovCast(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCast(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCast(x uint64) (n int) {
	return sovCast(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CastTarget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CastTarget{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`CellID:` + fmt.Sprintf("%v", this.CellID) + `,`,
		`Rect:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Rect), "Rect", "geometry.Rect", 1), `&`, ``, 1) + `,`,
		`Circle:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Circle), "Circle", "geometry.Circle", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cast) String() string {
	if this == nil {
		return "nil"
	}
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]CastTarget{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%v: %v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	s := strings.Join([]string{`&Cast{`,
		`AbilityID:` + fmt.Sprintf("%v", this.AbilityID) + `,`,
		`Targets:` + mapStringForTargets + `,`,
		`At:` + fmt.Sprintf("%v", this.At) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CastEffect) String() string {
	if this == nil {
		return "nil"
	}
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]CastTarget{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%v: %v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	s := strings.Join([]string{`&CastEffect{`,
		`AbilityID:` + fmt.Sprintf("%v", this.AbilityID) + `,`,
		`EffectID:` + fmt.Sprintf("%v", this.EffectID) + `,`,
		`CurrentID:` + fmt.Sprintf("%v", this.CurrentID) + `,`,
		`Effect:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Effect), "Effect", "Effect", 1), `&`, ``, 1) + `,`,
		`Targets:` + mapStringForTargets + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCast(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CastTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CastTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CastTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCast
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCast
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CellID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCast
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Circle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCast
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Circle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCast
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AbilityID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCast
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Targets == nil {
				m.Targets = make(map[string]CastTarget)
			}
			var mapkey string
			mapvalue := &CastTarget{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCast
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCast
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCast
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCast
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CastTarget{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCast(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCast
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Targets[mapkey] = *mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CastEffect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CastEffect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CastEffect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCast
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AbilityID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCast
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCast
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCast
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Effect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCast
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCast
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Targets == nil {
				m.Targets = make(map[string]CastTarget)
			}
			var mapkey string
			mapvalue := &CastTarget{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCast
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCast
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCast
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCast
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CastTarget{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCast(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCast
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Targets[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCast(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCast
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCast
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCast
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCast
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCast        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCast          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCast = fmt.Errorf("proto: unexpected end of group")
)
