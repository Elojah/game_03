// source: github.com/elojah/game_03/pkg/ability/ability.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('../../../../../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
var github_com_elojah_game_03_pkg_geometry_geometry_pb = require('../../../../../github.com/elojah/game_03/pkg/geometry/geometry_pb.js');
goog.object.extend(proto, github_com_elojah_game_03_pkg_geometry_geometry_pb);
goog.exportSymbol('proto.ability.Ability', null, global);
goog.exportSymbol('proto.ability.Component', null, global);
goog.exportSymbol('proto.ability.Effect', null, global);
goog.exportSymbol('proto.ability.Element', null, global);
goog.exportSymbol('proto.ability.Target', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.Target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Target.displayName = 'proto.ability.Target';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Effect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.Effect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Effect.displayName = 'proto.ability.Effect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Component = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ability.Component.repeatedFields_, null);
};
goog.inherits(proto.ability.Component, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Component.displayName = 'proto.ability.Component';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Ability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ability.Ability.repeatedFields_, null);
};
goog.inherits(proto.ability.Ability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Ability.displayName = 'proto.ability.Ability';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Target.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Target} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Target.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    rect: (f = msg.getRect()) && github_com_elojah_game_03_pkg_geometry_geometry_pb.Rect.toObject(includeInstance, f),
    circle: (f = msg.getCircle()) && github_com_elojah_game_03_pkg_geometry_geometry_pb.Circle.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Target}
 */
proto.ability.Target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Target;
  return proto.ability.Target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Target}
 */
proto.ability.Target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new github_com_elojah_game_03_pkg_geometry_geometry_pb.Rect;
      reader.readMessage(value,github_com_elojah_game_03_pkg_geometry_geometry_pb.Rect.deserializeBinaryFromReader);
      msg.setRect(value);
      break;
    case 3:
      var value = new github_com_elojah_game_03_pkg_geometry_geometry_pb.Circle;
      reader.readMessage(value,github_com_elojah_game_03_pkg_geometry_geometry_pb.Circle.deserializeBinaryFromReader);
      msg.setCircle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Target.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Target} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Target.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRect();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_elojah_game_03_pkg_geometry_geometry_pb.Rect.serializeBinaryToWriter
    );
  }
  f = message.getCircle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_elojah_game_03_pkg_geometry_geometry_pb.Circle.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Target.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.ability.Target.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.ability.Target.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Target} returns this
 */
proto.ability.Target.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional geometry.Rect Rect = 2;
 * @return {?proto.geometry.Rect}
 */
proto.ability.Target.prototype.getRect = function() {
  return /** @type{?proto.geometry.Rect} */ (
    jspb.Message.getWrapperField(this, github_com_elojah_game_03_pkg_geometry_geometry_pb.Rect, 2));
};


/**
 * @param {?proto.geometry.Rect|undefined} value
 * @return {!proto.ability.Target} returns this
*/
proto.ability.Target.prototype.setRect = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Target} returns this
 */
proto.ability.Target.prototype.clearRect = function() {
  return this.setRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Target.prototype.hasRect = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional geometry.Circle Circle = 3;
 * @return {?proto.geometry.Circle}
 */
proto.ability.Target.prototype.getCircle = function() {
  return /** @type{?proto.geometry.Circle} */ (
    jspb.Message.getWrapperField(this, github_com_elojah_game_03_pkg_geometry_geometry_pb.Circle, 3));
};


/**
 * @param {?proto.geometry.Circle|undefined} value
 * @return {!proto.ability.Target} returns this
*/
proto.ability.Target.prototype.setCircle = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Target} returns this
 */
proto.ability.Target.prototype.clearCircle = function() {
  return this.setCircle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Target.prototype.hasCircle = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Effect.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Effect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Effect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Effect.toObject = function(includeInstance, msg) {
  var f, obj = {
    stat: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    element: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tickrate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Effect}
 */
proto.ability.Effect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Effect;
  return proto.ability.Effect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Effect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Effect}
 */
proto.ability.Effect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!proto.ability.Element} */ (reader.readEnum());
      msg.setElement(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTickrate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Effect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Effect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Effect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Effect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStat();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getElement();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTickrate();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string Stat = 1;
 * @return {string}
 */
proto.ability.Effect.prototype.getStat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setStat = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 Value = 2;
 * @return {number}
 */
proto.ability.Effect.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Element Element = 3;
 * @return {!proto.ability.Element}
 */
proto.ability.Effect.prototype.getElement = function() {
  return /** @type {!proto.ability.Element} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ability.Element} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setElement = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int64 TickRate = 4;
 * @return {number}
 */
proto.ability.Effect.prototype.getTickrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setTickrate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 Duration = 5;
 * @return {number}
 */
proto.ability.Effect.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ability.Component.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Component.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Component.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Component} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Component.toObject = function(includeInstance, msg) {
  var f, obj = {
    casttime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    manacost: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cooldown: jspb.Message.getFieldWithDefault(msg, 3, 0),
    targetsList: jspb.Message.toObjectList(msg.getTargetsList(),
    proto.ability.Target.toObject, includeInstance),
    effectsList: jspb.Message.toObjectList(msg.getEffectsList(),
    proto.ability.Effect.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Component}
 */
proto.ability.Component.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Component;
  return proto.ability.Component.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Component} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Component}
 */
proto.ability.Component.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCasttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setManacost(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCooldown(value);
      break;
    case 4:
      var value = new proto.ability.Target;
      reader.readMessage(value,proto.ability.Target.deserializeBinaryFromReader);
      msg.addTargets(value);
      break;
    case 5:
      var value = new proto.ability.Effect;
      reader.readMessage(value,proto.ability.Effect.deserializeBinaryFromReader);
      msg.addEffects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Component.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Component.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Component} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Component.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCasttime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getManacost();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCooldown();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ability.Target.serializeBinaryToWriter
    );
  }
  f = message.getEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ability.Effect.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 CastTime = 1;
 * @return {number}
 */
proto.ability.Component.prototype.getCasttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Component} returns this
 */
proto.ability.Component.prototype.setCasttime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ManaCost = 2;
 * @return {number}
 */
proto.ability.Component.prototype.getManacost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Component} returns this
 */
proto.ability.Component.prototype.setManacost = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 Cooldown = 3;
 * @return {number}
 */
proto.ability.Component.prototype.getCooldown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Component} returns this
 */
proto.ability.Component.prototype.setCooldown = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Target Targets = 4;
 * @return {!Array<!proto.ability.Target>}
 */
proto.ability.Component.prototype.getTargetsList = function() {
  return /** @type{!Array<!proto.ability.Target>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ability.Target, 4));
};


/**
 * @param {!Array<!proto.ability.Target>} value
 * @return {!proto.ability.Component} returns this
*/
proto.ability.Component.prototype.setTargetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ability.Target=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ability.Target}
 */
proto.ability.Component.prototype.addTargets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ability.Target, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ability.Component} returns this
 */
proto.ability.Component.prototype.clearTargetsList = function() {
  return this.setTargetsList([]);
};


/**
 * repeated Effect Effects = 5;
 * @return {!Array<!proto.ability.Effect>}
 */
proto.ability.Component.prototype.getEffectsList = function() {
  return /** @type{!Array<!proto.ability.Effect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ability.Effect, 5));
};


/**
 * @param {!Array<!proto.ability.Effect>} value
 * @return {!proto.ability.Component} returns this
*/
proto.ability.Component.prototype.setEffectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ability.Effect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ability.Effect}
 */
proto.ability.Component.prototype.addEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ability.Effect, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ability.Component} returns this
 */
proto.ability.Component.prototype.clearEffectsList = function() {
  return this.setEffectsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ability.Ability.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Ability.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Ability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Ability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Ability.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: msg.getIcon_asB64(),
    animation: msg.getAnimation_asB64(),
    componentsList: jspb.Message.toObjectList(msg.getComponentsList(),
    proto.ability.Component.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Ability}
 */
proto.ability.Ability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Ability;
  return proto.ability.Ability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Ability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Ability}
 */
proto.ability.Ability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIcon(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAnimation(value);
      break;
    case 5:
      var value = new proto.ability.Component;
      reader.readMessage(value,proto.ability.Component.deserializeBinaryFromReader);
      msg.addComponents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Ability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Ability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Ability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Ability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAnimation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getComponentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ability.Component.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Ability.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.ability.Ability.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.ability.Ability.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.ability.Ability.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes Icon = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Ability.prototype.getIcon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes Icon = 3;
 * This is a type-conversion wrapper around `getIcon()`
 * @return {string}
 */
proto.ability.Ability.prototype.getIcon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIcon()));
};


/**
 * optional bytes Icon = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIcon()`
 * @return {!Uint8Array}
 */
proto.ability.Ability.prototype.getIcon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIcon()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.setIcon = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes Animation = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Ability.prototype.getAnimation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Animation = 4;
 * This is a type-conversion wrapper around `getAnimation()`
 * @return {string}
 */
proto.ability.Ability.prototype.getAnimation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAnimation()));
};


/**
 * optional bytes Animation = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAnimation()`
 * @return {!Uint8Array}
 */
proto.ability.Ability.prototype.getAnimation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAnimation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.setAnimation = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated Component Components = 5;
 * @return {!Array<!proto.ability.Component>}
 */
proto.ability.Ability.prototype.getComponentsList = function() {
  return /** @type{!Array<!proto.ability.Component>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ability.Component, 5));
};


/**
 * @param {!Array<!proto.ability.Component>} value
 * @return {!proto.ability.Ability} returns this
*/
proto.ability.Ability.prototype.setComponentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ability.Component=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ability.Component}
 */
proto.ability.Ability.prototype.addComponents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ability.Component, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.clearComponentsList = function() {
  return this.setComponentsList([]);
};


/**
 * @enum {number}
 */
proto.ability.Element = {
  FIRE: 0,
  WATER: 1,
  AIR: 2,
  EARTH: 3,
  LIGHT: 4,
  DARK: 5,
  TIME: 6
};

goog.object.extend(exports, proto.ability);
