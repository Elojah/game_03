// source: github.com/elojah/game_03/pkg/ability/ability.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('../../../../../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
var github_com_elojah_game_03_pkg_entity_entity_pb = require('../../../../../github.com/elojah/game_03/pkg/entity/entity_pb.js');
goog.object.extend(proto, github_com_elojah_game_03_pkg_entity_entity_pb);
goog.exportSymbol('proto.ability.A', null, global);
goog.exportSymbol('proto.ability.AbilityModifier', null, global);
goog.exportSymbol('proto.ability.Amount', null, global);
goog.exportSymbol('proto.ability.Effect', null, global);
goog.exportSymbol('proto.ability.EffectModifier', null, global);
goog.exportSymbol('proto.ability.Move', null, global);
goog.exportSymbol('proto.ability.Operator', null, global);
goog.exportSymbol('proto.ability.StackRules', null, global);
goog.exportSymbol('proto.ability.Target', null, global);
goog.exportSymbol('proto.ability.TargetType', null, global);
goog.exportSymbol('proto.ability.Trigger', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.Target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Target.displayName = 'proto.ability.Target';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.AbilityModifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.AbilityModifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.AbilityModifier.displayName = 'proto.ability.AbilityModifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.EffectModifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.EffectModifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.EffectModifier.displayName = 'proto.ability.EffectModifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Amount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.Amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Amount.displayName = 'proto.ability.Amount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Trigger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.Trigger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Trigger.displayName = 'proto.ability.Trigger';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.StackRules = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.StackRules, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.StackRules.displayName = 'proto.ability.StackRules';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Effect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.Effect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Effect.displayName = 'proto.ability.Effect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.A = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.A, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.A.displayName = 'proto.ability.A';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Target.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Target} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Target.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    range: jspb.Message.getFieldWithDefault(msg, 2, 0),
    radius: jspb.Message.getFieldWithDefault(msg, 3, 0),
    width: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    move: jspb.Message.getFieldWithDefault(msg, 6, 0),
    positiontargettype: jspb.Message.getFieldWithDefault(msg, 7, 0),
    positiontargetid: msg.getPositiontargetid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Target}
 */
proto.ability.Target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Target;
  return proto.ability.Target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Target}
 */
proto.ability.Target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ability.TargetType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRange(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRadius(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {!proto.ability.Move} */ (reader.readEnum());
      msg.setMove(value);
      break;
    case 7:
      var value = /** @type {!proto.ability.TargetType} */ (reader.readEnum());
      msg.setPositiontargettype(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPositiontargetid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Target.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Target} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Target.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRange();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRadius();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMove();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getPositiontargettype();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getPositiontargetid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional TargetType Type = 1;
 * @return {!proto.ability.TargetType}
 */
proto.ability.Target.prototype.getType = function() {
  return /** @type {!proto.ability.TargetType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ability.TargetType} value
 * @return {!proto.ability.Target} returns this
 */
proto.ability.Target.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 Range = 2;
 * @return {number}
 */
proto.ability.Target.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Target} returns this
 */
proto.ability.Target.prototype.setRange = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 Radius = 3;
 * @return {number}
 */
proto.ability.Target.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Target} returns this
 */
proto.ability.Target.prototype.setRadius = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 Width = 4;
 * @return {number}
 */
proto.ability.Target.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Target} returns this
 */
proto.ability.Target.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 Height = 5;
 * @return {number}
 */
proto.ability.Target.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Target} returns this
 */
proto.ability.Target.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Move Move = 6;
 * @return {!proto.ability.Move}
 */
proto.ability.Target.prototype.getMove = function() {
  return /** @type {!proto.ability.Move} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.ability.Move} value
 * @return {!proto.ability.Target} returns this
 */
proto.ability.Target.prototype.setMove = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional TargetType PositionTargetType = 7;
 * @return {!proto.ability.TargetType}
 */
proto.ability.Target.prototype.getPositiontargettype = function() {
  return /** @type {!proto.ability.TargetType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.ability.TargetType} value
 * @return {!proto.ability.Target} returns this
 */
proto.ability.Target.prototype.setPositiontargettype = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional bytes PositionTargetID = 8;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Target.prototype.getPositiontargetid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes PositionTargetID = 8;
 * This is a type-conversion wrapper around `getPositiontargetid()`
 * @return {string}
 */
proto.ability.Target.prototype.getPositiontargetid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPositiontargetid()));
};


/**
 * optional bytes PositionTargetID = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPositiontargetid()`
 * @return {!Uint8Array}
 */
proto.ability.Target.prototype.getPositiontargetid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPositiontargetid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Target} returns this
 */
proto.ability.Target.prototype.setPositiontargetid = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.AbilityModifier.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.AbilityModifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.AbilityModifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.AbilityModifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    cancel: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    casttime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    manacost: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cooldown: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.AbilityModifier}
 */
proto.ability.AbilityModifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.AbilityModifier;
  return proto.ability.AbilityModifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.AbilityModifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.AbilityModifier}
 */
proto.ability.AbilityModifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCancel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCasttime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setManacost(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCooldown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.AbilityModifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.AbilityModifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.AbilityModifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.AbilityModifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCancel();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCasttime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getManacost();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCooldown();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional bool Cancel = 1;
 * @return {boolean}
 */
proto.ability.AbilityModifier.prototype.getCancel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ability.AbilityModifier} returns this
 */
proto.ability.AbilityModifier.prototype.setCancel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 CastTime = 2;
 * @return {number}
 */
proto.ability.AbilityModifier.prototype.getCasttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.AbilityModifier} returns this
 */
proto.ability.AbilityModifier.prototype.setCasttime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 ManaCost = 3;
 * @return {number}
 */
proto.ability.AbilityModifier.prototype.getManacost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.AbilityModifier} returns this
 */
proto.ability.AbilityModifier.prototype.setManacost = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 Cooldown = 4;
 * @return {number}
 */
proto.ability.AbilityModifier.prototype.getCooldown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.AbilityModifier} returns this
 */
proto.ability.AbilityModifier.prototype.setCooldown = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.EffectModifier.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.EffectModifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.EffectModifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.EffectModifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectid: msg.getEffectid_asB64(),
    cancel: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    stat: jspb.Message.getFieldWithDefault(msg, 3, 0),
    amount: (f = msg.getAmount()) && proto.ability.Amount.toObject(includeInstance, f),
    duration: jspb.Message.getFieldWithDefault(msg, 5, 0),
    delay: jspb.Message.getFieldWithDefault(msg, 6, 0),
    repeat: jspb.Message.getFieldWithDefault(msg, 7, 0),
    stackrules: (f = msg.getStackrules()) && proto.ability.StackRules.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.EffectModifier}
 */
proto.ability.EffectModifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.EffectModifier;
  return proto.ability.EffectModifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.EffectModifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.EffectModifier}
 */
proto.ability.EffectModifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEffectid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCancel(value);
      break;
    case 3:
      var value = /** @type {!proto.entity.Stat} */ (reader.readEnum());
      msg.setStat(value);
      break;
    case 4:
      var value = new proto.ability.Amount;
      reader.readMessage(value,proto.ability.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelay(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRepeat(value);
      break;
    case 8:
      var value = new proto.ability.StackRules;
      reader.readMessage(value,proto.ability.StackRules.deserializeBinaryFromReader);
      msg.setStackrules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.EffectModifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.EffectModifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.EffectModifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.EffectModifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEffectid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCancel();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getStat();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ability.Amount.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getDelay();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getRepeat();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getStackrules();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ability.StackRules.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes EffectID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ability.EffectModifier.prototype.getEffectid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes EffectID = 1;
 * This is a type-conversion wrapper around `getEffectid()`
 * @return {string}
 */
proto.ability.EffectModifier.prototype.getEffectid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEffectid()));
};


/**
 * optional bytes EffectID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEffectid()`
 * @return {!Uint8Array}
 */
proto.ability.EffectModifier.prototype.getEffectid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEffectid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.EffectModifier} returns this
 */
proto.ability.EffectModifier.prototype.setEffectid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool Cancel = 2;
 * @return {boolean}
 */
proto.ability.EffectModifier.prototype.getCancel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ability.EffectModifier} returns this
 */
proto.ability.EffectModifier.prototype.setCancel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional entity.Stat Stat = 3;
 * @return {!proto.entity.Stat}
 */
proto.ability.EffectModifier.prototype.getStat = function() {
  return /** @type {!proto.entity.Stat} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.entity.Stat} value
 * @return {!proto.ability.EffectModifier} returns this
 */
proto.ability.EffectModifier.prototype.setStat = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Amount Amount = 4;
 * @return {?proto.ability.Amount}
 */
proto.ability.EffectModifier.prototype.getAmount = function() {
  return /** @type{?proto.ability.Amount} */ (
    jspb.Message.getWrapperField(this, proto.ability.Amount, 4));
};


/**
 * @param {?proto.ability.Amount|undefined} value
 * @return {!proto.ability.EffectModifier} returns this
*/
proto.ability.EffectModifier.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.EffectModifier} returns this
 */
proto.ability.EffectModifier.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.EffectModifier.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 Duration = 5;
 * @return {number}
 */
proto.ability.EffectModifier.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.EffectModifier} returns this
 */
proto.ability.EffectModifier.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 Delay = 6;
 * @return {number}
 */
proto.ability.EffectModifier.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.EffectModifier} returns this
 */
proto.ability.EffectModifier.prototype.setDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 Repeat = 7;
 * @return {number}
 */
proto.ability.EffectModifier.prototype.getRepeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.EffectModifier} returns this
 */
proto.ability.EffectModifier.prototype.setRepeat = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional StackRules StackRules = 8;
 * @return {?proto.ability.StackRules}
 */
proto.ability.EffectModifier.prototype.getStackrules = function() {
  return /** @type{?proto.ability.StackRules} */ (
    jspb.Message.getWrapperField(this, proto.ability.StackRules, 8));
};


/**
 * @param {?proto.ability.StackRules|undefined} value
 * @return {!proto.ability.EffectModifier} returns this
*/
proto.ability.EffectModifier.prototype.setStackrules = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.EffectModifier} returns this
 */
proto.ability.EffectModifier.prototype.clearStackrules = function() {
  return this.setStackrules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.EffectModifier.prototype.hasStackrules = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Amount.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Amount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Amount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Amount.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    direct: jspb.Message.getFieldWithDefault(msg, 2, 0),
    target: (f = msg.getTarget()) && proto.ability.Target.toObject(includeInstance, f),
    stat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    percentage: jspb.Message.getFieldWithDefault(msg, 5, 0),
    effectid: msg.getEffectid_asB64(),
    statoutcome: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Amount}
 */
proto.ability.Amount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Amount;
  return proto.ability.Amount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Amount}
 */
proto.ability.Amount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDirect(value);
      break;
    case 3:
      var value = new proto.ability.Target;
      reader.readMessage(value,proto.ability.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 4:
      var value = /** @type {!proto.entity.Stat} */ (reader.readEnum());
      msg.setStat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPercentage(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEffectid(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatoutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Amount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Amount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDirect();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ability.Target.serializeBinaryToWriter
    );
  }
  f = message.getStat();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPercentage();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getEffectid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getStatoutcome();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Amount.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.ability.Amount.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.ability.Amount.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 Direct = 2;
 * @return {number}
 */
proto.ability.Amount.prototype.getDirect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.setDirect = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Target Target = 3;
 * @return {?proto.ability.Target}
 */
proto.ability.Amount.prototype.getTarget = function() {
  return /** @type{?proto.ability.Target} */ (
    jspb.Message.getWrapperField(this, proto.ability.Target, 3));
};


/**
 * @param {?proto.ability.Target|undefined} value
 * @return {!proto.ability.Amount} returns this
*/
proto.ability.Amount.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Amount.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional entity.Stat Stat = 4;
 * @return {!proto.entity.Stat}
 */
proto.ability.Amount.prototype.getStat = function() {
  return /** @type {!proto.entity.Stat} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.entity.Stat} value
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.setStat = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int64 Percentage = 5;
 * @return {number}
 */
proto.ability.Amount.prototype.getPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.setPercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes EffectID = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Amount.prototype.getEffectid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes EffectID = 6;
 * This is a type-conversion wrapper around `getEffectid()`
 * @return {string}
 */
proto.ability.Amount.prototype.getEffectid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEffectid()));
};


/**
 * optional bytes EffectID = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEffectid()`
 * @return {!Uint8Array}
 */
proto.ability.Amount.prototype.getEffectid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEffectid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.setEffectid = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bool StatOutcome = 7;
 * @return {boolean}
 */
proto.ability.Amount.prototype.getStatoutcome = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.setStatoutcome = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Trigger.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Trigger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Trigger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Trigger.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: (f = msg.getAmount()) && proto.ability.Amount.toObject(includeInstance, f),
    treshold: (f = msg.getTreshold()) && proto.ability.Amount.toObject(includeInstance, f),
    abilitymodifiersMap: (f = msg.getAbilitymodifiersMap()) ? f.toObject(includeInstance, proto.ability.AbilityModifier.toObject) : [],
    effectmodifiersMap: (f = msg.getEffectmodifiersMap()) ? f.toObject(includeInstance, proto.ability.EffectModifier.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Trigger}
 */
proto.ability.Trigger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Trigger;
  return proto.ability.Trigger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Trigger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Trigger}
 */
proto.ability.Trigger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ability.Operator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 2:
      var value = new proto.ability.Amount;
      reader.readMessage(value,proto.ability.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = new proto.ability.Amount;
      reader.readMessage(value,proto.ability.Amount.deserializeBinaryFromReader);
      msg.setTreshold(value);
      break;
    case 4:
      var value = msg.getAbilitymodifiersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ability.AbilityModifier.deserializeBinaryFromReader, "", new proto.ability.AbilityModifier());
         });
      break;
    case 5:
      var value = msg.getEffectmodifiersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ability.EffectModifier.deserializeBinaryFromReader, "", new proto.ability.EffectModifier());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Trigger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Trigger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Trigger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Trigger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ability.Amount.serializeBinaryToWriter
    );
  }
  f = message.getTreshold();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ability.Amount.serializeBinaryToWriter
    );
  }
  f = message.getAbilitymodifiersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ability.AbilityModifier.serializeBinaryToWriter);
  }
  f = message.getEffectmodifiersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ability.EffectModifier.serializeBinaryToWriter);
  }
};


/**
 * optional Operator Operator = 1;
 * @return {!proto.ability.Operator}
 */
proto.ability.Trigger.prototype.getOperator = function() {
  return /** @type {!proto.ability.Operator} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ability.Operator} value
 * @return {!proto.ability.Trigger} returns this
 */
proto.ability.Trigger.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Amount Amount = 2;
 * @return {?proto.ability.Amount}
 */
proto.ability.Trigger.prototype.getAmount = function() {
  return /** @type{?proto.ability.Amount} */ (
    jspb.Message.getWrapperField(this, proto.ability.Amount, 2));
};


/**
 * @param {?proto.ability.Amount|undefined} value
 * @return {!proto.ability.Trigger} returns this
*/
proto.ability.Trigger.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Trigger} returns this
 */
proto.ability.Trigger.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Trigger.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Amount Treshold = 3;
 * @return {?proto.ability.Amount}
 */
proto.ability.Trigger.prototype.getTreshold = function() {
  return /** @type{?proto.ability.Amount} */ (
    jspb.Message.getWrapperField(this, proto.ability.Amount, 3));
};


/**
 * @param {?proto.ability.Amount|undefined} value
 * @return {!proto.ability.Trigger} returns this
*/
proto.ability.Trigger.prototype.setTreshold = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Trigger} returns this
 */
proto.ability.Trigger.prototype.clearTreshold = function() {
  return this.setTreshold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Trigger.prototype.hasTreshold = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, AbilityModifier> AbilityModifiers = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ability.AbilityModifier>}
 */
proto.ability.Trigger.prototype.getAbilitymodifiersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ability.AbilityModifier>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.ability.AbilityModifier));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ability.Trigger} returns this
 */
proto.ability.Trigger.prototype.clearAbilitymodifiersMap = function() {
  this.getAbilitymodifiersMap().clear();
  return this;};


/**
 * map<string, EffectModifier> EffectModifiers = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ability.EffectModifier>}
 */
proto.ability.Trigger.prototype.getEffectmodifiersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ability.EffectModifier>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.ability.EffectModifier));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ability.Trigger} returns this
 */
proto.ability.Trigger.prototype.clearEffectmodifiersMap = function() {
  this.getEffectmodifiersMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.StackRules.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.StackRules.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.StackRules} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.StackRules.toObject = function(includeInstance, msg) {
  var f, obj = {
    stacks: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxstacks: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxduration: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.StackRules}
 */
proto.ability.StackRules.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.StackRules;
  return proto.ability.StackRules.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.StackRules} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.StackRules}
 */
proto.ability.StackRules.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStacks(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxstacks(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxduration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.StackRules.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.StackRules.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.StackRules} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.StackRules.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStacks();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMaxstacks();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMaxduration();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 Stacks = 1;
 * @return {number}
 */
proto.ability.StackRules.prototype.getStacks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.StackRules} returns this
 */
proto.ability.StackRules.prototype.setStacks = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 MaxStacks = 2;
 * @return {number}
 */
proto.ability.StackRules.prototype.getMaxstacks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.StackRules} returns this
 */
proto.ability.StackRules.prototype.setMaxstacks = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 MaxDuration = 3;
 * @return {number}
 */
proto.ability.StackRules.prototype.getMaxduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.StackRules} returns this
 */
proto.ability.StackRules.prototype.setMaxduration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Effect.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Effect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Effect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Effect.toObject = function(includeInstance, msg) {
  var f, obj = {
    stat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: (f = msg.getAmount()) && proto.ability.Amount.toObject(includeInstance, f),
    duration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    icon: msg.getIcon_asB64(),
    delay: jspb.Message.getFieldWithDefault(msg, 6, 0),
    repeat: jspb.Message.getFieldWithDefault(msg, 7, 0),
    stackrules: (f = msg.getStackrules()) && proto.ability.StackRules.toObject(includeInstance, f),
    targetsMap: (f = msg.getTargetsMap()) ? f.toObject(includeInstance, proto.ability.Target.toObject) : [],
    triggersMap: (f = msg.getTriggersMap()) ? f.toObject(includeInstance, proto.ability.Trigger.toObject) : [],
    effectsMap: (f = msg.getEffectsMap()) ? f.toObject(includeInstance, proto.ability.Effect.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Effect}
 */
proto.ability.Effect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Effect;
  return proto.ability.Effect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Effect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Effect}
 */
proto.ability.Effect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.entity.Stat} */ (reader.readEnum());
      msg.setStat(value);
      break;
    case 2:
      var value = new proto.ability.Amount;
      reader.readMessage(value,proto.ability.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIcon(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelay(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRepeat(value);
      break;
    case 8:
      var value = new proto.ability.StackRules;
      reader.readMessage(value,proto.ability.StackRules.deserializeBinaryFromReader);
      msg.setStackrules(value);
      break;
    case 9:
      var value = msg.getTargetsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ability.Target.deserializeBinaryFromReader, "", new proto.ability.Target());
         });
      break;
    case 10:
      var value = msg.getTriggersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ability.Trigger.deserializeBinaryFromReader, "", new proto.ability.Trigger());
         });
      break;
    case 11:
      var value = msg.getEffectsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ability.Effect.deserializeBinaryFromReader, "", new proto.ability.Effect());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Effect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Effect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Effect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Effect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStat();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ability.Amount.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getIcon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getDelay();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getRepeat();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getStackrules();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ability.StackRules.serializeBinaryToWriter
    );
  }
  f = message.getTargetsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ability.Target.serializeBinaryToWriter);
  }
  f = message.getTriggersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ability.Trigger.serializeBinaryToWriter);
  }
  f = message.getEffectsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ability.Effect.serializeBinaryToWriter);
  }
};


/**
 * optional entity.Stat Stat = 1;
 * @return {!proto.entity.Stat}
 */
proto.ability.Effect.prototype.getStat = function() {
  return /** @type {!proto.entity.Stat} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.entity.Stat} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setStat = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Amount Amount = 2;
 * @return {?proto.ability.Amount}
 */
proto.ability.Effect.prototype.getAmount = function() {
  return /** @type{?proto.ability.Amount} */ (
    jspb.Message.getWrapperField(this, proto.ability.Amount, 2));
};


/**
 * @param {?proto.ability.Amount|undefined} value
 * @return {!proto.ability.Effect} returns this
*/
proto.ability.Effect.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Effect.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 Duration = 4;
 * @return {number}
 */
proto.ability.Effect.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes Icon = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Effect.prototype.getIcon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes Icon = 5;
 * This is a type-conversion wrapper around `getIcon()`
 * @return {string}
 */
proto.ability.Effect.prototype.getIcon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIcon()));
};


/**
 * optional bytes Icon = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIcon()`
 * @return {!Uint8Array}
 */
proto.ability.Effect.prototype.getIcon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIcon()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setIcon = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional int64 Delay = 6;
 * @return {number}
 */
proto.ability.Effect.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 Repeat = 7;
 * @return {number}
 */
proto.ability.Effect.prototype.getRepeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setRepeat = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional StackRules StackRules = 8;
 * @return {?proto.ability.StackRules}
 */
proto.ability.Effect.prototype.getStackrules = function() {
  return /** @type{?proto.ability.StackRules} */ (
    jspb.Message.getWrapperField(this, proto.ability.StackRules, 8));
};


/**
 * @param {?proto.ability.StackRules|undefined} value
 * @return {!proto.ability.Effect} returns this
*/
proto.ability.Effect.prototype.setStackrules = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.clearStackrules = function() {
  return this.setStackrules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Effect.prototype.hasStackrules = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * map<string, Target> Targets = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ability.Target>}
 */
proto.ability.Effect.prototype.getTargetsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ability.Target>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.ability.Target));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.clearTargetsMap = function() {
  this.getTargetsMap().clear();
  return this;};


/**
 * map<string, Trigger> Triggers = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ability.Trigger>}
 */
proto.ability.Effect.prototype.getTriggersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ability.Trigger>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      proto.ability.Trigger));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.clearTriggersMap = function() {
  this.getTriggersMap().clear();
  return this;};


/**
 * map<string, Effect> Effects = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ability.Effect>}
 */
proto.ability.Effect.prototype.getEffectsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ability.Effect>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      proto.ability.Effect));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.clearEffectsMap = function() {
  this.getEffectsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.A.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.A.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.A} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.A.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: msg.getIcon_asB64(),
    animation: msg.getAnimation_asB64(),
    casttime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    manacost: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cooldown: jspb.Message.getFieldWithDefault(msg, 7, 0),
    effectsMap: (f = msg.getEffectsMap()) ? f.toObject(includeInstance, proto.ability.Effect.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.A}
 */
proto.ability.A.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.A;
  return proto.ability.A.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.A} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.A}
 */
proto.ability.A.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIcon(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAnimation(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCasttime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setManacost(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCooldown(value);
      break;
    case 8:
      var value = msg.getEffectsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ability.Effect.deserializeBinaryFromReader, "", new proto.ability.Effect());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.A.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.A.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.A} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.A.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAnimation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getCasttime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getManacost();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCooldown();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getEffectsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ability.Effect.serializeBinaryToWriter);
  }
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ability.A.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.ability.A.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.ability.A.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.A} returns this
 */
proto.ability.A.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.ability.A.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ability.A} returns this
 */
proto.ability.A.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes Icon = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ability.A.prototype.getIcon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes Icon = 3;
 * This is a type-conversion wrapper around `getIcon()`
 * @return {string}
 */
proto.ability.A.prototype.getIcon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIcon()));
};


/**
 * optional bytes Icon = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIcon()`
 * @return {!Uint8Array}
 */
proto.ability.A.prototype.getIcon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIcon()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.A} returns this
 */
proto.ability.A.prototype.setIcon = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes Animation = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ability.A.prototype.getAnimation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Animation = 4;
 * This is a type-conversion wrapper around `getAnimation()`
 * @return {string}
 */
proto.ability.A.prototype.getAnimation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAnimation()));
};


/**
 * optional bytes Animation = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAnimation()`
 * @return {!Uint8Array}
 */
proto.ability.A.prototype.getAnimation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAnimation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.A} returns this
 */
proto.ability.A.prototype.setAnimation = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 CastTime = 5;
 * @return {number}
 */
proto.ability.A.prototype.getCasttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.A} returns this
 */
proto.ability.A.prototype.setCasttime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 ManaCost = 6;
 * @return {number}
 */
proto.ability.A.prototype.getManacost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.A} returns this
 */
proto.ability.A.prototype.setManacost = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 Cooldown = 7;
 * @return {number}
 */
proto.ability.A.prototype.getCooldown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.A} returns this
 */
proto.ability.A.prototype.setCooldown = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * map<string, Effect> Effects = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ability.Effect>}
 */
proto.ability.A.prototype.getEffectsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ability.Effect>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.ability.Effect));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ability.A} returns this
 */
proto.ability.A.prototype.clearEffectsMap = function() {
  this.getEffectsMap().clear();
  return this;};


/**
 * @enum {number}
 */
proto.ability.TargetType = {
  NONETARGET: 0,
  SELF: 1,
  FOE: 3,
  CLOSESTSELF: 4,
  CLOSESTFOE: 5,
  RECT: 6,
  CIRCLE: 7
};

/**
 * @enum {number}
 */
proto.ability.Move = {
  NONEMOVE: 0,
  WALK: 1,
  TELEPORT: 2,
  PUSH: 3
};

/**
 * @enum {number}
 */
proto.ability.Operator = {
  NONEOPERATOR: 0,
  EQUAL: 1,
  NOTEQUAL: 2,
  GREATER: 3,
  LESSER: 4
};

goog.object.extend(exports, proto.ability);
