// source: github.com/elojah/game_03/pkg/ability/ability.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('../../../../../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
var github_com_elojah_game_03_pkg_geometry_geometry_pb = require('../../../../../github.com/elojah/game_03/pkg/geometry/geometry_pb.js');
goog.object.extend(proto, github_com_elojah_game_03_pkg_geometry_geometry_pb);
goog.exportSymbol('proto.ability.Ability', null, global);
goog.exportSymbol('proto.ability.Amount', null, global);
goog.exportSymbol('proto.ability.Component', null, global);
goog.exportSymbol('proto.ability.Effect', null, global);
goog.exportSymbol('proto.ability.Modifier', null, global);
goog.exportSymbol('proto.ability.Operator', null, global);
goog.exportSymbol('proto.ability.Stat', null, global);
goog.exportSymbol('proto.ability.Target', null, global);
goog.exportSymbol('proto.ability.Trigger', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Modifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.Modifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Modifier.displayName = 'proto.ability.Modifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Amount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ability.Amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Amount.displayName = 'proto.ability.Amount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Trigger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ability.Trigger.repeatedFields_, null);
};
goog.inherits(proto.ability.Trigger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Trigger.displayName = 'proto.ability.Trigger';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Effect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ability.Effect.repeatedFields_, null);
};
goog.inherits(proto.ability.Effect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Effect.displayName = 'proto.ability.Effect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Component = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ability.Component.repeatedFields_, null);
};
goog.inherits(proto.ability.Component, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Component.displayName = 'proto.ability.Component';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ability.Ability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ability.Ability.repeatedFields_, null);
};
goog.inherits(proto.ability.Ability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ability.Ability.displayName = 'proto.ability.Ability';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Modifier.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Modifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Modifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Modifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    casttime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    manacost: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cooldown: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    amount: (f = msg.getAmount()) && proto.ability.Amount.toObject(includeInstance, f),
    drain: (f = msg.getDrain()) && proto.ability.Amount.toObject(includeInstance, f),
    duration: jspb.Message.getFieldWithDefault(msg, 7, 0),
    delay: jspb.Message.getFieldWithDefault(msg, 8, 0),
    repeat: jspb.Message.getFieldWithDefault(msg, 9, 0),
    stacks: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Modifier}
 */
proto.ability.Modifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Modifier;
  return proto.ability.Modifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Modifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Modifier}
 */
proto.ability.Modifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCasttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setManacost(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCooldown(value);
      break;
    case 4:
      var value = /** @type {!proto.ability.Stat} */ (reader.readEnum());
      msg.setStat(value);
      break;
    case 5:
      var value = new proto.ability.Amount;
      reader.readMessage(value,proto.ability.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 6:
      var value = new proto.ability.Amount;
      reader.readMessage(value,proto.ability.Amount.deserializeBinaryFromReader);
      msg.setDrain(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelay(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRepeat(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStacks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Modifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Modifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Modifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Modifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCasttime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getManacost();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCooldown();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getStat();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ability.Amount.serializeBinaryToWriter
    );
  }
  f = message.getDrain();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ability.Amount.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getDelay();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getRepeat();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getStacks();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional int64 CastTime = 1;
 * @return {number}
 */
proto.ability.Modifier.prototype.getCasttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Modifier} returns this
 */
proto.ability.Modifier.prototype.setCasttime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ManaCost = 2;
 * @return {number}
 */
proto.ability.Modifier.prototype.getManacost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Modifier} returns this
 */
proto.ability.Modifier.prototype.setManacost = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 Cooldown = 3;
 * @return {number}
 */
proto.ability.Modifier.prototype.getCooldown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Modifier} returns this
 */
proto.ability.Modifier.prototype.setCooldown = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Stat Stat = 4;
 * @return {!proto.ability.Stat}
 */
proto.ability.Modifier.prototype.getStat = function() {
  return /** @type {!proto.ability.Stat} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ability.Stat} value
 * @return {!proto.ability.Modifier} returns this
 */
proto.ability.Modifier.prototype.setStat = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Amount Amount = 5;
 * @return {?proto.ability.Amount}
 */
proto.ability.Modifier.prototype.getAmount = function() {
  return /** @type{?proto.ability.Amount} */ (
    jspb.Message.getWrapperField(this, proto.ability.Amount, 5));
};


/**
 * @param {?proto.ability.Amount|undefined} value
 * @return {!proto.ability.Modifier} returns this
*/
proto.ability.Modifier.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Modifier} returns this
 */
proto.ability.Modifier.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Modifier.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Amount Drain = 6;
 * @return {?proto.ability.Amount}
 */
proto.ability.Modifier.prototype.getDrain = function() {
  return /** @type{?proto.ability.Amount} */ (
    jspb.Message.getWrapperField(this, proto.ability.Amount, 6));
};


/**
 * @param {?proto.ability.Amount|undefined} value
 * @return {!proto.ability.Modifier} returns this
*/
proto.ability.Modifier.prototype.setDrain = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Modifier} returns this
 */
proto.ability.Modifier.prototype.clearDrain = function() {
  return this.setDrain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Modifier.prototype.hasDrain = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 Duration = 7;
 * @return {number}
 */
proto.ability.Modifier.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Modifier} returns this
 */
proto.ability.Modifier.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 Delay = 8;
 * @return {number}
 */
proto.ability.Modifier.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Modifier} returns this
 */
proto.ability.Modifier.prototype.setDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 Repeat = 9;
 * @return {number}
 */
proto.ability.Modifier.prototype.getRepeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Modifier} returns this
 */
proto.ability.Modifier.prototype.setRepeat = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 Stacks = 10;
 * @return {number}
 */
proto.ability.Modifier.prototype.getStacks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Modifier} returns this
 */
proto.ability.Modifier.prototype.setStacks = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Amount.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Amount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Amount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Amount.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0),
    direct: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stat: jspb.Message.getFieldWithDefault(msg, 3, 0),
    percentage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    effectid: msg.getEffectid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Amount}
 */
proto.ability.Amount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Amount;
  return proto.ability.Amount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Amount}
 */
proto.ability.Amount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ability.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDirect(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPercentage(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEffectid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Amount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Amount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDirect();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getStat();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPercentage();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getEffectid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional Target Target = 1;
 * @return {!proto.ability.Target}
 */
proto.ability.Amount.prototype.getTarget = function() {
  return /** @type {!proto.ability.Target} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ability.Target} value
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.setTarget = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 Direct = 2;
 * @return {number}
 */
proto.ability.Amount.prototype.getDirect = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.setDirect = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 Stat = 3;
 * @return {number}
 */
proto.ability.Amount.prototype.getStat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.setStat = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 Percentage = 4;
 * @return {number}
 */
proto.ability.Amount.prototype.getPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.setPercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes EffectID = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Amount.prototype.getEffectid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes EffectID = 5;
 * This is a type-conversion wrapper around `getEffectid()`
 * @return {string}
 */
proto.ability.Amount.prototype.getEffectid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEffectid()));
};


/**
 * optional bytes EffectID = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEffectid()`
 * @return {!Uint8Array}
 */
proto.ability.Amount.prototype.getEffectid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEffectid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Amount} returns this
 */
proto.ability.Amount.prototype.setEffectid = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ability.Trigger.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Trigger.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Trigger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Trigger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Trigger.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: (f = msg.getAmount()) && proto.ability.Amount.toObject(includeInstance, f),
    treshold: (f = msg.getTreshold()) && proto.ability.Amount.toObject(includeInstance, f),
    consumetreshold: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    modifiersList: jspb.Message.toObjectList(msg.getModifiersList(),
    proto.ability.Modifier.toObject, includeInstance),
    trigger: (f = msg.getTrigger()) && proto.ability.Trigger.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Trigger}
 */
proto.ability.Trigger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Trigger;
  return proto.ability.Trigger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Trigger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Trigger}
 */
proto.ability.Trigger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ability.Operator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 2:
      var value = new proto.ability.Amount;
      reader.readMessage(value,proto.ability.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = new proto.ability.Amount;
      reader.readMessage(value,proto.ability.Amount.deserializeBinaryFromReader);
      msg.setTreshold(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConsumetreshold(value);
      break;
    case 5:
      var value = new proto.ability.Modifier;
      reader.readMessage(value,proto.ability.Modifier.deserializeBinaryFromReader);
      msg.addModifiers(value);
      break;
    case 6:
      var value = new proto.ability.Trigger;
      reader.readMessage(value,proto.ability.Trigger.deserializeBinaryFromReader);
      msg.setTrigger(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Trigger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Trigger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Trigger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Trigger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ability.Amount.serializeBinaryToWriter
    );
  }
  f = message.getTreshold();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ability.Amount.serializeBinaryToWriter
    );
  }
  f = message.getConsumetreshold();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getModifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ability.Modifier.serializeBinaryToWriter
    );
  }
  f = message.getTrigger();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ability.Trigger.serializeBinaryToWriter
    );
  }
};


/**
 * optional Operator Operator = 1;
 * @return {!proto.ability.Operator}
 */
proto.ability.Trigger.prototype.getOperator = function() {
  return /** @type {!proto.ability.Operator} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ability.Operator} value
 * @return {!proto.ability.Trigger} returns this
 */
proto.ability.Trigger.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Amount Amount = 2;
 * @return {?proto.ability.Amount}
 */
proto.ability.Trigger.prototype.getAmount = function() {
  return /** @type{?proto.ability.Amount} */ (
    jspb.Message.getWrapperField(this, proto.ability.Amount, 2));
};


/**
 * @param {?proto.ability.Amount|undefined} value
 * @return {!proto.ability.Trigger} returns this
*/
proto.ability.Trigger.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Trigger} returns this
 */
proto.ability.Trigger.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Trigger.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Amount Treshold = 3;
 * @return {?proto.ability.Amount}
 */
proto.ability.Trigger.prototype.getTreshold = function() {
  return /** @type{?proto.ability.Amount} */ (
    jspb.Message.getWrapperField(this, proto.ability.Amount, 3));
};


/**
 * @param {?proto.ability.Amount|undefined} value
 * @return {!proto.ability.Trigger} returns this
*/
proto.ability.Trigger.prototype.setTreshold = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Trigger} returns this
 */
proto.ability.Trigger.prototype.clearTreshold = function() {
  return this.setTreshold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Trigger.prototype.hasTreshold = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool ConsumeTreshold = 4;
 * @return {boolean}
 */
proto.ability.Trigger.prototype.getConsumetreshold = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ability.Trigger} returns this
 */
proto.ability.Trigger.prototype.setConsumetreshold = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated Modifier Modifiers = 5;
 * @return {!Array<!proto.ability.Modifier>}
 */
proto.ability.Trigger.prototype.getModifiersList = function() {
  return /** @type{!Array<!proto.ability.Modifier>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ability.Modifier, 5));
};


/**
 * @param {!Array<!proto.ability.Modifier>} value
 * @return {!proto.ability.Trigger} returns this
*/
proto.ability.Trigger.prototype.setModifiersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ability.Modifier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ability.Modifier}
 */
proto.ability.Trigger.prototype.addModifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ability.Modifier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ability.Trigger} returns this
 */
proto.ability.Trigger.prototype.clearModifiersList = function() {
  return this.setModifiersList([]);
};


/**
 * optional Trigger Trigger = 6;
 * @return {?proto.ability.Trigger}
 */
proto.ability.Trigger.prototype.getTrigger = function() {
  return /** @type{?proto.ability.Trigger} */ (
    jspb.Message.getWrapperField(this, proto.ability.Trigger, 6));
};


/**
 * @param {?proto.ability.Trigger|undefined} value
 * @return {!proto.ability.Trigger} returns this
*/
proto.ability.Trigger.prototype.setTrigger = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Trigger} returns this
 */
proto.ability.Trigger.prototype.clearTrigger = function() {
  return this.setTrigger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Trigger.prototype.hasTrigger = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ability.Effect.repeatedFields_ = [7,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Effect.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Effect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Effect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Effect.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    stat: jspb.Message.getFieldWithDefault(msg, 2, 0),
    position: (f = msg.getPosition()) && github_com_elojah_game_03_pkg_geometry_geometry_pb.Vec2.toObject(includeInstance, f),
    force: (f = msg.getForce()) && github_com_elojah_game_03_pkg_geometry_geometry_pb.Vec2.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && proto.ability.Amount.toObject(includeInstance, f),
    drain: (f = msg.getDrain()) && proto.ability.Amount.toObject(includeInstance, f),
    draintargetsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    duration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    icon: msg.getIcon_asB64(),
    stacks: jspb.Message.getFieldWithDefault(msg, 10, 0),
    maxstack: jspb.Message.getFieldWithDefault(msg, 11, 0),
    delay: jspb.Message.getFieldWithDefault(msg, 12, 0),
    repeat: jspb.Message.getFieldWithDefault(msg, 13, 0),
    triggersList: jspb.Message.toObjectList(msg.getTriggersList(),
    proto.ability.Trigger.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Effect}
 */
proto.ability.Effect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Effect;
  return proto.ability.Effect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Effect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Effect}
 */
proto.ability.Effect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.ability.Stat} */ (reader.readEnum());
      msg.setStat(value);
      break;
    case 3:
      var value = new github_com_elojah_game_03_pkg_geometry_geometry_pb.Vec2;
      reader.readMessage(value,github_com_elojah_game_03_pkg_geometry_geometry_pb.Vec2.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 4:
      var value = new github_com_elojah_game_03_pkg_geometry_geometry_pb.Vec2;
      reader.readMessage(value,github_com_elojah_game_03_pkg_geometry_geometry_pb.Vec2.deserializeBinaryFromReader);
      msg.setForce(value);
      break;
    case 5:
      var value = new proto.ability.Amount;
      reader.readMessage(value,proto.ability.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 6:
      var value = new proto.ability.Amount;
      reader.readMessage(value,proto.ability.Amount.deserializeBinaryFromReader);
      msg.setDrain(value);
      break;
    case 7:
      var value = /** @type {!Array<!proto.ability.Target>} */ (reader.readPackedEnum());
      msg.setDraintargetsList(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIcon(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStacks(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxstack(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelay(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRepeat(value);
      break;
    case 14:
      var value = new proto.ability.Trigger;
      reader.readMessage(value,proto.ability.Trigger.deserializeBinaryFromReader);
      msg.addTriggers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Effect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Effect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Effect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Effect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStat();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_elojah_game_03_pkg_geometry_geometry_pb.Vec2.serializeBinaryToWriter
    );
  }
  f = message.getForce();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_elojah_game_03_pkg_geometry_geometry_pb.Vec2.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ability.Amount.serializeBinaryToWriter
    );
  }
  f = message.getDrain();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ability.Amount.serializeBinaryToWriter
    );
  }
  f = message.getDraintargetsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      7,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getIcon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getStacks();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getMaxstack();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getDelay();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getRepeat();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getTriggersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.ability.Trigger.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Effect.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.ability.Effect.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.ability.Effect.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Stat Stat = 2;
 * @return {!proto.ability.Stat}
 */
proto.ability.Effect.prototype.getStat = function() {
  return /** @type {!proto.ability.Stat} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ability.Stat} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setStat = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional geometry.Vec2 Position = 3;
 * @return {?proto.geometry.Vec2}
 */
proto.ability.Effect.prototype.getPosition = function() {
  return /** @type{?proto.geometry.Vec2} */ (
    jspb.Message.getWrapperField(this, github_com_elojah_game_03_pkg_geometry_geometry_pb.Vec2, 3));
};


/**
 * @param {?proto.geometry.Vec2|undefined} value
 * @return {!proto.ability.Effect} returns this
*/
proto.ability.Effect.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Effect.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional geometry.Vec2 Force = 4;
 * @return {?proto.geometry.Vec2}
 */
proto.ability.Effect.prototype.getForce = function() {
  return /** @type{?proto.geometry.Vec2} */ (
    jspb.Message.getWrapperField(this, github_com_elojah_game_03_pkg_geometry_geometry_pb.Vec2, 4));
};


/**
 * @param {?proto.geometry.Vec2|undefined} value
 * @return {!proto.ability.Effect} returns this
*/
proto.ability.Effect.prototype.setForce = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.clearForce = function() {
  return this.setForce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Effect.prototype.hasForce = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Amount Amount = 5;
 * @return {?proto.ability.Amount}
 */
proto.ability.Effect.prototype.getAmount = function() {
  return /** @type{?proto.ability.Amount} */ (
    jspb.Message.getWrapperField(this, proto.ability.Amount, 5));
};


/**
 * @param {?proto.ability.Amount|undefined} value
 * @return {!proto.ability.Effect} returns this
*/
proto.ability.Effect.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Effect.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Amount Drain = 6;
 * @return {?proto.ability.Amount}
 */
proto.ability.Effect.prototype.getDrain = function() {
  return /** @type{?proto.ability.Amount} */ (
    jspb.Message.getWrapperField(this, proto.ability.Amount, 6));
};


/**
 * @param {?proto.ability.Amount|undefined} value
 * @return {!proto.ability.Effect} returns this
*/
proto.ability.Effect.prototype.setDrain = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.clearDrain = function() {
  return this.setDrain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ability.Effect.prototype.hasDrain = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Target DrainTargets = 7;
 * @return {!Array<!proto.ability.Target>}
 */
proto.ability.Effect.prototype.getDraintargetsList = function() {
  return /** @type {!Array<!proto.ability.Target>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<!proto.ability.Target>} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setDraintargetsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!proto.ability.Target} value
 * @param {number=} opt_index
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.addDraintargets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.clearDraintargetsList = function() {
  return this.setDraintargetsList([]);
};


/**
 * optional int64 Duration = 8;
 * @return {number}
 */
proto.ability.Effect.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes Icon = 9;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Effect.prototype.getIcon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes Icon = 9;
 * This is a type-conversion wrapper around `getIcon()`
 * @return {string}
 */
proto.ability.Effect.prototype.getIcon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIcon()));
};


/**
 * optional bytes Icon = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIcon()`
 * @return {!Uint8Array}
 */
proto.ability.Effect.prototype.getIcon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIcon()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setIcon = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional int64 Stacks = 10;
 * @return {number}
 */
proto.ability.Effect.prototype.getStacks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setStacks = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 MaxStack = 11;
 * @return {number}
 */
proto.ability.Effect.prototype.getMaxstack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setMaxstack = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 Delay = 12;
 * @return {number}
 */
proto.ability.Effect.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 Repeat = 13;
 * @return {number}
 */
proto.ability.Effect.prototype.getRepeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.setRepeat = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * repeated Trigger Triggers = 14;
 * @return {!Array<!proto.ability.Trigger>}
 */
proto.ability.Effect.prototype.getTriggersList = function() {
  return /** @type{!Array<!proto.ability.Trigger>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ability.Trigger, 14));
};


/**
 * @param {!Array<!proto.ability.Trigger>} value
 * @return {!proto.ability.Effect} returns this
*/
proto.ability.Effect.prototype.setTriggersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.ability.Trigger=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ability.Trigger}
 */
proto.ability.Effect.prototype.addTriggers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.ability.Trigger, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ability.Effect} returns this
 */
proto.ability.Effect.prototype.clearTriggersList = function() {
  return this.setTriggersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ability.Component.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Component.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Component.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Component} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Component.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    effectsList: jspb.Message.toObjectList(msg.getEffectsList(),
    proto.ability.Effect.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Component}
 */
proto.ability.Component.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Component;
  return proto.ability.Component.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Component} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Component}
 */
proto.ability.Component.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<!proto.ability.Target>} */ (reader.readPackedEnum());
      msg.setTargetsList(value);
      break;
    case 2:
      var value = new proto.ability.Effect;
      reader.readMessage(value,proto.ability.Effect.deserializeBinaryFromReader);
      msg.addEffects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Component.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Component.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Component} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Component.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ability.Effect.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Target Targets = 1;
 * @return {!Array<!proto.ability.Target>}
 */
proto.ability.Component.prototype.getTargetsList = function() {
  return /** @type {!Array<!proto.ability.Target>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.ability.Target>} value
 * @return {!proto.ability.Component} returns this
 */
proto.ability.Component.prototype.setTargetsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.ability.Target} value
 * @param {number=} opt_index
 * @return {!proto.ability.Component} returns this
 */
proto.ability.Component.prototype.addTargets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ability.Component} returns this
 */
proto.ability.Component.prototype.clearTargetsList = function() {
  return this.setTargetsList([]);
};


/**
 * repeated Effect Effects = 2;
 * @return {!Array<!proto.ability.Effect>}
 */
proto.ability.Component.prototype.getEffectsList = function() {
  return /** @type{!Array<!proto.ability.Effect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ability.Effect, 2));
};


/**
 * @param {!Array<!proto.ability.Effect>} value
 * @return {!proto.ability.Component} returns this
*/
proto.ability.Component.prototype.setEffectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ability.Effect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ability.Effect}
 */
proto.ability.Component.prototype.addEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ability.Effect, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ability.Component} returns this
 */
proto.ability.Component.prototype.clearEffectsList = function() {
  return this.setEffectsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ability.Ability.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ability.Ability.prototype.toObject = function(opt_includeInstance) {
  return proto.ability.Ability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ability.Ability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Ability.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: msg.getIcon_asB64(),
    animation: msg.getAnimation_asB64(),
    casttime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    manacost: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cooldown: jspb.Message.getFieldWithDefault(msg, 7, 0),
    componentsList: jspb.Message.toObjectList(msg.getComponentsList(),
    proto.ability.Component.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ability.Ability}
 */
proto.ability.Ability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ability.Ability;
  return proto.ability.Ability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ability.Ability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ability.Ability}
 */
proto.ability.Ability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIcon(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAnimation(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCasttime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setManacost(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCooldown(value);
      break;
    case 8:
      var value = new proto.ability.Component;
      reader.readMessage(value,proto.ability.Component.deserializeBinaryFromReader);
      msg.addComponents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ability.Ability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ability.Ability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ability.Ability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ability.Ability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAnimation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getCasttime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getManacost();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCooldown();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getComponentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.ability.Component.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Ability.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.ability.Ability.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.ability.Ability.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.ability.Ability.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes Icon = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Ability.prototype.getIcon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes Icon = 3;
 * This is a type-conversion wrapper around `getIcon()`
 * @return {string}
 */
proto.ability.Ability.prototype.getIcon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIcon()));
};


/**
 * optional bytes Icon = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIcon()`
 * @return {!Uint8Array}
 */
proto.ability.Ability.prototype.getIcon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIcon()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.setIcon = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes Animation = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ability.Ability.prototype.getAnimation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Animation = 4;
 * This is a type-conversion wrapper around `getAnimation()`
 * @return {string}
 */
proto.ability.Ability.prototype.getAnimation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAnimation()));
};


/**
 * optional bytes Animation = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAnimation()`
 * @return {!Uint8Array}
 */
proto.ability.Ability.prototype.getAnimation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAnimation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.setAnimation = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 CastTime = 5;
 * @return {number}
 */
proto.ability.Ability.prototype.getCasttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.setCasttime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 ManaCost = 6;
 * @return {number}
 */
proto.ability.Ability.prototype.getManacost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.setManacost = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 Cooldown = 7;
 * @return {number}
 */
proto.ability.Ability.prototype.getCooldown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.setCooldown = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated Component Components = 8;
 * @return {!Array<!proto.ability.Component>}
 */
proto.ability.Ability.prototype.getComponentsList = function() {
  return /** @type{!Array<!proto.ability.Component>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ability.Component, 8));
};


/**
 * @param {!Array<!proto.ability.Component>} value
 * @return {!proto.ability.Ability} returns this
*/
proto.ability.Ability.prototype.setComponentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ability.Component=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ability.Component}
 */
proto.ability.Ability.prototype.addComponents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ability.Component, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ability.Ability} returns this
 */
proto.ability.Ability.prototype.clearComponentsList = function() {
  return this.setComponentsList([]);
};


/**
 * @enum {number}
 */
proto.ability.Stat = {
  NONESTAT: 0,
  DAMAGE: 1,
  DEFENSE: 2,
  MOVESPEED: 4,
  CASTSPEED: 5,
  COOLDOWNREDUCTION: 6,
  HP: 7,
  MP: 8,
  MAXHP: 9,
  MAXMP: 10,
  DAMAGERECEIVED: 11
};

/**
 * @enum {number}
 */
proto.ability.Target = {
  NONETARGET: 0,
  SELF: 1,
  FOE: 3,
  CLOSESTSELF: 4,
  CLOSESTFOE: 5,
  RECT: 6,
  CIRCLE: 7
};

/**
 * @enum {number}
 */
proto.ability.Operator = {
  NONEOPERATOR: 0,
  EQUAL: 1,
  NOTEQUAL: 2,
  GREATER: 3,
  LESSER: 4
};

goog.object.extend(exports, proto.ability);
