// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/pkg/ability/ability.proto

package ability

import (
	fmt "fmt"
	geometry "github.com/elojah/game_03/pkg/geometry"
	github_com_elojah_game_03_pkg_ulid "github.com/elojah/game_03/pkg/ulid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Element int32

const (
	Fire  Element = 0
	Water Element = 1
	Air   Element = 2
	Earth Element = 3
	Light Element = 4
	Dark  Element = 5
	Time  Element = 6
)

var Element_name = map[int32]string{
	0: "Fire",
	1: "Water",
	2: "Air",
	3: "Earth",
	4: "Light",
	5: "Dark",
	6: "Time",
}

var Element_value = map[string]int32{
	"Fire":  0,
	"Water": 1,
	"Air":   2,
	"Earth": 3,
	"Light": 4,
	"Dark":  5,
	"Time":  6,
}

func (Element) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{0}
}

type Target struct {
	ID     github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"ID"`
	Rect   geometry.Rect                         `protobuf:"bytes,2,opt,name=Rect,proto3" json:"Rect"`
	Circle geometry.Circle                       `protobuf:"bytes,3,opt,name=Circle,proto3" json:"Circle"`
}

func (m *Target) Reset()      { *m = Target{} }
func (*Target) ProtoMessage() {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{0}
}
func (m *Target) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Target.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return m.Size()
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

type Effect struct {
	Stat     string  `protobuf:"bytes,1,opt,name=Stat,proto3" json:"Stat,omitempty"`
	Value    int64   `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Element  Element `protobuf:"varint,3,opt,name=Element,proto3,enum=ability.Element" json:"Element,omitempty"`
	TickRate int64   `protobuf:"varint,4,opt,name=TickRate,proto3" json:"TickRate,omitempty"`
	Duration int64   `protobuf:"varint,5,opt,name=Duration,proto3" json:"Duration,omitempty"`
}

func (m *Effect) Reset()      { *m = Effect{} }
func (*Effect) ProtoMessage() {}
func (*Effect) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{1}
}
func (m *Effect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Effect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Effect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Effect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Effect.Merge(m, src)
}
func (m *Effect) XXX_Size() int {
	return m.Size()
}
func (m *Effect) XXX_DiscardUnknown() {
	xxx_messageInfo_Effect.DiscardUnknown(m)
}

var xxx_messageInfo_Effect proto.InternalMessageInfo

type Component struct {
	CastTime int64    `protobuf:"varint,1,opt,name=CastTime,proto3" json:"CastTime,omitempty"`
	ManaCost int64    `protobuf:"varint,2,opt,name=ManaCost,proto3" json:"ManaCost,omitempty"`
	Cooldown int64    `protobuf:"varint,3,opt,name=Cooldown,proto3" json:"Cooldown,omitempty"`
	Targets  []Target `protobuf:"bytes,4,rep,name=Targets,proto3" json:"Targets"`
	Effects  []Effect `protobuf:"bytes,5,rep,name=Effects,proto3" json:"Effects"`
}

func (m *Component) Reset()      { *m = Component{} }
func (*Component) ProtoMessage() {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{2}
}
func (m *Component) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Component.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(m, src)
}
func (m *Component) XXX_Size() int {
	return m.Size()
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

type Ability struct {
	ID         github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"ID"`
	Name       string                                `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Icon       github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,3,opt,name=Icon,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"Icon"`
	Animation  github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,4,opt,name=Animation,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"Animation"`
	Components []Component                           `protobuf:"bytes,5,rep,name=Components,proto3" json:"Components"`
}

func (m *Ability) Reset()      { *m = Ability{} }
func (*Ability) ProtoMessage() {}
func (*Ability) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{3}
}
func (m *Ability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ability.Merge(m, src)
}
func (m *Ability) XXX_Size() int {
	return m.Size()
}
func (m *Ability) XXX_DiscardUnknown() {
	xxx_messageInfo_Ability.DiscardUnknown(m)
}

var xxx_messageInfo_Ability proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ability.Element", Element_name, Element_value)
	golang_proto.RegisterEnum("ability.Element", Element_name, Element_value)
	proto.RegisterType((*Target)(nil), "ability.Target")
	golang_proto.RegisterType((*Target)(nil), "ability.Target")
	proto.RegisterType((*Effect)(nil), "ability.Effect")
	golang_proto.RegisterType((*Effect)(nil), "ability.Effect")
	proto.RegisterType((*Component)(nil), "ability.Component")
	golang_proto.RegisterType((*Component)(nil), "ability.Component")
	proto.RegisterType((*Ability)(nil), "ability.Ability")
	golang_proto.RegisterType((*Ability)(nil), "ability.Ability")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_03/pkg/ability/ability.proto", fileDescriptor_23b56474bae35107)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/pkg/ability/ability.proto", fileDescriptor_23b56474bae35107)
}

var fileDescriptor_23b56474bae35107 = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0xc5, 0x4e, 0xd2, 0x5c, 0x51, 0xb1, 0x4e, 0x0c, 0x56, 0x87, 0x6b, 0x15, 0x09, 0x29,
	0xaa, 0x54, 0x1b, 0x25, 0x42, 0x62, 0x61, 0xc8, 0x2f, 0x44, 0xc4, 0x0f, 0x09, 0x13, 0xc1, 0x88,
	0x2e, 0xe9, 0xc5, 0x39, 0x62, 0xfb, 0x22, 0xe7, 0x22, 0xd4, 0x8d, 0x3f, 0x81, 0x89, 0x9d, 0x05,
	0xf1, 0x27, 0x30, 0x96, 0x2d, 0x63, 0xc6, 0x8a, 0xa1, 0x22, 0xce, 0xc2, 0xd8, 0x91, 0x11, 0xdd,
	0x9d, 0xed, 0x56, 0x0c, 0x95, 0x80, 0xc9, 0xef, 0x7b, 0xef, 0xfb, 0xde, 0x7b, 0xf7, 0xde, 0x33,
	0x6c, 0x05, 0x4c, 0x4c, 0x97, 0x23, 0x77, 0xcc, 0x23, 0x8f, 0x86, 0xfc, 0x2d, 0x99, 0x7a, 0x01,
	0x89, 0xe8, 0x9b, 0x7b, 0x2d, 0x6f, 0x3e, 0x0b, 0x3c, 0x32, 0x62, 0x21, 0x13, 0xa7, 0xf9, 0xd7,
	0x9d, 0x27, 0x5c, 0x70, 0x54, 0xcd, 0xe0, 0xfe, 0xf1, 0x35, 0x75, 0xc0, 0x03, 0xee, 0xa9, 0xf8,
	0x68, 0x39, 0x51, 0x48, 0x01, 0x65, 0x69, 0xdd, 0xfe, 0xfd, 0x9b, 0x8b, 0x05, 0x94, 0x47, 0x54,
	0x24, 0xa7, 0x85, 0xa1, 0x65, 0xf5, 0x4f, 0x00, 0x56, 0x86, 0x24, 0x09, 0xa8, 0x40, 0x0f, 0x61,
	0x69, 0xd0, 0x73, 0xc0, 0x21, 0x68, 0xdc, 0xea, 0x1c, 0xaf, 0x2e, 0x0e, 0x8c, 0xef, 0x17, 0x07,
	0x77, 0x6f, 0xce, 0xba, 0x0c, 0xd9, 0x89, 0x3b, 0xe8, 0xf9, 0xa5, 0x41, 0x0f, 0x35, 0xa0, 0xe5,
	0xd3, 0xb1, 0x70, 0x4a, 0x87, 0xa0, 0xb1, 0xdb, 0xdc, 0x73, 0x8b, 0x42, 0xd2, 0xdb, 0xb1, 0x64,
	0x42, 0x5f, 0x31, 0x90, 0x0b, 0x2b, 0x5d, 0x96, 0x8c, 0x43, 0xea, 0x98, 0x8a, 0x6b, 0x5f, 0x71,
	0xb5, 0x3f, 0x63, 0x67, 0xac, 0xfa, 0x47, 0x00, 0x2b, 0xfd, 0xc9, 0x44, 0x4a, 0x11, 0xb4, 0x5e,
	0x0a, 0x22, 0x54, 0x97, 0x35, 0x5f, 0xd9, 0xe8, 0x0e, 0x2c, 0xbf, 0x22, 0xe1, 0x92, 0xaa, 0xca,
	0xa6, 0xaf, 0x01, 0x3a, 0x82, 0xd5, 0x7e, 0x48, 0x23, 0x1a, 0x0b, 0x55, 0x65, 0xaf, 0x69, 0xbb,
	0xf9, 0xa0, 0x33, 0xbf, 0x9f, 0x13, 0xd0, 0x3e, 0xdc, 0x19, 0xb2, 0xf1, 0xcc, 0x27, 0x82, 0x3a,
	0x96, 0x4a, 0x52, 0x60, 0x19, 0xeb, 0x2d, 0x13, 0x22, 0x18, 0x8f, 0x9d, 0xb2, 0x8e, 0xe5, 0xb8,
	0xfe, 0x0d, 0xc0, 0x5a, 0x97, 0x47, 0x73, 0x1e, 0x67, 0x59, 0xba, 0x64, 0x21, 0x86, 0x2c, 0xa2,
	0xaa, 0x3f, 0xd3, 0x2f, 0xb0, 0x8c, 0x3d, 0x23, 0x31, 0xe9, 0xf2, 0x85, 0xc8, 0xda, 0x2c, 0xb0,
	0xd2, 0x71, 0x1e, 0x9e, 0xf0, 0x77, 0xb1, 0x6a, 0x55, 0xea, 0x32, 0x8c, 0x3c, 0x58, 0xd5, 0xdb,
	0x59, 0x38, 0xd6, 0xa1, 0xd9, 0xd8, 0x6d, 0xde, 0x2e, 0x5e, 0xa1, 0xfd, 0xd9, 0xa8, 0x72, 0x96,
	0x14, 0xe8, 0x51, 0x2d, 0x9c, 0xf2, 0x1f, 0x02, 0xed, 0xcf, 0x05, 0x19, 0xab, 0xfe, 0xb9, 0x04,
	0xab, 0x6d, 0xcd, 0xf8, 0xdf, 0x0b, 0x40, 0xd0, 0x7a, 0x4e, 0x22, 0xbd, 0x87, 0x9a, 0xaf, 0x6c,
	0xd4, 0x86, 0xd6, 0x60, 0xcc, 0xf5, 0xc3, 0xfe, 0x3a, 0xa9, 0x92, 0xa2, 0x27, 0xb0, 0xd6, 0x8e,
	0x59, 0xa4, 0x57, 0x60, 0xfd, 0x4b, 0x9e, 0x2b, 0x3d, 0x7a, 0x00, 0x61, 0xb1, 0xb1, 0x7c, 0x44,
	0xa8, 0x18, 0x51, 0x11, 0xca, 0xa6, 0x74, 0x8d, 0x7b, 0xf4, 0xa2, 0x38, 0x28, 0xb4, 0x03, 0xad,
	0x47, 0x2c, 0xa1, 0xb6, 0x81, 0x6a, 0xb0, 0xfc, 0x9a, 0x08, 0x9a, 0xd8, 0x00, 0x55, 0xa1, 0xd9,
	0x66, 0x89, 0x5d, 0x92, 0xbe, 0x3e, 0x49, 0xc4, 0xd4, 0x36, 0xa5, 0xf9, 0x94, 0x05, 0x53, 0x61,
	0x5b, 0x52, 0xd3, 0x23, 0xc9, 0xcc, 0x2e, 0x4b, 0x4b, 0xde, 0x84, 0x5d, 0xe9, 0x3c, 0x5e, 0x6d,
	0xb0, 0xb1, 0xde, 0x60, 0xe3, 0x7c, 0x83, 0x8d, 0xcb, 0x0d, 0x06, 0xbf, 0x36, 0x18, 0xbc, 0x4f,
	0x31, 0xf8, 0x92, 0x62, 0xf0, 0x35, 0xc5, 0xe0, 0x2c, 0xc5, 0x60, 0x95, 0x62, 0xb0, 0x4e, 0x31,
	0xf8, 0x91, 0x62, 0xf0, 0x33, 0xc5, 0xc6, 0x65, 0x8a, 0xc1, 0x87, 0x2d, 0x36, 0xce, 0xb6, 0x18,
	0xac, 0xb7, 0xd8, 0x38, 0xdf, 0x62, 0x63, 0x54, 0x51, 0x7f, 0x73, 0xeb, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa5, 0x83, 0x79, 0x71, 0x73, 0x04, 0x00, 0x00,
}

func (x Element) String() string {
	s, ok := Element_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Target) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target)
	if !ok {
		that2, ok := that.(Target)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.Rect.Equal(&that1.Rect) {
		return false
	}
	if !this.Circle.Equal(&that1.Circle) {
		return false
	}
	return true
}
func (this *Effect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Effect)
	if !ok {
		that2, ok := that.(Effect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Stat != that1.Stat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Element != that1.Element {
		return false
	}
	if this.TickRate != that1.TickRate {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *Component) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Component)
	if !ok {
		that2, ok := that.(Component)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CastTime != that1.CastTime {
		return false
	}
	if this.ManaCost != that1.ManaCost {
		return false
	}
	if this.Cooldown != that1.Cooldown {
		return false
	}
	if len(this.Targets) != len(that1.Targets) {
		return false
	}
	for i := range this.Targets {
		if !this.Targets[i].Equal(&that1.Targets[i]) {
			return false
		}
	}
	if len(this.Effects) != len(that1.Effects) {
		return false
	}
	for i := range this.Effects {
		if !this.Effects[i].Equal(&that1.Effects[i]) {
			return false
		}
	}
	return true
}
func (this *Ability) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ability)
	if !ok {
		that2, ok := that.(Ability)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Icon.Equal(that1.Icon) {
		return false
	}
	if !this.Animation.Equal(that1.Animation) {
		return false
	}
	if len(this.Components) != len(that1.Components) {
		return false
	}
	for i := range this.Components {
		if !this.Components[i].Equal(&that1.Components[i]) {
			return false
		}
	}
	return true
}
func (this *Target) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ability.Target{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Rect: "+strings.Replace(this.Rect.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Circle: "+strings.Replace(this.Circle.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Effect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ability.Effect{")
	s = append(s, "Stat: "+fmt.Sprintf("%#v", this.Stat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Element: "+fmt.Sprintf("%#v", this.Element)+",\n")
	s = append(s, "TickRate: "+fmt.Sprintf("%#v", this.TickRate)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Component) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ability.Component{")
	s = append(s, "CastTime: "+fmt.Sprintf("%#v", this.CastTime)+",\n")
	s = append(s, "ManaCost: "+fmt.Sprintf("%#v", this.ManaCost)+",\n")
	s = append(s, "Cooldown: "+fmt.Sprintf("%#v", this.Cooldown)+",\n")
	if this.Targets != nil {
		vs := make([]Target, len(this.Targets))
		for i := range vs {
			vs[i] = this.Targets[i]
		}
		s = append(s, "Targets: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.Effects != nil {
		vs := make([]Effect, len(this.Effects))
		for i := range vs {
			vs[i] = this.Effects[i]
		}
		s = append(s, "Effects: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ability) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ability.Ability{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "Animation: "+fmt.Sprintf("%#v", this.Animation)+",\n")
	if this.Components != nil {
		vs := make([]Component, len(this.Components))
		for i := range vs {
			vs[i] = this.Components[i]
		}
		s = append(s, "Components: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAbility(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Target) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Circle.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Rect.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Effect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Effect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Effect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if m.TickRate != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.TickRate))
		i--
		dAtA[i] = 0x20
	}
	if m.Element != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Element))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Stat) > 0 {
		i -= len(m.Stat)
		copy(dAtA[i:], m.Stat)
		i = encodeVarintAbility(dAtA, i, uint64(len(m.Stat)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Component) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Component) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Component) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Effects) > 0 {
		for iNdEx := len(m.Effects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Effects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Targets) > 0 {
		for iNdEx := len(m.Targets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Targets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Cooldown != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Cooldown))
		i--
		dAtA[i] = 0x18
	}
	if m.ManaCost != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.ManaCost))
		i--
		dAtA[i] = 0x10
	}
	if m.CastTime != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.CastTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Components) > 0 {
		for iNdEx := len(m.Components) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Components[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.Animation.Size()
		i -= size
		if _, err := m.Animation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Icon.Size()
		i -= size
		if _, err := m.Icon.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAbility(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAbility(dAtA []byte, offset int, v uint64) int {
	offset -= sovAbility(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedTarget(r randyAbility, easy bool) *Target {
	this := &Target{}
	v1 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.ID = *v1
	v2 := geometry.NewPopulatedRect(r, easy)
	this.Rect = *v2
	v3 := geometry.NewPopulatedCircle(r, easy)
	this.Circle = *v3
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEffect(r randyAbility, easy bool) *Effect {
	this := &Effect{}
	this.Stat = string(randStringAbility(r))
	this.Value = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Value *= -1
	}
	this.Element = Element([]int32{0, 1, 2, 3, 4, 5, 6}[r.Intn(7)])
	this.TickRate = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TickRate *= -1
	}
	this.Duration = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Duration *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedComponent(r randyAbility, easy bool) *Component {
	this := &Component{}
	this.CastTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CastTime *= -1
	}
	this.ManaCost = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ManaCost *= -1
	}
	this.Cooldown = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Cooldown *= -1
	}
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.Targets = make([]Target, v4)
		for i := 0; i < v4; i++ {
			v5 := NewPopulatedTarget(r, easy)
			this.Targets[i] = *v5
		}
	}
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.Effects = make([]Effect, v6)
		for i := 0; i < v6; i++ {
			v7 := NewPopulatedEffect(r, easy)
			this.Effects[i] = *v7
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAbility(r randyAbility, easy bool) *Ability {
	this := &Ability{}
	v8 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.ID = *v8
	this.Name = string(randStringAbility(r))
	v9 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.Icon = *v9
	v10 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.Animation = *v10
	if r.Intn(5) != 0 {
		v11 := r.Intn(5)
		this.Components = make([]Component, v11)
		for i := 0; i < v11; i++ {
			v12 := NewPopulatedComponent(r, easy)
			this.Components[i] = *v12
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAbility interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAbility(r randyAbility) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAbility(r randyAbility) string {
	v13 := r.Intn(100)
	tmps := make([]rune, v13)
	for i := 0; i < v13; i++ {
		tmps[i] = randUTF8RuneAbility(r)
	}
	return string(tmps)
}
func randUnrecognizedAbility(r randyAbility, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAbility(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAbility(dAtA []byte, r randyAbility, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		v14 := r.Int63()
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(v14))
	case 1:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAbility(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Target) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovAbility(uint64(l))
	l = m.Rect.Size()
	n += 1 + l + sovAbility(uint64(l))
	l = m.Circle.Size()
	n += 1 + l + sovAbility(uint64(l))
	return n
}

func (m *Effect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stat)
	if l > 0 {
		n += 1 + l + sovAbility(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovAbility(uint64(m.Value))
	}
	if m.Element != 0 {
		n += 1 + sovAbility(uint64(m.Element))
	}
	if m.TickRate != 0 {
		n += 1 + sovAbility(uint64(m.TickRate))
	}
	if m.Duration != 0 {
		n += 1 + sovAbility(uint64(m.Duration))
	}
	return n
}

func (m *Component) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CastTime != 0 {
		n += 1 + sovAbility(uint64(m.CastTime))
	}
	if m.ManaCost != 0 {
		n += 1 + sovAbility(uint64(m.ManaCost))
	}
	if m.Cooldown != 0 {
		n += 1 + sovAbility(uint64(m.Cooldown))
	}
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovAbility(uint64(l))
		}
	}
	if len(m.Effects) > 0 {
		for _, e := range m.Effects {
			l = e.Size()
			n += 1 + l + sovAbility(uint64(l))
		}
	}
	return n
}

func (m *Ability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovAbility(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAbility(uint64(l))
	}
	l = m.Icon.Size()
	n += 1 + l + sovAbility(uint64(l))
	l = m.Animation.Size()
	n += 1 + l + sovAbility(uint64(l))
	if len(m.Components) > 0 {
		for _, e := range m.Components {
			l = e.Size()
			n += 1 + l + sovAbility(uint64(l))
		}
	}
	return n
}

func sovAbility(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAbility(x uint64) (n int) {
	return sovAbility(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Target) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Rect:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Rect), "Rect", "geometry.Rect", 1), `&`, ``, 1) + `,`,
		`Circle:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Circle), "Circle", "geometry.Circle", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Effect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Effect{`,
		`Stat:` + fmt.Sprintf("%v", this.Stat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Element:` + fmt.Sprintf("%v", this.Element) + `,`,
		`TickRate:` + fmt.Sprintf("%v", this.TickRate) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Component) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTargets := "[]Target{"
	for _, f := range this.Targets {
		repeatedStringForTargets += strings.Replace(strings.Replace(f.String(), "Target", "Target", 1), `&`, ``, 1) + ","
	}
	repeatedStringForTargets += "}"
	repeatedStringForEffects := "[]Effect{"
	for _, f := range this.Effects {
		repeatedStringForEffects += strings.Replace(strings.Replace(f.String(), "Effect", "Effect", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEffects += "}"
	s := strings.Join([]string{`&Component{`,
		`CastTime:` + fmt.Sprintf("%v", this.CastTime) + `,`,
		`ManaCost:` + fmt.Sprintf("%v", this.ManaCost) + `,`,
		`Cooldown:` + fmt.Sprintf("%v", this.Cooldown) + `,`,
		`Targets:` + repeatedStringForTargets + `,`,
		`Effects:` + repeatedStringForEffects + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ability) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForComponents := "[]Component{"
	for _, f := range this.Components {
		repeatedStringForComponents += strings.Replace(strings.Replace(f.String(), "Component", "Component", 1), `&`, ``, 1) + ","
	}
	repeatedStringForComponents += "}"
	s := strings.Join([]string{`&Ability{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`Animation:` + fmt.Sprintf("%v", this.Animation) + `,`,
		`Components:` + repeatedStringForComponents + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAbility(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Target) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Circle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Circle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Effect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Effect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Effect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			m.Element = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Element |= Element(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickRate", wireType)
			}
			m.TickRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Component) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Component: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Component: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastTime", wireType)
			}
			m.CastTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CastTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManaCost", wireType)
			}
			m.ManaCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManaCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooldown", wireType)
			}
			m.Cooldown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cooldown |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, Target{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Effects = append(m.Effects, Effect{})
			if err := m.Effects[len(m.Effects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Animation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Components = append(m.Components, Component{})
			if err := m.Components[len(m.Components)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAbility(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAbility
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAbility
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAbility
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAbility        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAbility          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAbility = fmt.Errorf("proto: unexpected end of group")
)
