// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/pkg/ability/ability.proto

package ability

import (
	fmt "fmt"
	entity "github.com/elojah/game_03/pkg/entity"
	geometry "github.com/elojah/game_03/pkg/geometry"
	github_com_elojah_game_03_pkg_ulid "github.com/elojah/game_03/pkg/ulid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Target int32

const (
	NoneTarget  Target = 0
	Self        Target = 1
	Foe         Target = 3
	ClosestSelf Target = 4
	ClosestFoe  Target = 5
	// geometry aoe
	Rect   Target = 6
	Circle Target = 7
)

var Target_name = map[int32]string{
	0: "NoneTarget",
	1: "Self",
	3: "Foe",
	4: "ClosestSelf",
	5: "ClosestFoe",
	6: "Rect",
	7: "Circle",
}

var Target_value = map[string]int32{
	"NoneTarget":  0,
	"Self":        1,
	"Foe":         3,
	"ClosestSelf": 4,
	"ClosestFoe":  5,
	"Rect":        6,
	"Circle":      7,
}

func (Target) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{0}
}

type Operator int32

const (
	NoneOperator Operator = 0
	Equal        Operator = 1
	NotEqual     Operator = 2
	Greater      Operator = 3
	Lesser       Operator = 4
)

var Operator_name = map[int32]string{
	0: "NoneOperator",
	1: "Equal",
	2: "NotEqual",
	3: "Greater",
	4: "Lesser",
}

var Operator_value = map[string]int32{
	"NoneOperator": 0,
	"Equal":        1,
	"NotEqual":     2,
	"Greater":      3,
	"Lesser":       4,
}

func (Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{1}
}

type AbilityModifier struct {
	// Cancel ability
	Cancel bool `protobuf:"varint,1,opt,name=Cancel,proto3" json:"Cancel,omitempty"`
	// Add cast time
	CastTime int64 `protobuf:"varint,2,opt,name=CastTime,proto3" json:"CastTime,omitempty"`
	// Add mana cost
	ManaCost int64 `protobuf:"varint,3,opt,name=ManaCost,proto3" json:"ManaCost,omitempty"`
	// Add cooldown
	Cooldown int64 `protobuf:"varint,4,opt,name=Cooldown,proto3" json:"Cooldown,omitempty"`
}

func (m *AbilityModifier) Reset()      { *m = AbilityModifier{} }
func (*AbilityModifier) ProtoMessage() {}
func (*AbilityModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{0}
}
func (m *AbilityModifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AbilityModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AbilityModifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AbilityModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbilityModifier.Merge(m, src)
}
func (m *AbilityModifier) XXX_Size() int {
	return m.Size()
}
func (m *AbilityModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_AbilityModifier.DiscardUnknown(m)
}

var xxx_messageInfo_AbilityModifier proto.InternalMessageInfo

type EffectModifier struct {
	// Effect modifiers
	EffectID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=EffectID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"EffectID"`
	// Cancel effect
	Cancel bool `protobuf:"varint,2,opt,name=Cancel,proto3" json:"Cancel,omitempty"`
	// Change affected stat
	Stat entity.Stat `protobuf:"varint,3,opt,name=Stat,proto3,enum=entity.Stat" json:"Stat,omitempty"`
	// Add amount
	Amount Amount `protobuf:"bytes,4,opt,name=Amount,proto3" json:"Amount"`
	// Change drained stat
	Drain Amount `protobuf:"bytes,5,opt,name=Drain,proto3" json:"Drain"`
	// Change duration
	Duration int64 `protobuf:"varint,6,opt,name=Duration,proto3" json:"Duration,omitempty"`
	// Add Delay
	Delay int64 `protobuf:"varint,7,opt,name=Delay,proto3" json:"Delay,omitempty"`
	// Change tick rate
	Repeat int64 `protobuf:"varint,8,opt,name=Repeat,proto3" json:"Repeat,omitempty"`
	// Add stacks
	StackRules StackRules `protobuf:"bytes,9,opt,name=StackRules,proto3" json:"StackRules"`
}

func (m *EffectModifier) Reset()      { *m = EffectModifier{} }
func (*EffectModifier) ProtoMessage() {}
func (*EffectModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{1}
}
func (m *EffectModifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectModifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EffectModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectModifier.Merge(m, src)
}
func (m *EffectModifier) XXX_Size() int {
	return m.Size()
}
func (m *EffectModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectModifier.DiscardUnknown(m)
}

var xxx_messageInfo_EffectModifier proto.InternalMessageInfo

// Amount used for ability
type Amount struct {
	ID     github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"ID"`
	Direct int64                                 `protobuf:"varint,2,opt,name=Direct,proto3" json:"Direct,omitempty"`
	Target Target                                `protobuf:"varint,3,opt,name=Target,proto3,enum=ability.Target" json:"Target,omitempty"`
	// stat percentage of target
	Stat       entity.Stat `protobuf:"varint,4,opt,name=Stat,proto3,enum=entity.Stat" json:"Stat,omitempty"`
	Percentage int64       `protobuf:"varint,5,opt,name=Percentage,proto3" json:"Percentage,omitempty"`
	// number of effect stacks on target
	EffectID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,6,opt,name=EffectID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"EffectID"`
}

func (m *Amount) Reset()      { *m = Amount{} }
func (*Amount) ProtoMessage() {}
func (*Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{2}
}
func (m *Amount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Amount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amount.Merge(m, src)
}
func (m *Amount) XXX_Size() int {
	return m.Size()
}
func (m *Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_Amount proto.InternalMessageInfo

type Trigger struct {
	Operator         Operator                   `protobuf:"varint,1,opt,name=Operator,proto3,enum=ability.Operator" json:"Operator,omitempty"`
	Amount           *Amount                    `protobuf:"bytes,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Treshold         *Amount                    `protobuf:"bytes,3,opt,name=Treshold,proto3" json:"Treshold,omitempty"`
	AbilityModifiers map[string]AbilityModifier `protobuf:"bytes,4,rep,name=AbilityModifiers,proto3" json:"AbilityModifiers" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EffectModifiers  map[string]EffectModifier  `protobuf:"bytes,5,rep,name=EffectModifiers,proto3" json:"EffectModifiers" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Trigger) Reset()      { *m = Trigger{} }
func (*Trigger) ProtoMessage() {}
func (*Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{3}
}
func (m *Trigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trigger.Merge(m, src)
}
func (m *Trigger) XXX_Size() int {
	return m.Size()
}
func (m *Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Trigger proto.InternalMessageInfo

type StackRules struct {
	Stacks      int64 `protobuf:"varint,1,opt,name=Stacks,proto3" json:"Stacks,omitempty"`
	MaxStacks   int64 `protobuf:"varint,2,opt,name=MaxStacks,proto3" json:"MaxStacks,omitempty"`
	MaxDuration int64 `protobuf:"varint,3,opt,name=MaxDuration,proto3" json:"MaxDuration,omitempty"`
}

func (m *StackRules) Reset()      { *m = StackRules{} }
func (*StackRules) ProtoMessage() {}
func (*StackRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{4}
}
func (m *StackRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StackRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StackRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StackRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackRules.Merge(m, src)
}
func (m *StackRules) XXX_Size() int {
	return m.Size()
}
func (m *StackRules) XXX_DiscardUnknown() {
	xxx_messageInfo_StackRules.DiscardUnknown(m)
}

var xxx_messageInfo_StackRules proto.InternalMessageInfo

type Effect struct {
	// if HP/MP, duration is ignored
	Stat entity.Stat `protobuf:"varint,1,opt,name=Stat,proto3,enum=entity.Stat" json:"Stat,omitempty"`
	// Movement effect (TP or push back)
	Position *geometry.Vec2 `protobuf:"bytes,2,opt,name=Position,proto3" json:"Position,omitempty"`
	Force    *geometry.Vec2 `protobuf:"bytes,3,opt,name=Force,proto3" json:"Force,omitempty"`
	Amount   Amount         `protobuf:"bytes,4,opt,name=Amount,proto3" json:"Amount"`
	Drain    Amount         `protobuf:"bytes,5,opt,name=Drain,proto3" json:"Drain"`
	// drain is duplicate for all targets
	DrainTargets map[string]Target `protobuf:"bytes,6,rep,name=DrainTargets,proto3" json:"DrainTargets" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ability.Target"`
	// stack rules
	// if duration 0 or ignored, overtime effects ignored too
	Duration   int64                                 `protobuf:"varint,7,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Icon       github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,8,opt,name=Icon,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"Icon"`
	StackRules StackRules                            `protobuf:"bytes,9,opt,name=StackRules,proto3" json:"StackRules"`
	// Tick only if duration > 0 and not ignored
	Delay  int64 `protobuf:"varint,10,opt,name=Delay,proto3" json:"Delay,omitempty"`
	Repeat int64 `protobuf:"varint,11,opt,name=Repeat,proto3" json:"Repeat,omitempty"`
}

func (m *Effect) Reset()      { *m = Effect{} }
func (*Effect) ProtoMessage() {}
func (*Effect) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{5}
}
func (m *Effect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Effect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Effect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Effect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Effect.Merge(m, src)
}
func (m *Effect) XXX_Size() int {
	return m.Size()
}
func (m *Effect) XXX_DiscardUnknown() {
	xxx_messageInfo_Effect.DiscardUnknown(m)
}

var xxx_messageInfo_Effect proto.InternalMessageInfo

type Component struct {
	// how to relate targets and effects ? targets[key] key unused ftm
	Targets map[string]Target `protobuf:"bytes,1,rep,name=Targets,proto3" json:"Targets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ability.Target"`
	Effects map[string]Effect `protobuf:"bytes,2,rep,name=Effects,proto3" json:"Effects" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// logical OR
	Triggers map[string]Trigger `protobuf:"bytes,3,rep,name=Triggers,proto3" json:"Triggers" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Component) Reset()      { *m = Component{} }
func (*Component) ProtoMessage() {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{6}
}
func (m *Component) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Component.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(m, src)
}
func (m *Component) XXX_Size() int {
	return m.Size()
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

type Ability struct {
	ID         github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"ID"`
	Name       string                                `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Icon       github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,3,opt,name=Icon,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"Icon"`
	Animation  github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,4,opt,name=Animation,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"Animation"`
	CastTime   int64                                 `protobuf:"varint,5,opt,name=CastTime,proto3" json:"CastTime,omitempty"`
	ManaCost   int64                                 `protobuf:"varint,6,opt,name=ManaCost,proto3" json:"ManaCost,omitempty"`
	Cooldown   int64                                 `protobuf:"varint,7,opt,name=Cooldown,proto3" json:"Cooldown,omitempty"`
	Components map[string]Component                  `protobuf:"bytes,8,rep,name=Components,proto3" json:"Components" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Ability) Reset()      { *m = Ability{} }
func (*Ability) ProtoMessage() {}
func (*Ability) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{7}
}
func (m *Ability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ability.Merge(m, src)
}
func (m *Ability) XXX_Size() int {
	return m.Size()
}
func (m *Ability) XXX_DiscardUnknown() {
	xxx_messageInfo_Ability.DiscardUnknown(m)
}

var xxx_messageInfo_Ability proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ability.Target", Target_name, Target_value)
	golang_proto.RegisterEnum("ability.Target", Target_name, Target_value)
	proto.RegisterEnum("ability.Operator", Operator_name, Operator_value)
	golang_proto.RegisterEnum("ability.Operator", Operator_name, Operator_value)
	proto.RegisterType((*AbilityModifier)(nil), "ability.AbilityModifier")
	golang_proto.RegisterType((*AbilityModifier)(nil), "ability.AbilityModifier")
	proto.RegisterType((*EffectModifier)(nil), "ability.EffectModifier")
	golang_proto.RegisterType((*EffectModifier)(nil), "ability.EffectModifier")
	proto.RegisterType((*Amount)(nil), "ability.Amount")
	golang_proto.RegisterType((*Amount)(nil), "ability.Amount")
	proto.RegisterType((*Trigger)(nil), "ability.Trigger")
	golang_proto.RegisterType((*Trigger)(nil), "ability.Trigger")
	proto.RegisterMapType((map[string]AbilityModifier)(nil), "ability.Trigger.AbilityModifiersEntry")
	golang_proto.RegisterMapType((map[string]AbilityModifier)(nil), "ability.Trigger.AbilityModifiersEntry")
	proto.RegisterMapType((map[string]EffectModifier)(nil), "ability.Trigger.EffectModifiersEntry")
	golang_proto.RegisterMapType((map[string]EffectModifier)(nil), "ability.Trigger.EffectModifiersEntry")
	proto.RegisterType((*StackRules)(nil), "ability.StackRules")
	golang_proto.RegisterType((*StackRules)(nil), "ability.StackRules")
	proto.RegisterType((*Effect)(nil), "ability.Effect")
	golang_proto.RegisterType((*Effect)(nil), "ability.Effect")
	proto.RegisterMapType((map[string]Target)(nil), "ability.Effect.DrainTargetsEntry")
	golang_proto.RegisterMapType((map[string]Target)(nil), "ability.Effect.DrainTargetsEntry")
	proto.RegisterType((*Component)(nil), "ability.Component")
	golang_proto.RegisterType((*Component)(nil), "ability.Component")
	proto.RegisterMapType((map[string]Effect)(nil), "ability.Component.EffectsEntry")
	golang_proto.RegisterMapType((map[string]Effect)(nil), "ability.Component.EffectsEntry")
	proto.RegisterMapType((map[string]Target)(nil), "ability.Component.TargetsEntry")
	golang_proto.RegisterMapType((map[string]Target)(nil), "ability.Component.TargetsEntry")
	proto.RegisterMapType((map[string]Trigger)(nil), "ability.Component.TriggersEntry")
	golang_proto.RegisterMapType((map[string]Trigger)(nil), "ability.Component.TriggersEntry")
	proto.RegisterType((*Ability)(nil), "ability.Ability")
	golang_proto.RegisterType((*Ability)(nil), "ability.Ability")
	proto.RegisterMapType((map[string]Component)(nil), "ability.Ability.ComponentsEntry")
	golang_proto.RegisterMapType((map[string]Component)(nil), "ability.Ability.ComponentsEntry")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_03/pkg/ability/ability.proto", fileDescriptor_23b56474bae35107)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/pkg/ability/ability.proto", fileDescriptor_23b56474bae35107)
}

var fileDescriptor_23b56474bae35107 = []byte{
	// 1157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x41, 0x6f, 0xe3, 0xc4,
	0x17, 0x8f, 0x63, 0x27, 0x4e, 0x5e, 0xf2, 0x6f, 0xbd, 0xf3, 0x5f, 0xc0, 0x8a, 0x90, 0x37, 0x44,
	0xec, 0x52, 0x15, 0x35, 0x85, 0x56, 0x48, 0x80, 0x84, 0x50, 0x9b, 0xb4, 0x50, 0x95, 0x96, 0xe2,
	0x16, 0x84, 0x84, 0x10, 0x9a, 0xba, 0xd3, 0xd4, 0xd4, 0xf1, 0x14, 0xdb, 0x81, 0xed, 0x01, 0x89,
	0x8f, 0xc0, 0x85, 0xef, 0xc0, 0x07, 0xe0, 0xc0, 0x8d, 0x3d, 0xf6, 0xd8, 0xe3, 0x0a, 0xa4, 0x15,
	0x4d, 0x2f, 0x1c, 0xf7, 0x84, 0x90, 0xb8, 0x20, 0xcf, 0x8c, 0x9d, 0xb1, 0xeb, 0x06, 0xd1, 0xc2,
	0xa9, 0x7e, 0xf3, 0xde, 0xef, 0x37, 0x6f, 0xde, 0xfb, 0xcd, 0xcb, 0x14, 0x96, 0x07, 0x6e, 0x74,
	0x34, 0xda, 0xef, 0x3a, 0x74, 0xb8, 0x48, 0x3c, 0xfa, 0x39, 0x3e, 0x5a, 0x1c, 0xe0, 0x21, 0xf9,
	0xec, 0x95, 0xe5, 0xc5, 0x93, 0xe3, 0xc1, 0x22, 0xde, 0x77, 0x3d, 0x37, 0x3a, 0x4d, 0xfe, 0x76,
	0x4f, 0x02, 0x1a, 0x51, 0xa4, 0x0b, 0xb3, 0xb5, 0x20, 0xa1, 0x07, 0x74, 0x40, 0x17, 0x99, 0x7f,
	0x7f, 0x74, 0xc8, 0x2c, 0x66, 0xb0, 0x2f, 0x8e, 0x6b, 0xbd, 0x36, 0x7d, 0xb3, 0x01, 0xa1, 0x43,
	0x12, 0x05, 0xa7, 0xe9, 0x87, 0x80, 0xbd, 0x3a, 0x1d, 0x46, 0xfc, 0x28, 0x4e, 0x91, 0xff, 0xe1,
	0x90, 0xce, 0xd7, 0x30, 0xbb, 0xc2, 0x73, 0xdc, 0xa2, 0x07, 0xee, 0xa1, 0x4b, 0x02, 0xf4, 0x2c,
	0x54, 0x7b, 0xd8, 0x77, 0x88, 0x67, 0x2a, 0x6d, 0x65, 0xae, 0x66, 0x0b, 0x0b, 0xb5, 0xa0, 0xd6,
	0xc3, 0x61, 0xb4, 0xe7, 0x0e, 0x89, 0x59, 0x6e, 0x2b, 0x73, 0xaa, 0x9d, 0xda, 0xb1, 0x6f, 0x0b,
	0xfb, 0xb8, 0x47, 0xc3, 0xc8, 0x54, 0xb9, 0x2f, 0xb1, 0x19, 0x8e, 0x52, 0xef, 0x80, 0x7e, 0xe5,
	0x9b, 0x9a, 0xc0, 0x09, 0xbb, 0xf3, 0x7b, 0x19, 0x66, 0xd6, 0x0e, 0x0f, 0x89, 0x13, 0xa5, 0xdb,
	0x6f, 0x40, 0x8d, 0xaf, 0x6c, 0xf4, 0x59, 0x02, 0xcd, 0xd5, 0x85, 0xb3, 0x27, 0xf7, 0x4a, 0x3f,
	0x3f, 0xb9, 0x77, 0x7f, 0xfa, 0xf1, 0x46, 0x9e, 0x7b, 0xd0, 0xdd, 0xe8, 0xdb, 0x29, 0x5c, 0x3a,
	0x49, 0x39, 0x73, 0x92, 0x36, 0x68, 0xbb, 0x11, 0xe6, 0x99, 0xce, 0x2c, 0x35, 0xbb, 0xa2, 0x22,
	0xf1, 0x9a, 0xcd, 0x3c, 0x68, 0x01, 0xaa, 0x2b, 0x43, 0x3a, 0xf2, 0x23, 0x96, 0x71, 0x63, 0x69,
	0xb6, 0x9b, 0x34, 0x96, 0x2f, 0xaf, 0x6a, 0x71, 0x4e, 0xb6, 0x08, 0x42, 0x2f, 0x43, 0xa5, 0x1f,
	0x60, 0xd7, 0x37, 0x2b, 0xd3, 0xa2, 0x79, 0x4c, 0x5c, 0x8f, 0xfe, 0x28, 0xc0, 0x91, 0x4b, 0x7d,
	0xb3, 0xca, 0xeb, 0x91, 0xd8, 0xe8, 0x2e, 0x54, 0xfa, 0xc4, 0xc3, 0xa7, 0xa6, 0xce, 0x1c, 0xdc,
	0x88, 0xcf, 0x61, 0x93, 0x13, 0x82, 0x23, 0xb3, 0xc6, 0x96, 0x85, 0x85, 0xde, 0x00, 0xd8, 0x8d,
	0xb0, 0x73, 0x6c, 0x8f, 0x3c, 0x12, 0x9a, 0x75, 0xb6, 0xf7, 0xff, 0xd3, 0xbd, 0x27, 0x2e, 0xb1,
	0xbf, 0x14, 0xdc, 0xf9, 0xae, 0x9c, 0x9c, 0x10, 0xbd, 0x05, 0xe5, 0x9b, 0x96, 0xba, 0xcc, 0x8b,
	0xdc, 0x77, 0x03, 0xe2, 0x44, 0x42, 0x14, 0xc2, 0x42, 0x2f, 0x41, 0x75, 0x0f, 0x07, 0x03, 0x92,
	0x94, 0x79, 0x52, 0x14, 0xbe, 0x6c, 0x0b, 0x77, 0xda, 0x0d, 0xed, 0xda, 0x6e, 0x58, 0x00, 0x3b,
	0x24, 0x70, 0x88, 0x1f, 0xe1, 0x01, 0x61, 0x35, 0x56, 0x6d, 0x69, 0x25, 0x23, 0x99, 0xea, 0xad,
	0x24, 0xd3, 0xf9, 0x53, 0x05, 0x7d, 0x2f, 0x70, 0x07, 0x03, 0x12, 0xa0, 0x05, 0xa8, 0xbd, 0x7f,
	0x42, 0x02, 0x1c, 0xd1, 0x80, 0x95, 0x67, 0x66, 0xe9, 0x4e, 0x7a, 0x86, 0xc4, 0x61, 0xa7, 0x21,
	0xf1, 0x81, 0x85, 0x66, 0xca, 0x85, 0x2a, 0x90, 0xd4, 0x52, 0xdb, 0x0b, 0x48, 0x78, 0x44, 0xbd,
	0x03, 0x56, 0x9b, 0x82, 0xd0, 0x34, 0x00, 0x7d, 0x0c, 0x46, 0xee, 0x82, 0x86, 0xa6, 0xd6, 0x56,
	0xe7, 0x1a, 0x4b, 0x0f, 0x26, 0x05, 0xe5, 0x09, 0x77, 0xf3, 0x81, 0x6b, 0x7e, 0x14, 0x9c, 0x8a,
	0xe6, 0x5f, 0x61, 0x41, 0x1f, 0xc2, 0x6c, 0xf6, 0xea, 0x85, 0x66, 0x85, 0x11, 0xdf, 0xbf, 0x42,
	0x9c, 0x8b, 0x93, 0x79, 0xf3, 0x1c, 0xad, 0x4f, 0xe1, 0x99, 0xc2, 0x3c, 0x90, 0x01, 0xea, 0x31,
	0x39, 0x65, 0x95, 0xac, 0xdb, 0xf1, 0x27, 0xea, 0x42, 0xe5, 0x4b, 0xec, 0x8d, 0x88, 0x28, 0x98,
	0x39, 0xa9, 0x42, 0x96, 0xc0, 0xe6, 0x61, 0x6f, 0x96, 0x5f, 0x57, 0x5a, 0x9f, 0xc0, 0xdd, 0xa2,
	0x6c, 0x0a, 0xd8, 0x17, 0xb2, 0xec, 0xcf, 0xa5, 0xec, 0x59, 0xbc, 0x44, 0xde, 0x39, 0x90, 0x2f,
	0x54, 0xac, 0x6c, 0x66, 0x85, 0x8c, 0x55, 0xb5, 0x85, 0x85, 0x9e, 0x87, 0xfa, 0x16, 0x7e, 0x28,
	0x5c, 0x5c, 0xf4, 0x93, 0x05, 0xd4, 0x86, 0xc6, 0x16, 0x7e, 0x98, 0xde, 0x70, 0x3e, 0x0d, 0xe5,
	0xa5, 0xce, 0x4f, 0x1a, 0x54, 0x79, 0x0e, 0xa9, 0xf6, 0x95, 0x6b, 0xb5, 0x3f, 0x0f, 0xb5, 0x1d,
	0x1a, 0xba, 0x8c, 0x8b, 0x1f, 0x64, 0xa6, 0x9b, 0x8e, 0xfd, 0x8f, 0x88, 0xb3, 0x64, 0xa7, 0x7e,
	0xf4, 0x22, 0x54, 0xd6, 0x69, 0xe0, 0x10, 0xa1, 0xaa, 0x7c, 0x20, 0x77, 0xfe, 0xa7, 0xb3, 0x6d,
	0x13, 0x9a, 0xec, 0x83, 0x5f, 0xed, 0xd0, 0xac, 0x32, 0x41, 0xbd, 0x90, 0x2b, 0x7d, 0x57, 0x8e,
	0x91, 0xc5, 0x94, 0x01, 0x67, 0x06, 0xa5, 0x9e, 0x1b, 0x94, 0x2b, 0xa0, 0x6d, 0x38, 0xd4, 0x67,
	0x03, 0xf1, 0x1f, 0x5f, 0x77, 0x06, 0xbd, 0xc5, 0xf4, 0x9c, 0x8c, 0x69, 0x28, 0x1e, 0xd3, 0x0d,
	0x79, 0x4c, 0xb7, 0x76, 0xe0, 0xce, 0x95, 0x03, 0x17, 0xe8, 0xf5, 0xbe, 0xac, 0xd7, 0x82, 0x79,
	0x29, 0xe9, 0xf4, 0x07, 0x15, 0xea, 0x3d, 0x3a, 0x3c, 0xa1, 0x3e, 0xf1, 0xe3, 0x9f, 0x01, 0x3d,
	0xa9, 0xb7, 0xc2, 0xea, 0x7d, 0x2f, 0x85, 0xa6, 0x41, 0x5d, 0x79, 0x73, 0x3b, 0x89, 0x47, 0x6f,
	0x83, 0xce, 0x5b, 0x12, 0x0b, 0xf9, 0x3a, 0xa8, 0x88, 0x90, 0x1b, 0x95, 0xa0, 0xd0, 0x6a, 0x3c,
	0xcb, 0xd8, 0x90, 0x08, 0x4d, 0x95, 0x31, 0xb4, 0x8b, 0x36, 0x17, 0x21, 0x32, 0x45, 0x8a, 0x6b,
	0x6d, 0x42, 0xf3, 0x5f, 0x2b, 0x4d, 0x4c, 0x26, 0xe7, 0xfb, 0x77, 0x64, 0xb2, 0xa0, 0x39, 0x4e,
	0x26, 0xdb, 0x82, 0xff, 0x65, 0x52, 0x2f, 0x60, 0x7b, 0x90, 0x65, 0x33, 0xf2, 0xb3, 0x53, 0x6e,
	0xdb, 0x2f, 0x2a, 0xe8, 0x62, 0xb4, 0xdd, 0xf6, 0x57, 0x17, 0x81, 0xb6, 0x8d, 0xc5, 0x43, 0xac,
	0x6e, 0xb3, 0xef, 0xf4, 0x4e, 0xa8, 0x37, 0xbf, 0x13, 0x9b, 0x50, 0x5f, 0xf1, 0xdd, 0x21, 0xbf,
	0x73, 0xda, 0x4d, 0x78, 0x26, 0xf8, 0xcc, 0x83, 0xb1, 0x32, 0xe5, 0xc1, 0x58, 0x9d, 0xf2, 0x60,
	0xd4, 0xb3, 0x0f, 0x46, 0xb4, 0x0e, 0x90, 0xca, 0x2a, 0x34, 0x6b, 0x39, 0xc5, 0xad, 0xe4, 0x95,
	0x97, 0x51, 0x9c, 0x84, 0x6c, 0x7d, 0x00, 0xb3, 0xb9, 0xa0, 0x82, 0xde, 0xce, 0x65, 0x7b, 0x8b,
	0xae, 0x2a, 0x5b, 0xea, 0xee, 0xfc, 0x7e, 0xf2, 0xe0, 0x41, 0x33, 0x00, 0xdb, 0xd4, 0x27, 0xdc,
	0x32, 0x4a, 0xa8, 0x06, 0xda, 0x2e, 0xf1, 0x0e, 0x0d, 0x05, 0xe9, 0xa0, 0xae, 0x53, 0x62, 0xa8,
	0x68, 0x16, 0x1a, 0x3d, 0x8f, 0x86, 0x24, 0x8c, 0x98, 0x47, 0x8b, 0x31, 0x62, 0x21, 0x0e, 0xa8,
	0xc4, 0x18, 0x9b, 0x38, 0x91, 0x51, 0x45, 0x00, 0xd5, 0x9e, 0x1b, 0x38, 0x1e, 0x31, 0xf4, 0xf9,
	0xed, 0xc9, 0x93, 0x04, 0x19, 0xd0, 0x8c, 0x77, 0x49, 0x6c, 0xa3, 0x84, 0xea, 0x50, 0x59, 0xfb,
	0x62, 0x84, 0x3d, 0x43, 0x41, 0x4d, 0xa8, 0x6d, 0xd3, 0x88, 0x5b, 0x65, 0xd4, 0x00, 0xfd, 0x9d,
	0x80, 0xe0, 0x88, 0x04, 0x86, 0x1a, 0xf3, 0xbd, 0x47, 0xc2, 0x90, 0x04, 0x86, 0xb6, 0xfa, 0xee,
	0xd9, 0x85, 0x55, 0x3a, 0xbf, 0xb0, 0x4a, 0x8f, 0x2f, 0xac, 0xd2, 0xd3, 0x0b, 0x4b, 0xf9, 0xe3,
	0xc2, 0x52, 0xbe, 0x19, 0x5b, 0xca, 0xf7, 0x63, 0x4b, 0xf9, 0x71, 0x6c, 0x29, 0x8f, 0xc6, 0x96,
	0x72, 0x36, 0xb6, 0x94, 0xf3, 0xb1, 0xa5, 0xfc, 0x3a, 0xb6, 0x94, 0xdf, 0xc6, 0x56, 0xe9, 0xe9,
	0xd8, 0x52, 0xbe, 0xbd, 0xb4, 0x4a, 0x8f, 0x2e, 0x2d, 0xe5, 0xfc, 0xd2, 0x2a, 0x3d, 0xbe, 0xb4,
	0x4a, 0xfb, 0x55, 0xf6, 0xff, 0xc4, 0xf2, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xbb, 0xd3,
	0xc7, 0x28, 0x0d, 0x00, 0x00,
}

func (x Target) String() string {
	s, ok := Target_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Operator) String() string {
	s, ok := Operator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *AbilityModifier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AbilityModifier)
	if !ok {
		that2, ok := that.(AbilityModifier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cancel != that1.Cancel {
		return false
	}
	if this.CastTime != that1.CastTime {
		return false
	}
	if this.ManaCost != that1.ManaCost {
		return false
	}
	if this.Cooldown != that1.Cooldown {
		return false
	}
	return true
}
func (this *EffectModifier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EffectModifier)
	if !ok {
		that2, ok := that.(EffectModifier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EffectID.Equal(that1.EffectID) {
		return false
	}
	if this.Cancel != that1.Cancel {
		return false
	}
	if this.Stat != that1.Stat {
		return false
	}
	if !this.Amount.Equal(&that1.Amount) {
		return false
	}
	if !this.Drain.Equal(&that1.Drain) {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Delay != that1.Delay {
		return false
	}
	if this.Repeat != that1.Repeat {
		return false
	}
	if !this.StackRules.Equal(&that1.StackRules) {
		return false
	}
	return true
}
func (this *Amount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Amount)
	if !ok {
		that2, ok := that.(Amount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Direct != that1.Direct {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if this.Stat != that1.Stat {
		return false
	}
	if this.Percentage != that1.Percentage {
		return false
	}
	if !this.EffectID.Equal(that1.EffectID) {
		return false
	}
	return true
}
func (this *Trigger) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Trigger)
	if !ok {
		that2, ok := that.(Trigger)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if !this.Treshold.Equal(that1.Treshold) {
		return false
	}
	if len(this.AbilityModifiers) != len(that1.AbilityModifiers) {
		return false
	}
	for i := range this.AbilityModifiers {
		a := this.AbilityModifiers[i]
		b := that1.AbilityModifiers[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.EffectModifiers) != len(that1.EffectModifiers) {
		return false
	}
	for i := range this.EffectModifiers {
		a := this.EffectModifiers[i]
		b := that1.EffectModifiers[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *StackRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StackRules)
	if !ok {
		that2, ok := that.(StackRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Stacks != that1.Stacks {
		return false
	}
	if this.MaxStacks != that1.MaxStacks {
		return false
	}
	if this.MaxDuration != that1.MaxDuration {
		return false
	}
	return true
}
func (this *Effect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Effect)
	if !ok {
		that2, ok := that.(Effect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Stat != that1.Stat {
		return false
	}
	if !this.Position.Equal(that1.Position) {
		return false
	}
	if !this.Force.Equal(that1.Force) {
		return false
	}
	if !this.Amount.Equal(&that1.Amount) {
		return false
	}
	if !this.Drain.Equal(&that1.Drain) {
		return false
	}
	if len(this.DrainTargets) != len(that1.DrainTargets) {
		return false
	}
	for i := range this.DrainTargets {
		if this.DrainTargets[i] != that1.DrainTargets[i] {
			return false
		}
	}
	if this.Duration != that1.Duration {
		return false
	}
	if !this.Icon.Equal(that1.Icon) {
		return false
	}
	if !this.StackRules.Equal(&that1.StackRules) {
		return false
	}
	if this.Delay != that1.Delay {
		return false
	}
	if this.Repeat != that1.Repeat {
		return false
	}
	return true
}
func (this *Component) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Component)
	if !ok {
		that2, ok := that.(Component)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Targets) != len(that1.Targets) {
		return false
	}
	for i := range this.Targets {
		if this.Targets[i] != that1.Targets[i] {
			return false
		}
	}
	if len(this.Effects) != len(that1.Effects) {
		return false
	}
	for i := range this.Effects {
		a := this.Effects[i]
		b := that1.Effects[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.Triggers) != len(that1.Triggers) {
		return false
	}
	for i := range this.Triggers {
		a := this.Triggers[i]
		b := that1.Triggers[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *Ability) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ability)
	if !ok {
		that2, ok := that.(Ability)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Icon.Equal(that1.Icon) {
		return false
	}
	if !this.Animation.Equal(that1.Animation) {
		return false
	}
	if this.CastTime != that1.CastTime {
		return false
	}
	if this.ManaCost != that1.ManaCost {
		return false
	}
	if this.Cooldown != that1.Cooldown {
		return false
	}
	if len(this.Components) != len(that1.Components) {
		return false
	}
	for i := range this.Components {
		a := this.Components[i]
		b := that1.Components[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *AbilityModifier) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ability.AbilityModifier{")
	s = append(s, "Cancel: "+fmt.Sprintf("%#v", this.Cancel)+",\n")
	s = append(s, "CastTime: "+fmt.Sprintf("%#v", this.CastTime)+",\n")
	s = append(s, "ManaCost: "+fmt.Sprintf("%#v", this.ManaCost)+",\n")
	s = append(s, "Cooldown: "+fmt.Sprintf("%#v", this.Cooldown)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EffectModifier) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&ability.EffectModifier{")
	s = append(s, "EffectID: "+fmt.Sprintf("%#v", this.EffectID)+",\n")
	s = append(s, "Cancel: "+fmt.Sprintf("%#v", this.Cancel)+",\n")
	s = append(s, "Stat: "+fmt.Sprintf("%#v", this.Stat)+",\n")
	s = append(s, "Amount: "+strings.Replace(this.Amount.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Drain: "+strings.Replace(this.Drain.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Delay: "+fmt.Sprintf("%#v", this.Delay)+",\n")
	s = append(s, "Repeat: "+fmt.Sprintf("%#v", this.Repeat)+",\n")
	s = append(s, "StackRules: "+strings.Replace(this.StackRules.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Amount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&ability.Amount{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Direct: "+fmt.Sprintf("%#v", this.Direct)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "Stat: "+fmt.Sprintf("%#v", this.Stat)+",\n")
	s = append(s, "Percentage: "+fmt.Sprintf("%#v", this.Percentage)+",\n")
	s = append(s, "EffectID: "+fmt.Sprintf("%#v", this.EffectID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Trigger) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ability.Trigger{")
	s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	if this.Amount != nil {
		s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	}
	if this.Treshold != nil {
		s = append(s, "Treshold: "+fmt.Sprintf("%#v", this.Treshold)+",\n")
	}
	keysForAbilityModifiers := make([]string, 0, len(this.AbilityModifiers))
	for k, _ := range this.AbilityModifiers {
		keysForAbilityModifiers = append(keysForAbilityModifiers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAbilityModifiers)
	mapStringForAbilityModifiers := "map[string]AbilityModifier{"
	for _, k := range keysForAbilityModifiers {
		mapStringForAbilityModifiers += fmt.Sprintf("%#v: %#v,", k, this.AbilityModifiers[k])
	}
	mapStringForAbilityModifiers += "}"
	if this.AbilityModifiers != nil {
		s = append(s, "AbilityModifiers: "+mapStringForAbilityModifiers+",\n")
	}
	keysForEffectModifiers := make([]string, 0, len(this.EffectModifiers))
	for k, _ := range this.EffectModifiers {
		keysForEffectModifiers = append(keysForEffectModifiers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffectModifiers)
	mapStringForEffectModifiers := "map[string]EffectModifier{"
	for _, k := range keysForEffectModifiers {
		mapStringForEffectModifiers += fmt.Sprintf("%#v: %#v,", k, this.EffectModifiers[k])
	}
	mapStringForEffectModifiers += "}"
	if this.EffectModifiers != nil {
		s = append(s, "EffectModifiers: "+mapStringForEffectModifiers+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StackRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ability.StackRules{")
	s = append(s, "Stacks: "+fmt.Sprintf("%#v", this.Stacks)+",\n")
	s = append(s, "MaxStacks: "+fmt.Sprintf("%#v", this.MaxStacks)+",\n")
	s = append(s, "MaxDuration: "+fmt.Sprintf("%#v", this.MaxDuration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Effect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&ability.Effect{")
	s = append(s, "Stat: "+fmt.Sprintf("%#v", this.Stat)+",\n")
	if this.Position != nil {
		s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	}
	if this.Force != nil {
		s = append(s, "Force: "+fmt.Sprintf("%#v", this.Force)+",\n")
	}
	s = append(s, "Amount: "+strings.Replace(this.Amount.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Drain: "+strings.Replace(this.Drain.GoString(), `&`, ``, 1)+",\n")
	keysForDrainTargets := make([]string, 0, len(this.DrainTargets))
	for k, _ := range this.DrainTargets {
		keysForDrainTargets = append(keysForDrainTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDrainTargets)
	mapStringForDrainTargets := "map[string]Target{"
	for _, k := range keysForDrainTargets {
		mapStringForDrainTargets += fmt.Sprintf("%#v: %#v,", k, this.DrainTargets[k])
	}
	mapStringForDrainTargets += "}"
	if this.DrainTargets != nil {
		s = append(s, "DrainTargets: "+mapStringForDrainTargets+",\n")
	}
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "StackRules: "+strings.Replace(this.StackRules.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Delay: "+fmt.Sprintf("%#v", this.Delay)+",\n")
	s = append(s, "Repeat: "+fmt.Sprintf("%#v", this.Repeat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Component) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ability.Component{")
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]Target{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%#v: %#v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	if this.Targets != nil {
		s = append(s, "Targets: "+mapStringForTargets+",\n")
	}
	keysForEffects := make([]string, 0, len(this.Effects))
	for k, _ := range this.Effects {
		keysForEffects = append(keysForEffects, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffects)
	mapStringForEffects := "map[string]Effect{"
	for _, k := range keysForEffects {
		mapStringForEffects += fmt.Sprintf("%#v: %#v,", k, this.Effects[k])
	}
	mapStringForEffects += "}"
	if this.Effects != nil {
		s = append(s, "Effects: "+mapStringForEffects+",\n")
	}
	keysForTriggers := make([]string, 0, len(this.Triggers))
	for k, _ := range this.Triggers {
		keysForTriggers = append(keysForTriggers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTriggers)
	mapStringForTriggers := "map[string]Trigger{"
	for _, k := range keysForTriggers {
		mapStringForTriggers += fmt.Sprintf("%#v: %#v,", k, this.Triggers[k])
	}
	mapStringForTriggers += "}"
	if this.Triggers != nil {
		s = append(s, "Triggers: "+mapStringForTriggers+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ability) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&ability.Ability{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "Animation: "+fmt.Sprintf("%#v", this.Animation)+",\n")
	s = append(s, "CastTime: "+fmt.Sprintf("%#v", this.CastTime)+",\n")
	s = append(s, "ManaCost: "+fmt.Sprintf("%#v", this.ManaCost)+",\n")
	s = append(s, "Cooldown: "+fmt.Sprintf("%#v", this.Cooldown)+",\n")
	keysForComponents := make([]string, 0, len(this.Components))
	for k, _ := range this.Components {
		keysForComponents = append(keysForComponents, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForComponents)
	mapStringForComponents := "map[string]Component{"
	for _, k := range keysForComponents {
		mapStringForComponents += fmt.Sprintf("%#v: %#v,", k, this.Components[k])
	}
	mapStringForComponents += "}"
	if this.Components != nil {
		s = append(s, "Components: "+mapStringForComponents+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAbility(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AbilityModifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbilityModifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AbilityModifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cooldown != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Cooldown))
		i--
		dAtA[i] = 0x20
	}
	if m.ManaCost != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.ManaCost))
		i--
		dAtA[i] = 0x18
	}
	if m.CastTime != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.CastTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Cancel {
		i--
		if m.Cancel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EffectModifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectModifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EffectModifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StackRules.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Repeat != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Repeat))
		i--
		dAtA[i] = 0x40
	}
	if m.Delay != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Delay))
		i--
		dAtA[i] = 0x38
	}
	if m.Duration != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.Drain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Stat != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Stat))
		i--
		dAtA[i] = 0x18
	}
	if m.Cancel {
		i--
		if m.Cancel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.EffectID.Size()
		i -= size
		if _, err := m.EffectID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Amount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Amount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Amount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EffectID.Size()
		i -= size
		if _, err := m.EffectID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Percentage != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Percentage))
		i--
		dAtA[i] = 0x28
	}
	if m.Stat != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Stat))
		i--
		dAtA[i] = 0x20
	}
	if m.Target != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Target))
		i--
		dAtA[i] = 0x18
	}
	if m.Direct != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Direct))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Trigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EffectModifiers) > 0 {
		for k := range m.EffectModifiers {
			v := m.EffectModifiers[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AbilityModifiers) > 0 {
		for k := range m.AbilityModifiers {
			v := m.AbilityModifiers[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Treshold != nil {
		{
			size, err := m.Treshold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Operator != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Operator))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StackRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StackRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StackRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxDuration != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.MaxDuration))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxStacks != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.MaxStacks))
		i--
		dAtA[i] = 0x10
	}
	if m.Stacks != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Stacks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Effect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Effect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Effect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Repeat != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Repeat))
		i--
		dAtA[i] = 0x58
	}
	if m.Delay != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Delay))
		i--
		dAtA[i] = 0x50
	}
	{
		size, err := m.StackRules.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.Icon.Size()
		i -= size
		if _, err := m.Icon.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Duration != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DrainTargets) > 0 {
		for k := range m.DrainTargets {
			v := m.DrainTargets[k]
			baseI := i
			i = encodeVarintAbility(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.Drain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Force != nil {
		{
			size, err := m.Force.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Stat != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Stat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Component) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Component) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Component) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Triggers) > 0 {
		for k := range m.Triggers {
			v := m.Triggers[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Effects) > 0 {
		for k := range m.Effects {
			v := m.Effects[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Targets) > 0 {
		for k := range m.Targets {
			v := m.Targets[k]
			baseI := i
			i = encodeVarintAbility(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Ability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Components) > 0 {
		for k := range m.Components {
			v := m.Components[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Cooldown != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Cooldown))
		i--
		dAtA[i] = 0x38
	}
	if m.ManaCost != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.ManaCost))
		i--
		dAtA[i] = 0x30
	}
	if m.CastTime != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.CastTime))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Animation.Size()
		i -= size
		if _, err := m.Animation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Icon.Size()
		i -= size
		if _, err := m.Icon.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAbility(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAbility(dAtA []byte, offset int, v uint64) int {
	offset -= sovAbility(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedAbilityModifier(r randyAbility, easy bool) *AbilityModifier {
	this := &AbilityModifier{}
	this.Cancel = bool(bool(r.Intn(2) == 0))
	this.CastTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CastTime *= -1
	}
	this.ManaCost = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ManaCost *= -1
	}
	this.Cooldown = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Cooldown *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEffectModifier(r randyAbility, easy bool) *EffectModifier {
	this := &EffectModifier{}
	v1 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.EffectID = *v1
	this.Cancel = bool(bool(r.Intn(2) == 0))
	this.Stat = entity.Stat([]int32{0, 1, 2, 4, 5, 6, 7, 8, 9, 10}[r.Intn(10)])
	v2 := NewPopulatedAmount(r, easy)
	this.Amount = *v2
	v3 := NewPopulatedAmount(r, easy)
	this.Drain = *v3
	this.Duration = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Duration *= -1
	}
	this.Delay = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Delay *= -1
	}
	this.Repeat = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Repeat *= -1
	}
	v4 := NewPopulatedStackRules(r, easy)
	this.StackRules = *v4
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAmount(r randyAbility, easy bool) *Amount {
	this := &Amount{}
	v5 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.ID = *v5
	this.Direct = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Direct *= -1
	}
	this.Target = Target([]int32{0, 1, 3, 4, 5, 6, 7}[r.Intn(7)])
	this.Stat = entity.Stat([]int32{0, 1, 2, 4, 5, 6, 7, 8, 9, 10}[r.Intn(10)])
	this.Percentage = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Percentage *= -1
	}
	v6 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.EffectID = *v6
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTrigger(r randyAbility, easy bool) *Trigger {
	this := &Trigger{}
	this.Operator = Operator([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if r.Intn(5) != 0 {
		this.Amount = NewPopulatedAmount(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Treshold = NewPopulatedAmount(r, easy)
	}
	if r.Intn(5) != 0 {
		v7 := r.Intn(10)
		this.AbilityModifiers = make(map[string]AbilityModifier)
		for i := 0; i < v7; i++ {
			this.AbilityModifiers[randStringAbility(r)] = *NewPopulatedAbilityModifier(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v8 := r.Intn(10)
		this.EffectModifiers = make(map[string]EffectModifier)
		for i := 0; i < v8; i++ {
			this.EffectModifiers[randStringAbility(r)] = *NewPopulatedEffectModifier(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStackRules(r randyAbility, easy bool) *StackRules {
	this := &StackRules{}
	this.Stacks = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Stacks *= -1
	}
	this.MaxStacks = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MaxStacks *= -1
	}
	this.MaxDuration = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MaxDuration *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEffect(r randyAbility, easy bool) *Effect {
	this := &Effect{}
	this.Stat = entity.Stat([]int32{0, 1, 2, 4, 5, 6, 7, 8, 9, 10}[r.Intn(10)])
	if r.Intn(5) != 0 {
		this.Position = geometry.NewPopulatedVec2(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Force = geometry.NewPopulatedVec2(r, easy)
	}
	v9 := NewPopulatedAmount(r, easy)
	this.Amount = *v9
	v10 := NewPopulatedAmount(r, easy)
	this.Drain = *v10
	if r.Intn(5) != 0 {
		v11 := r.Intn(10)
		this.DrainTargets = make(map[string]Target)
		for i := 0; i < v11; i++ {
			this.DrainTargets[randStringAbility(r)] = Target([]int32{0, 1, 3, 4, 5, 6, 7}[r.Intn(7)])
		}
	}
	this.Duration = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Duration *= -1
	}
	v12 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.Icon = *v12
	v13 := NewPopulatedStackRules(r, easy)
	this.StackRules = *v13
	this.Delay = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Delay *= -1
	}
	this.Repeat = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Repeat *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedComponent(r randyAbility, easy bool) *Component {
	this := &Component{}
	if r.Intn(5) != 0 {
		v14 := r.Intn(10)
		this.Targets = make(map[string]Target)
		for i := 0; i < v14; i++ {
			this.Targets[randStringAbility(r)] = Target([]int32{0, 1, 3, 4, 5, 6, 7}[r.Intn(7)])
		}
	}
	if r.Intn(5) != 0 {
		v15 := r.Intn(10)
		this.Effects = make(map[string]Effect)
		for i := 0; i < v15; i++ {
			this.Effects[randStringAbility(r)] = *NewPopulatedEffect(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v16 := r.Intn(10)
		this.Triggers = make(map[string]Trigger)
		for i := 0; i < v16; i++ {
			this.Triggers[randStringAbility(r)] = *NewPopulatedTrigger(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAbility(r randyAbility, easy bool) *Ability {
	this := &Ability{}
	v17 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.ID = *v17
	this.Name = string(randStringAbility(r))
	v18 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.Icon = *v18
	v19 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.Animation = *v19
	this.CastTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CastTime *= -1
	}
	this.ManaCost = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ManaCost *= -1
	}
	this.Cooldown = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Cooldown *= -1
	}
	if r.Intn(5) != 0 {
		v20 := r.Intn(10)
		this.Components = make(map[string]Component)
		for i := 0; i < v20; i++ {
			this.Components[randStringAbility(r)] = *NewPopulatedComponent(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAbility interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAbility(r randyAbility) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAbility(r randyAbility) string {
	v21 := r.Intn(100)
	tmps := make([]rune, v21)
	for i := 0; i < v21; i++ {
		tmps[i] = randUTF8RuneAbility(r)
	}
	return string(tmps)
}
func randUnrecognizedAbility(r randyAbility, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAbility(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAbility(dAtA []byte, r randyAbility, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		v22 := r.Int63()
		if r.Intn(2) == 0 {
			v22 *= -1
		}
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(v22))
	case 1:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAbility(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *AbilityModifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancel {
		n += 2
	}
	if m.CastTime != 0 {
		n += 1 + sovAbility(uint64(m.CastTime))
	}
	if m.ManaCost != 0 {
		n += 1 + sovAbility(uint64(m.ManaCost))
	}
	if m.Cooldown != 0 {
		n += 1 + sovAbility(uint64(m.Cooldown))
	}
	return n
}

func (m *EffectModifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EffectID.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.Cancel {
		n += 2
	}
	if m.Stat != 0 {
		n += 1 + sovAbility(uint64(m.Stat))
	}
	l = m.Amount.Size()
	n += 1 + l + sovAbility(uint64(l))
	l = m.Drain.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovAbility(uint64(m.Duration))
	}
	if m.Delay != 0 {
		n += 1 + sovAbility(uint64(m.Delay))
	}
	if m.Repeat != 0 {
		n += 1 + sovAbility(uint64(m.Repeat))
	}
	l = m.StackRules.Size()
	n += 1 + l + sovAbility(uint64(l))
	return n
}

func (m *Amount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.Direct != 0 {
		n += 1 + sovAbility(uint64(m.Direct))
	}
	if m.Target != 0 {
		n += 1 + sovAbility(uint64(m.Target))
	}
	if m.Stat != 0 {
		n += 1 + sovAbility(uint64(m.Stat))
	}
	if m.Percentage != 0 {
		n += 1 + sovAbility(uint64(m.Percentage))
	}
	l = m.EffectID.Size()
	n += 1 + l + sovAbility(uint64(l))
	return n
}

func (m *Trigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operator != 0 {
		n += 1 + sovAbility(uint64(m.Operator))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovAbility(uint64(l))
	}
	if m.Treshold != nil {
		l = m.Treshold.Size()
		n += 1 + l + sovAbility(uint64(l))
	}
	if len(m.AbilityModifiers) > 0 {
		for k, v := range m.AbilityModifiers {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + l + sovAbility(uint64(l))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	if len(m.EffectModifiers) > 0 {
		for k, v := range m.EffectModifiers {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + l + sovAbility(uint64(l))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *StackRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stacks != 0 {
		n += 1 + sovAbility(uint64(m.Stacks))
	}
	if m.MaxStacks != 0 {
		n += 1 + sovAbility(uint64(m.MaxStacks))
	}
	if m.MaxDuration != 0 {
		n += 1 + sovAbility(uint64(m.MaxDuration))
	}
	return n
}

func (m *Effect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stat != 0 {
		n += 1 + sovAbility(uint64(m.Stat))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovAbility(uint64(l))
	}
	if m.Force != nil {
		l = m.Force.Size()
		n += 1 + l + sovAbility(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovAbility(uint64(l))
	l = m.Drain.Size()
	n += 1 + l + sovAbility(uint64(l))
	if len(m.DrainTargets) > 0 {
		for k, v := range m.DrainTargets {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + sovAbility(uint64(v))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	if m.Duration != 0 {
		n += 1 + sovAbility(uint64(m.Duration))
	}
	l = m.Icon.Size()
	n += 1 + l + sovAbility(uint64(l))
	l = m.StackRules.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.Delay != 0 {
		n += 1 + sovAbility(uint64(m.Delay))
	}
	if m.Repeat != 0 {
		n += 1 + sovAbility(uint64(m.Repeat))
	}
	return n
}

func (m *Component) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for k, v := range m.Targets {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + sovAbility(uint64(v))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	if len(m.Effects) > 0 {
		for k, v := range m.Effects {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + l + sovAbility(uint64(l))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	if len(m.Triggers) > 0 {
		for k, v := range m.Triggers {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + l + sovAbility(uint64(l))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Ability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovAbility(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAbility(uint64(l))
	}
	l = m.Icon.Size()
	n += 1 + l + sovAbility(uint64(l))
	l = m.Animation.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.CastTime != 0 {
		n += 1 + sovAbility(uint64(m.CastTime))
	}
	if m.ManaCost != 0 {
		n += 1 + sovAbility(uint64(m.ManaCost))
	}
	if m.Cooldown != 0 {
		n += 1 + sovAbility(uint64(m.Cooldown))
	}
	if len(m.Components) > 0 {
		for k, v := range m.Components {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + l + sovAbility(uint64(l))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAbility(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAbility(x uint64) (n int) {
	return sovAbility(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AbilityModifier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AbilityModifier{`,
		`Cancel:` + fmt.Sprintf("%v", this.Cancel) + `,`,
		`CastTime:` + fmt.Sprintf("%v", this.CastTime) + `,`,
		`ManaCost:` + fmt.Sprintf("%v", this.ManaCost) + `,`,
		`Cooldown:` + fmt.Sprintf("%v", this.Cooldown) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EffectModifier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EffectModifier{`,
		`EffectID:` + fmt.Sprintf("%v", this.EffectID) + `,`,
		`Cancel:` + fmt.Sprintf("%v", this.Cancel) + `,`,
		`Stat:` + fmt.Sprintf("%v", this.Stat) + `,`,
		`Amount:` + strings.Replace(strings.Replace(this.Amount.String(), "Amount", "Amount", 1), `&`, ``, 1) + `,`,
		`Drain:` + strings.Replace(strings.Replace(this.Drain.String(), "Amount", "Amount", 1), `&`, ``, 1) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Delay:` + fmt.Sprintf("%v", this.Delay) + `,`,
		`Repeat:` + fmt.Sprintf("%v", this.Repeat) + `,`,
		`StackRules:` + strings.Replace(strings.Replace(this.StackRules.String(), "StackRules", "StackRules", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Amount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Amount{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Direct:` + fmt.Sprintf("%v", this.Direct) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Stat:` + fmt.Sprintf("%v", this.Stat) + `,`,
		`Percentage:` + fmt.Sprintf("%v", this.Percentage) + `,`,
		`EffectID:` + fmt.Sprintf("%v", this.EffectID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Trigger) String() string {
	if this == nil {
		return "nil"
	}
	keysForAbilityModifiers := make([]string, 0, len(this.AbilityModifiers))
	for k, _ := range this.AbilityModifiers {
		keysForAbilityModifiers = append(keysForAbilityModifiers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAbilityModifiers)
	mapStringForAbilityModifiers := "map[string]AbilityModifier{"
	for _, k := range keysForAbilityModifiers {
		mapStringForAbilityModifiers += fmt.Sprintf("%v: %v,", k, this.AbilityModifiers[k])
	}
	mapStringForAbilityModifiers += "}"
	keysForEffectModifiers := make([]string, 0, len(this.EffectModifiers))
	for k, _ := range this.EffectModifiers {
		keysForEffectModifiers = append(keysForEffectModifiers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffectModifiers)
	mapStringForEffectModifiers := "map[string]EffectModifier{"
	for _, k := range keysForEffectModifiers {
		mapStringForEffectModifiers += fmt.Sprintf("%v: %v,", k, this.EffectModifiers[k])
	}
	mapStringForEffectModifiers += "}"
	s := strings.Join([]string{`&Trigger{`,
		`Operator:` + fmt.Sprintf("%v", this.Operator) + `,`,
		`Amount:` + strings.Replace(this.Amount.String(), "Amount", "Amount", 1) + `,`,
		`Treshold:` + strings.Replace(this.Treshold.String(), "Amount", "Amount", 1) + `,`,
		`AbilityModifiers:` + mapStringForAbilityModifiers + `,`,
		`EffectModifiers:` + mapStringForEffectModifiers + `,`,
		`}`,
	}, "")
	return s
}
func (this *StackRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StackRules{`,
		`Stacks:` + fmt.Sprintf("%v", this.Stacks) + `,`,
		`MaxStacks:` + fmt.Sprintf("%v", this.MaxStacks) + `,`,
		`MaxDuration:` + fmt.Sprintf("%v", this.MaxDuration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Effect) String() string {
	if this == nil {
		return "nil"
	}
	keysForDrainTargets := make([]string, 0, len(this.DrainTargets))
	for k, _ := range this.DrainTargets {
		keysForDrainTargets = append(keysForDrainTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDrainTargets)
	mapStringForDrainTargets := "map[string]Target{"
	for _, k := range keysForDrainTargets {
		mapStringForDrainTargets += fmt.Sprintf("%v: %v,", k, this.DrainTargets[k])
	}
	mapStringForDrainTargets += "}"
	s := strings.Join([]string{`&Effect{`,
		`Stat:` + fmt.Sprintf("%v", this.Stat) + `,`,
		`Position:` + strings.Replace(fmt.Sprintf("%v", this.Position), "Vec2", "geometry.Vec2", 1) + `,`,
		`Force:` + strings.Replace(fmt.Sprintf("%v", this.Force), "Vec2", "geometry.Vec2", 1) + `,`,
		`Amount:` + strings.Replace(strings.Replace(this.Amount.String(), "Amount", "Amount", 1), `&`, ``, 1) + `,`,
		`Drain:` + strings.Replace(strings.Replace(this.Drain.String(), "Amount", "Amount", 1), `&`, ``, 1) + `,`,
		`DrainTargets:` + mapStringForDrainTargets + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`StackRules:` + strings.Replace(strings.Replace(this.StackRules.String(), "StackRules", "StackRules", 1), `&`, ``, 1) + `,`,
		`Delay:` + fmt.Sprintf("%v", this.Delay) + `,`,
		`Repeat:` + fmt.Sprintf("%v", this.Repeat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Component) String() string {
	if this == nil {
		return "nil"
	}
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]Target{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%v: %v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	keysForEffects := make([]string, 0, len(this.Effects))
	for k, _ := range this.Effects {
		keysForEffects = append(keysForEffects, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffects)
	mapStringForEffects := "map[string]Effect{"
	for _, k := range keysForEffects {
		mapStringForEffects += fmt.Sprintf("%v: %v,", k, this.Effects[k])
	}
	mapStringForEffects += "}"
	keysForTriggers := make([]string, 0, len(this.Triggers))
	for k, _ := range this.Triggers {
		keysForTriggers = append(keysForTriggers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTriggers)
	mapStringForTriggers := "map[string]Trigger{"
	for _, k := range keysForTriggers {
		mapStringForTriggers += fmt.Sprintf("%v: %v,", k, this.Triggers[k])
	}
	mapStringForTriggers += "}"
	s := strings.Join([]string{`&Component{`,
		`Targets:` + mapStringForTargets + `,`,
		`Effects:` + mapStringForEffects + `,`,
		`Triggers:` + mapStringForTriggers + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ability) String() string {
	if this == nil {
		return "nil"
	}
	keysForComponents := make([]string, 0, len(this.Components))
	for k, _ := range this.Components {
		keysForComponents = append(keysForComponents, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForComponents)
	mapStringForComponents := "map[string]Component{"
	for _, k := range keysForComponents {
		mapStringForComponents += fmt.Sprintf("%v: %v,", k, this.Components[k])
	}
	mapStringForComponents += "}"
	s := strings.Join([]string{`&Ability{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`Animation:` + fmt.Sprintf("%v", this.Animation) + `,`,
		`CastTime:` + fmt.Sprintf("%v", this.CastTime) + `,`,
		`ManaCost:` + fmt.Sprintf("%v", this.ManaCost) + `,`,
		`Cooldown:` + fmt.Sprintf("%v", this.Cooldown) + `,`,
		`Components:` + mapStringForComponents + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAbility(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AbilityModifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbilityModifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbilityModifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cancel = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastTime", wireType)
			}
			m.CastTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CastTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManaCost", wireType)
			}
			m.ManaCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManaCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooldown", wireType)
			}
			m.Cooldown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cooldown |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EffectModifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectModifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectModifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cancel = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			m.Stat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stat |= entity.Stat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Drain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeat", wireType)
			}
			m.Repeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Repeat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StackRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Amount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direct", wireType)
			}
			m.Direct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direct |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= Target(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			m.Stat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stat |= entity.Stat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			m.Percentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Percentage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= Operator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Treshold == nil {
				m.Treshold = &Amount{}
			}
			if err := m.Treshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityModifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbilityModifiers == nil {
				m.AbilityModifiers = make(map[string]AbilityModifier)
			}
			var mapkey string
			mapvalue := &AbilityModifier{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAbility
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAbility
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AbilityModifier{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AbilityModifiers[mapkey] = *mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectModifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectModifiers == nil {
				m.EffectModifiers = make(map[string]EffectModifier)
			}
			var mapkey string
			mapvalue := &EffectModifier{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAbility
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAbility
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EffectModifier{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EffectModifiers[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StackRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StackRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StackRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stacks", wireType)
			}
			m.Stacks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stacks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStacks", wireType)
			}
			m.MaxStacks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxStacks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDuration", wireType)
			}
			m.MaxDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Effect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Effect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Effect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			m.Stat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stat |= entity.Stat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &geometry.Vec2{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Force == nil {
				m.Force = &geometry.Vec2{}
			}
			if err := m.Force.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Drain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrainTargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DrainTargets == nil {
				m.DrainTargets = make(map[string]Target)
			}
			var mapkey string
			var mapvalue Target
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= Target(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DrainTargets[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StackRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeat", wireType)
			}
			m.Repeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Repeat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Component) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Component: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Component: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Targets == nil {
				m.Targets = make(map[string]Target)
			}
			var mapkey string
			var mapvalue Target
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= Target(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Targets[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Effects == nil {
				m.Effects = make(map[string]Effect)
			}
			var mapkey string
			mapvalue := &Effect{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAbility
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAbility
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Effect{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Effects[mapkey] = *mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Triggers == nil {
				m.Triggers = make(map[string]Trigger)
			}
			var mapkey string
			mapvalue := &Trigger{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAbility
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAbility
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Trigger{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Triggers[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Animation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastTime", wireType)
			}
			m.CastTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CastTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManaCost", wireType)
			}
			m.ManaCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManaCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooldown", wireType)
			}
			m.Cooldown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cooldown |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Components == nil {
				m.Components = make(map[string]Component)
			}
			var mapkey string
			mapvalue := &Component{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAbility
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAbility
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Component{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Components[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAbility(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAbility
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAbility
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAbility
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAbility        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAbility          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAbility = fmt.Errorf("proto: unexpected end of group")
)
