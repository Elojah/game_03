// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/pkg/ability/ability.proto

package ability

import (
	fmt "fmt"
	entity "github.com/elojah/game_03/pkg/entity"
	github_com_elojah_game_03_pkg_ulid "github.com/elojah/game_03/pkg/ulid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TargetType int32

const (
	NoneTarget  TargetType = 0
	Self        TargetType = 1
	Foe         TargetType = 3
	ClosestSelf TargetType = 4
	ClosestFoe  TargetType = 5
	// geometry aoe
	Rect   TargetType = 6
	Circle TargetType = 7
)

var TargetType_name = map[int32]string{
	0: "NoneTarget",
	1: "Self",
	3: "Foe",
	4: "ClosestSelf",
	5: "ClosestFoe",
	6: "Rect",
	7: "Circle",
}

var TargetType_value = map[string]int32{
	"NoneTarget":  0,
	"Self":        1,
	"Foe":         3,
	"ClosestSelf": 4,
	"ClosestFoe":  5,
	"Rect":        6,
	"Circle":      7,
}

func (TargetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{0}
}

type Move int32

const (
	NoneMove Move = 0
	Walk     Move = 1
	Teleport Move = 2
	Push     Move = 3
)

var Move_name = map[int32]string{
	0: "NoneMove",
	1: "Walk",
	2: "Teleport",
	3: "Push",
}

var Move_value = map[string]int32{
	"NoneMove": 0,
	"Walk":     1,
	"Teleport": 2,
	"Push":     3,
}

func (Move) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{1}
}

type Operator int32

const (
	NoneOperator Operator = 0
	Equal        Operator = 1
	NotEqual     Operator = 2
	Greater      Operator = 3
	Lesser       Operator = 4
)

var Operator_name = map[int32]string{
	0: "NoneOperator",
	1: "Equal",
	2: "NotEqual",
	3: "Greater",
	4: "Lesser",
}

var Operator_value = map[string]int32{
	"NoneOperator": 0,
	"Equal":        1,
	"NotEqual":     2,
	"Greater":      3,
	"Lesser":       4,
}

func (Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{2}
}

type MoveTarget struct {
	Move       Move                                  `protobuf:"varint,1,opt,name=Move,proto3,enum=ability.Move" json:"Move,omitempty"`
	TargetType TargetType                            `protobuf:"varint,2,opt,name=TargetType,proto3,enum=ability.TargetType" json:"TargetType,omitempty"`
	TargetID   github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,3,opt,name=TargetID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"TargetID"`
}

func (m *MoveTarget) Reset()      { *m = MoveTarget{} }
func (*MoveTarget) ProtoMessage() {}
func (*MoveTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{0}
}
func (m *MoveTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveTarget.Merge(m, src)
}
func (m *MoveTarget) XXX_Size() int {
	return m.Size()
}
func (m *MoveTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveTarget.DiscardUnknown(m)
}

var xxx_messageInfo_MoveTarget proto.InternalMessageInfo

type Target struct {
	Type  TargetType `protobuf:"varint,1,opt,name=Type,proto3,enum=ability.TargetType" json:"Type,omitempty"`
	Range int64      `protobuf:"varint,2,opt,name=Range,proto3" json:"Range,omitempty"`
	// optionals
	Radius int64 `protobuf:"varint,3,opt,name=Radius,proto3" json:"Radius,omitempty"`
	Width  int64 `protobuf:"varint,4,opt,name=Width,proto3" json:"Width,omitempty"`
	Height int64 `protobuf:"varint,5,opt,name=Height,proto3" json:"Height,omitempty"`
	// Move target optional
	Move MoveTarget `protobuf:"bytes,6,opt,name=Move,proto3" json:"Move"`
}

func (m *Target) Reset()      { *m = Target{} }
func (*Target) ProtoMessage() {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{1}
}
func (m *Target) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Target.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return m.Size()
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

type AbilityModifier struct {
	// Cancel ability
	Cancel bool `protobuf:"varint,1,opt,name=Cancel,proto3" json:"Cancel,omitempty"`
	// Add cast time
	CastTime int64 `protobuf:"varint,2,opt,name=CastTime,proto3" json:"CastTime,omitempty"`
	// Add mana cost
	ManaCost int64 `protobuf:"varint,3,opt,name=ManaCost,proto3" json:"ManaCost,omitempty"`
	// Add cooldown
	Cooldown int64 `protobuf:"varint,4,opt,name=Cooldown,proto3" json:"Cooldown,omitempty"`
}

func (m *AbilityModifier) Reset()      { *m = AbilityModifier{} }
func (*AbilityModifier) ProtoMessage() {}
func (*AbilityModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{2}
}
func (m *AbilityModifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AbilityModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AbilityModifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AbilityModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbilityModifier.Merge(m, src)
}
func (m *AbilityModifier) XXX_Size() int {
	return m.Size()
}
func (m *AbilityModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_AbilityModifier.DiscardUnknown(m)
}

var xxx_messageInfo_AbilityModifier proto.InternalMessageInfo

type EffectModifier struct {
	// Effect modifiers
	EffectID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=EffectID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"EffectID"`
	// Cancel effect
	Cancel bool `protobuf:"varint,2,opt,name=Cancel,proto3" json:"Cancel,omitempty"`
	// Change affected stat
	Stat entity.Stat `protobuf:"varint,3,opt,name=Stat,proto3,enum=entity.Stat" json:"Stat,omitempty"`
	// Add amount
	Amount Amount `protobuf:"bytes,4,opt,name=Amount,proto3" json:"Amount"`
	// Change duration
	Duration int64 `protobuf:"varint,5,opt,name=Duration,proto3" json:"Duration,omitempty"`
	// Add Delay
	Delay int64 `protobuf:"varint,6,opt,name=Delay,proto3" json:"Delay,omitempty"`
	// Change tick rate
	Repeat int64 `protobuf:"varint,7,opt,name=Repeat,proto3" json:"Repeat,omitempty"`
	// Add stacks
	StackRules StackRules `protobuf:"bytes,8,opt,name=StackRules,proto3" json:"StackRules"`
}

func (m *EffectModifier) Reset()      { *m = EffectModifier{} }
func (*EffectModifier) ProtoMessage() {}
func (*EffectModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{3}
}
func (m *EffectModifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectModifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EffectModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectModifier.Merge(m, src)
}
func (m *EffectModifier) XXX_Size() int {
	return m.Size()
}
func (m *EffectModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectModifier.DiscardUnknown(m)
}

var xxx_messageInfo_EffectModifier proto.InternalMessageInfo

// Amount used for ability
type Amount struct {
	ID     github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"ID"`
	Direct int64                                 `protobuf:"varint,2,opt,name=Direct,proto3" json:"Direct,omitempty"`
	Target *Target                               `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	// Stat percentage of target
	Stat       entity.Stat `protobuf:"varint,4,opt,name=Stat,proto3,enum=entity.Stat" json:"Stat,omitempty"`
	Percentage int64       `protobuf:"varint,5,opt,name=Percentage,proto3" json:"Percentage,omitempty"`
	// number of effect stacks on target
	EffectID github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,6,opt,name=EffectID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"EffectID"`
	// StatOutcome indicates if we use stat diff of outcome effect
	// if false, use e.Stat/effect value, if true, use e.PrevStat - e.NewStat post effect.
	// if true in first effect map (no diff yet), amount is invalid == 0
	StatOutcome bool `protobuf:"varint,7,opt,name=StatOutcome,proto3" json:"StatOutcome,omitempty"`
}

func (m *Amount) Reset()      { *m = Amount{} }
func (*Amount) ProtoMessage() {}
func (*Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{4}
}
func (m *Amount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Amount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amount.Merge(m, src)
}
func (m *Amount) XXX_Size() int {
	return m.Size()
}
func (m *Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_Amount proto.InternalMessageInfo

type Trigger struct {
	Operator         Operator                   `protobuf:"varint,1,opt,name=Operator,proto3,enum=ability.Operator" json:"Operator,omitempty"`
	Amount           *Amount                    `protobuf:"bytes,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Treshold         *Amount                    `protobuf:"bytes,3,opt,name=Treshold,proto3" json:"Treshold,omitempty"`
	AbilityModifiers map[string]AbilityModifier `protobuf:"bytes,4,rep,name=AbilityModifiers,proto3" json:"AbilityModifiers" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EffectModifiers  map[string]EffectModifier  `protobuf:"bytes,5,rep,name=EffectModifiers,proto3" json:"EffectModifiers" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Trigger) Reset()      { *m = Trigger{} }
func (*Trigger) ProtoMessage() {}
func (*Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{5}
}
func (m *Trigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trigger.Merge(m, src)
}
func (m *Trigger) XXX_Size() int {
	return m.Size()
}
func (m *Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Trigger proto.InternalMessageInfo

type StackRules struct {
	Stacks      int64 `protobuf:"varint,1,opt,name=Stacks,proto3" json:"Stacks,omitempty"`
	MaxStacks   int64 `protobuf:"varint,2,opt,name=MaxStacks,proto3" json:"MaxStacks,omitempty"`
	MaxDuration int64 `protobuf:"varint,3,opt,name=MaxDuration,proto3" json:"MaxDuration,omitempty"`
}

func (m *StackRules) Reset()      { *m = StackRules{} }
func (*StackRules) ProtoMessage() {}
func (*StackRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{6}
}
func (m *StackRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StackRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StackRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StackRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackRules.Merge(m, src)
}
func (m *StackRules) XXX_Size() int {
	return m.Size()
}
func (m *StackRules) XXX_DiscardUnknown() {
	xxx_messageInfo_StackRules.DiscardUnknown(m)
}

var xxx_messageInfo_StackRules proto.InternalMessageInfo

type Effect struct {
	// if HP/MP, duration is ignored
	Stat   entity.Stat `protobuf:"varint,1,opt,name=Stat,proto3,enum=entity.Stat" json:"Stat,omitempty"`
	Amount Amount      `protobuf:"bytes,2,opt,name=Amount,proto3" json:"Amount"`
	// stack rules
	// if duration 0 or ignored, overtime effects ignored too
	Duration int64                                 `protobuf:"varint,4,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Icon     github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,5,opt,name=Icon,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"Icon"`
	// Tick only if duration > 0 and not ignored
	Delay      int64             `protobuf:"varint,6,opt,name=Delay,proto3" json:"Delay,omitempty"`
	Repeat     int64             `protobuf:"varint,7,opt,name=Repeat,proto3" json:"Repeat,omitempty"`
	StackRules StackRules        `protobuf:"bytes,8,opt,name=StackRules,proto3" json:"StackRules"`
	Targets    map[string]Target `protobuf:"bytes,9,rep,name=Targets,proto3" json:"Targets" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Triggers to check before applying this effect and can run on this effect or children only.
	Triggers map[string]Trigger `protobuf:"bytes,10,rep,name=Triggers,proto3" json:"Triggers" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// recursive effects to run after this effect
	Effects map[string]Effect `protobuf:"bytes,11,rep,name=Effects,proto3" json:"Effects" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Effect) Reset()      { *m = Effect{} }
func (*Effect) ProtoMessage() {}
func (*Effect) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{7}
}
func (m *Effect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Effect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Effect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Effect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Effect.Merge(m, src)
}
func (m *Effect) XXX_Size() int {
	return m.Size()
}
func (m *Effect) XXX_DiscardUnknown() {
	xxx_messageInfo_Effect.DiscardUnknown(m)
}

var xxx_messageInfo_Effect proto.InternalMessageInfo

type A struct {
	ID        github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"ID"`
	Name      string                                `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Icon      github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,3,opt,name=Icon,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"Icon"`
	Animation github_com_elojah_game_03_pkg_ulid.ID `protobuf:"bytes,4,opt,name=Animation,proto3,customtype=github.com/elojah/game_03/pkg/ulid.ID" json:"Animation"`
	CastTime  int64                                 `protobuf:"varint,5,opt,name=CastTime,proto3" json:"CastTime,omitempty"`
	ManaCost  int64                                 `protobuf:"varint,6,opt,name=ManaCost,proto3" json:"ManaCost,omitempty"`
	Cooldown  int64                                 `protobuf:"varint,7,opt,name=Cooldown,proto3" json:"Cooldown,omitempty"`
	Effects   map[string]Effect                     `protobuf:"bytes,8,rep,name=Effects,proto3" json:"Effects" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *A) Reset()      { *m = A{} }
func (*A) ProtoMessage() {}
func (*A) Descriptor() ([]byte, []int) {
	return fileDescriptor_23b56474bae35107, []int{8}
}
func (m *A) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *A) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_A.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *A) XXX_Merge(src proto.Message) {
	xxx_messageInfo_A.Merge(m, src)
}
func (m *A) XXX_Size() int {
	return m.Size()
}
func (m *A) XXX_DiscardUnknown() {
	xxx_messageInfo_A.DiscardUnknown(m)
}

var xxx_messageInfo_A proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ability.TargetType", TargetType_name, TargetType_value)
	golang_proto.RegisterEnum("ability.TargetType", TargetType_name, TargetType_value)
	proto.RegisterEnum("ability.Move", Move_name, Move_value)
	golang_proto.RegisterEnum("ability.Move", Move_name, Move_value)
	proto.RegisterEnum("ability.Operator", Operator_name, Operator_value)
	golang_proto.RegisterEnum("ability.Operator", Operator_name, Operator_value)
	proto.RegisterType((*MoveTarget)(nil), "ability.MoveTarget")
	golang_proto.RegisterType((*MoveTarget)(nil), "ability.MoveTarget")
	proto.RegisterType((*Target)(nil), "ability.Target")
	golang_proto.RegisterType((*Target)(nil), "ability.Target")
	proto.RegisterType((*AbilityModifier)(nil), "ability.AbilityModifier")
	golang_proto.RegisterType((*AbilityModifier)(nil), "ability.AbilityModifier")
	proto.RegisterType((*EffectModifier)(nil), "ability.EffectModifier")
	golang_proto.RegisterType((*EffectModifier)(nil), "ability.EffectModifier")
	proto.RegisterType((*Amount)(nil), "ability.Amount")
	golang_proto.RegisterType((*Amount)(nil), "ability.Amount")
	proto.RegisterType((*Trigger)(nil), "ability.Trigger")
	golang_proto.RegisterType((*Trigger)(nil), "ability.Trigger")
	proto.RegisterMapType((map[string]AbilityModifier)(nil), "ability.Trigger.AbilityModifiersEntry")
	golang_proto.RegisterMapType((map[string]AbilityModifier)(nil), "ability.Trigger.AbilityModifiersEntry")
	proto.RegisterMapType((map[string]EffectModifier)(nil), "ability.Trigger.EffectModifiersEntry")
	golang_proto.RegisterMapType((map[string]EffectModifier)(nil), "ability.Trigger.EffectModifiersEntry")
	proto.RegisterType((*StackRules)(nil), "ability.StackRules")
	golang_proto.RegisterType((*StackRules)(nil), "ability.StackRules")
	proto.RegisterType((*Effect)(nil), "ability.Effect")
	golang_proto.RegisterType((*Effect)(nil), "ability.Effect")
	proto.RegisterMapType((map[string]Effect)(nil), "ability.Effect.EffectsEntry")
	golang_proto.RegisterMapType((map[string]Effect)(nil), "ability.Effect.EffectsEntry")
	proto.RegisterMapType((map[string]Target)(nil), "ability.Effect.TargetsEntry")
	golang_proto.RegisterMapType((map[string]Target)(nil), "ability.Effect.TargetsEntry")
	proto.RegisterMapType((map[string]Trigger)(nil), "ability.Effect.TriggersEntry")
	golang_proto.RegisterMapType((map[string]Trigger)(nil), "ability.Effect.TriggersEntry")
	proto.RegisterType((*A)(nil), "ability.A")
	golang_proto.RegisterType((*A)(nil), "ability.A")
	proto.RegisterMapType((map[string]Effect)(nil), "ability.A.EffectsEntry")
	golang_proto.RegisterMapType((map[string]Effect)(nil), "ability.A.EffectsEntry")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_03/pkg/ability/ability.proto", fileDescriptor_23b56474bae35107)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/pkg/ability/ability.proto", fileDescriptor_23b56474bae35107)
}

var fileDescriptor_23b56474bae35107 = []byte{
	// 1193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0x78, 0xd7, 0xbf, 0x9e, 0xdd, 0x64, 0xbf, 0xf3, 0x2d, 0xb0, 0xb2, 0xca, 0xd6, 0x58,
	0x4a, 0x1b, 0x05, 0xd9, 0x81, 0x44, 0xe2, 0x97, 0x40, 0xc8, 0x89, 0x03, 0xb5, 0x82, 0xd3, 0x6a,
	0x63, 0x54, 0x24, 0x84, 0xd0, 0xc4, 0x1e, 0xdb, 0x4b, 0xd6, 0x5e, 0xb3, 0x3b, 0x2e, 0xcd, 0x01,
	0x89, 0x3f, 0x81, 0x3f, 0x83, 0x1b, 0x47, 0x38, 0x70, 0xc8, 0x8d, 0x70, 0xcb, 0xb1, 0xe2, 0x50,
	0x11, 0xe7, 0xc2, 0xb1, 0x47, 0x24, 0x2e, 0x68, 0x7e, 0x78, 0xbd, 0xeb, 0xb8, 0x81, 0xb4, 0x88,
	0x53, 0xf6, 0xf3, 0xe6, 0xbd, 0x37, 0x9f, 0x79, 0xf3, 0x79, 0xcf, 0x13, 0xd8, 0xec, 0x39, 0xac,
	0x3f, 0x3e, 0xa8, 0xb6, 0xbd, 0xc1, 0x3a, 0x75, 0xbd, 0x2f, 0x48, 0x7f, 0xbd, 0x47, 0x06, 0xf4,
	0xf3, 0xd7, 0x36, 0xd7, 0x47, 0x87, 0xbd, 0x75, 0x72, 0xe0, 0xb8, 0x0e, 0x3b, 0x9a, 0xfe, 0xad,
	0x8e, 0x7c, 0x8f, 0x79, 0x38, 0xa3, 0x60, 0xb1, 0x12, 0x89, 0xee, 0x79, 0x3d, 0x6f, 0x5d, 0xac,
	0x1f, 0x8c, 0xbb, 0x02, 0x09, 0x20, 0xbe, 0x64, 0x5c, 0xf1, 0xf5, 0xcb, 0x37, 0xa3, 0x43, 0xc6,
	0xf7, 0x92, 0x7f, 0x64, 0x48, 0xf9, 0x7b, 0x04, 0xd0, 0xf4, 0x1e, 0xd0, 0x16, 0xf1, 0x7b, 0x94,
	0xe1, 0x57, 0x40, 0xe7, 0xc8, 0x44, 0x25, 0xb4, 0xba, 0xb4, 0x71, 0xad, 0x3a, 0xe5, 0xc5, 0x8d,
	0xb6, 0x58, 0xc2, 0x9b, 0x00, 0xd2, 0xb9, 0x75, 0x34, 0xa2, 0x66, 0x52, 0x38, 0xfe, 0x3f, 0x74,
	0x9c, 0x2d, 0xd9, 0x11, 0x37, 0xdc, 0x80, 0xac, 0x44, 0x8d, 0xba, 0xa9, 0x95, 0xd0, 0x6a, 0x61,
	0xab, 0x72, 0xf2, 0xf8, 0x66, 0xe2, 0xd7, 0xc7, 0x37, 0x57, 0x2e, 0xe7, 0x3c, 0x76, 0x9d, 0x4e,
	0xb5, 0x51, 0xb7, 0xc3, 0xf0, 0xf2, 0x4f, 0x08, 0xd2, 0x8a, 0xed, 0x6d, 0xd0, 0x05, 0x09, 0xf4,
	0x74, 0x12, 0xc2, 0x01, 0x5f, 0x87, 0x94, 0x4d, 0x86, 0x3d, 0x49, 0x57, 0xb3, 0x25, 0xc0, 0x2f,
	0x42, 0xda, 0x26, 0x1d, 0x67, 0x1c, 0x08, 0x4a, 0x9a, 0xad, 0x10, 0xf7, 0xbe, 0xef, 0x74, 0x58,
	0xdf, 0xd4, 0xa5, 0xb7, 0x00, 0xdc, 0xfb, 0x0e, 0x75, 0x7a, 0x7d, 0x66, 0xa6, 0xa4, 0xb7, 0x44,
	0xb8, 0xa2, 0x4a, 0x96, 0x2e, 0xa1, 0xd5, 0x7c, 0x84, 0xc4, 0xac, 0xaa, 0x5b, 0x3a, 0x3f, 0xab,
	0x2c, 0x5f, 0xf9, 0x6b, 0x58, 0xae, 0x49, 0x8f, 0xa6, 0xd7, 0x71, 0xba, 0x0e, 0xf5, 0x79, 0xe6,
	0x6d, 0x32, 0x6c, 0x53, 0x57, 0x1c, 0x24, 0x6b, 0x2b, 0x84, 0x8b, 0x90, 0xdd, 0x26, 0x01, 0x6b,
	0x39, 0x83, 0x29, 0xf1, 0x10, 0xf3, 0xb5, 0x26, 0x19, 0x92, 0x6d, 0x2f, 0x60, 0x8a, 0x7d, 0x88,
	0x45, 0x9c, 0xe7, 0xb9, 0x1d, 0xef, 0xab, 0xa1, 0x3a, 0x42, 0x88, 0xcb, 0xbf, 0x24, 0x61, 0x69,
	0xa7, 0xdb, 0xa5, 0x6d, 0x16, 0x6e, 0xdf, 0x80, 0xac, 0xb4, 0x34, 0xea, 0x82, 0xc0, 0xd5, 0xef,
	0x66, 0x1a, 0x1e, 0x39, 0x49, 0x32, 0x76, 0x92, 0x12, 0xe8, 0xfb, 0x8c, 0x48, 0xa6, 0x4b, 0x1b,
	0x85, 0xaa, 0x92, 0x20, 0xb7, 0xd9, 0x62, 0x05, 0x57, 0x20, 0x5d, 0x1b, 0x78, 0xe3, 0x21, 0x13,
	0x8c, 0xf3, 0x1b, 0xcb, 0x61, 0x1d, 0xa5, 0x59, 0xd5, 0x50, 0x39, 0xf1, 0x23, 0xd6, 0xc7, 0x3e,
	0x61, 0x8e, 0x37, 0x54, 0xd7, 0x11, 0x62, 0x7e, 0x7d, 0x75, 0xea, 0x92, 0x23, 0x71, 0x23, 0x9a,
	0x2d, 0x81, 0xb8, 0x6c, 0x3a, 0xa2, 0x84, 0x99, 0x19, 0x75, 0xd9, 0x02, 0xe1, 0xb7, 0x01, 0xf6,
	0x19, 0x69, 0x1f, 0xda, 0x63, 0x97, 0x06, 0x66, 0x76, 0xee, 0x12, 0x67, 0x4b, 0x8a, 0x40, 0xc4,
	0xb9, 0xfc, 0x43, 0x72, 0x4a, 0x1a, 0xbf, 0x07, 0xc9, 0x67, 0xad, 0x5e, 0x52, 0xd6, 0xad, 0xee,
	0xf8, 0xb4, 0xcd, 0xd4, 0x3d, 0x2b, 0x84, 0x6f, 0x4f, 0xa5, 0x2e, 0x2a, 0x17, 0xad, 0x8a, 0x34,
	0xdb, 0xd3, 0x4e, 0x98, 0x16, 0x58, 0x7f, 0x6a, 0x81, 0x2d, 0x80, 0x7b, 0xd4, 0x6f, 0xd3, 0x21,
	0x23, 0x3d, 0xaa, 0x6a, 0x16, 0xb1, 0xc4, 0x54, 0x90, 0x7e, 0x3e, 0x15, 0x94, 0x20, 0xcf, 0xb7,
	0xbc, 0x3b, 0x66, 0x6d, 0x6f, 0x40, 0x45, 0xbd, 0xb3, 0x76, 0xd4, 0x54, 0xfe, 0x53, 0x83, 0x4c,
	0xcb, 0x77, 0x7a, 0x3d, 0xea, 0xe3, 0x0a, 0x64, 0xef, 0x8e, 0xa8, 0x4f, 0x98, 0xe7, 0xab, 0x46,
	0xfe, 0x5f, 0x78, 0xca, 0xe9, 0x82, 0x1d, 0xba, 0xf0, 0x92, 0x28, 0xa1, 0x24, 0x17, 0x0a, 0x25,
	0x94, 0xc8, 0xab, 0x90, 0x6d, 0xf9, 0x34, 0xe8, 0x7b, 0x6e, 0xe7, 0x42, 0xf5, 0x94, 0x6b, 0xe8,
	0x80, 0x3f, 0x01, 0x63, 0xae, 0x2b, 0x03, 0x53, 0x2f, 0x69, 0xab, 0xf9, 0x8d, 0x5b, 0xb3, 0x92,
	0x4b, 0xc2, 0xd5, 0x79, 0xc7, 0x9d, 0x21, 0xf3, 0x8f, 0x94, 0x3c, 0x2e, 0x64, 0xc1, 0x1f, 0xc3,
	0x72, 0xbc, 0xdf, 0x02, 0x33, 0x25, 0x12, 0xaf, 0x5c, 0x48, 0x3c, 0xe7, 0x17, 0xcd, 0x3b, 0x9f,
	0xa3, 0xf8, 0x19, 0xbc, 0xb0, 0x90, 0x07, 0x36, 0x40, 0x3b, 0xa4, 0x47, 0xa2, 0x92, 0x39, 0x9b,
	0x7f, 0xe2, 0x2a, 0xa4, 0x1e, 0x10, 0x77, 0x4c, 0x55, 0xc1, 0xcc, 0x59, 0x15, 0xe2, 0x09, 0x6c,
	0xe9, 0xf6, 0x4e, 0xf2, 0x2d, 0x54, 0xfc, 0x14, 0xae, 0x2f, 0x62, 0xb3, 0x20, 0x7b, 0x25, 0x9e,
	0xfd, 0xa5, 0x30, 0x7b, 0x3c, 0x3e, 0x92, 0xbc, 0xdc, 0x89, 0xb6, 0x1c, 0xd7, 0xbe, 0x40, 0x81,
	0xc8, 0xaa, 0xd9, 0x0a, 0xe1, 0x1b, 0x90, 0x6b, 0x92, 0x87, 0x6a, 0x49, 0xb6, 0xc5, 0xcc, 0xc0,
	0x35, 0xd6, 0x24, 0x0f, 0xc3, 0x19, 0x20, 0x47, 0x60, 0xd4, 0x54, 0xfe, 0x39, 0x05, 0x69, 0xc9,
	0x21, 0xec, 0x0e, 0xf4, 0x0f, 0xc6, 0x4f, 0xf2, 0xaa, 0xe3, 0x47, 0x9f, 0x1b, 0x3f, 0x35, 0xd0,
	0x1b, 0x6d, 0x35, 0x96, 0xae, 0xdc, 0x44, 0x22, 0xf4, 0x3f, 0x9b, 0x60, 0xf8, 0x5d, 0xc8, 0xc8,
	0x01, 0x12, 0x98, 0x39, 0x21, 0xca, 0x1b, 0x73, 0xd7, 0xa7, 0xe6, 0x4c, 0x4c, 0x8b, 0xd3, 0x10,
	0xfc, 0x3e, 0xef, 0x30, 0x21, 0xdd, 0xc0, 0x04, 0x11, 0xfe, 0xf2, 0x85, 0x70, 0xb5, 0x1e, 0x8d,
	0x0f, 0x83, 0xf8, 0xf6, 0xd2, 0x2f, 0x30, 0xf3, 0x8b, 0xb7, 0x57, 0xcb, 0xb1, 0xed, 0x95, 0xad,
	0xb8, 0x0b, 0x85, 0x28, 0xbb, 0x05, 0xda, 0x5c, 0x89, 0x6b, 0xf3, 0xc2, 0xf4, 0x8c, 0x08, 0xbe,
	0x09, 0xd7, 0x62, 0x5c, 0x17, 0x64, 0xbb, 0x15, 0xcf, 0x66, 0xcc, 0xf7, 0x6f, 0x34, 0xdd, 0x2e,
	0x14, 0xa2, 0xd4, 0xaf, 0xc2, 0x4d, 0xc6, 0x45, 0xfb, 0xe5, 0x58, 0x03, 0x54, 0x7b, 0xde, 0x9f,
	0x18, 0x0c, 0xfa, 0x1e, 0x51, 0x0f, 0x89, 0x9c, 0x2d, 0xbe, 0x43, 0xa9, 0x6a, 0xcf, 0x2e, 0xd5,
	0x5d, 0xc8, 0xd5, 0x86, 0xce, 0x60, 0xd6, 0x0a, 0x57, 0xce, 0x33, 0x8b, 0x8f, 0x3d, 0x78, 0x52,
	0x97, 0x3c, 0x78, 0xd2, 0x97, 0x3c, 0x78, 0x32, 0xf1, 0x07, 0x0f, 0x7e, 0x73, 0xa6, 0xb1, 0xac,
	0xd0, 0xd8, 0x6c, 0x42, 0xd5, 0xfe, 0x4e, 0x5e, 0xff, 0xda, 0x15, 0xae, 0x75, 0xa3, 0x8f, 0x66,
	0xbc, 0x04, 0xb0, 0xe7, 0x0d, 0xd5, 0xeb, 0xd0, 0x48, 0xe0, 0x2c, 0xe8, 0xfb, 0xd4, 0xed, 0x1a,
	0x08, 0x67, 0x40, 0xfb, 0xc0, 0xa3, 0x86, 0x86, 0x97, 0x21, 0xbf, 0xed, 0x7a, 0x01, 0x0d, 0x98,
	0x58, 0xd1, 0x79, 0x8c, 0x32, 0x70, 0x87, 0x14, 0x8f, 0xb1, 0x69, 0x9b, 0x19, 0x69, 0x0c, 0x90,
	0xde, 0x76, 0xfc, 0xb6, 0x4b, 0x8d, 0xcc, 0xda, 0x1b, 0xf2, 0x31, 0x8a, 0x0b, 0x90, 0xe5, 0x3b,
	0xf0, 0x6f, 0x99, 0xff, 0x3e, 0x71, 0x0f, 0x0d, 0xc4, 0xed, 0x2d, 0xea, 0xd2, 0x91, 0xe7, 0x33,
	0x23, 0xc9, 0xed, 0xf7, 0xc6, 0x41, 0xdf, 0xd0, 0xd6, 0xf6, 0x66, 0x3f, 0xc2, 0xd8, 0x80, 0x02,
	0x8f, 0x9d, 0x62, 0x23, 0x81, 0x73, 0x90, 0xda, 0xf9, 0x72, 0x4c, 0x5c, 0x99, 0x60, 0xcf, 0x63,
	0x12, 0x25, 0x71, 0x1e, 0x32, 0x1f, 0xfa, 0x94, 0x30, 0xea, 0x1b, 0x1a, 0xe7, 0xf1, 0x11, 0x0d,
	0x02, 0xea, 0x1b, 0xfa, 0xd6, 0x9d, 0x93, 0x33, 0x2b, 0x71, 0x7a, 0x66, 0x25, 0x1e, 0x9d, 0x59,
	0x89, 0x27, 0x67, 0x16, 0xfa, 0xe3, 0xcc, 0x42, 0xdf, 0x4c, 0x2c, 0xf4, 0xdd, 0xc4, 0x42, 0x3f,
	0x4e, 0x2c, 0x74, 0x3c, 0xb1, 0xd0, 0xc9, 0xc4, 0x42, 0xa7, 0x13, 0x0b, 0xfd, 0x36, 0xb1, 0xd0,
	0xef, 0x13, 0x2b, 0xf1, 0x64, 0x62, 0xa1, 0x6f, 0xcf, 0xad, 0xc4, 0xf1, 0xb9, 0x85, 0x4e, 0xcf,
	0xad, 0xc4, 0xa3, 0x73, 0x2b, 0x71, 0x90, 0x16, 0xff, 0xa7, 0x6c, 0xfe, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x8f, 0xf5, 0x8f, 0xb8, 0x49, 0x0d, 0x00, 0x00,
}

func (x TargetType) String() string {
	s, ok := TargetType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Move) String() string {
	s, ok := Move_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Operator) String() string {
	s, ok := Operator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MoveTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoveTarget)
	if !ok {
		that2, ok := that.(MoveTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Move != that1.Move {
		return false
	}
	if this.TargetType != that1.TargetType {
		return false
	}
	if !this.TargetID.Equal(that1.TargetID) {
		return false
	}
	return true
}
func (this *Target) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target)
	if !ok {
		that2, ok := that.(Target)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Range != that1.Range {
		return false
	}
	if this.Radius != that1.Radius {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if !this.Move.Equal(&that1.Move) {
		return false
	}
	return true
}
func (this *AbilityModifier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AbilityModifier)
	if !ok {
		that2, ok := that.(AbilityModifier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cancel != that1.Cancel {
		return false
	}
	if this.CastTime != that1.CastTime {
		return false
	}
	if this.ManaCost != that1.ManaCost {
		return false
	}
	if this.Cooldown != that1.Cooldown {
		return false
	}
	return true
}
func (this *EffectModifier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EffectModifier)
	if !ok {
		that2, ok := that.(EffectModifier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EffectID.Equal(that1.EffectID) {
		return false
	}
	if this.Cancel != that1.Cancel {
		return false
	}
	if this.Stat != that1.Stat {
		return false
	}
	if !this.Amount.Equal(&that1.Amount) {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Delay != that1.Delay {
		return false
	}
	if this.Repeat != that1.Repeat {
		return false
	}
	if !this.StackRules.Equal(&that1.StackRules) {
		return false
	}
	return true
}
func (this *Amount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Amount)
	if !ok {
		that2, ok := that.(Amount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Direct != that1.Direct {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if this.Stat != that1.Stat {
		return false
	}
	if this.Percentage != that1.Percentage {
		return false
	}
	if !this.EffectID.Equal(that1.EffectID) {
		return false
	}
	if this.StatOutcome != that1.StatOutcome {
		return false
	}
	return true
}
func (this *Trigger) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Trigger)
	if !ok {
		that2, ok := that.(Trigger)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if !this.Treshold.Equal(that1.Treshold) {
		return false
	}
	if len(this.AbilityModifiers) != len(that1.AbilityModifiers) {
		return false
	}
	for i := range this.AbilityModifiers {
		a := this.AbilityModifiers[i]
		b := that1.AbilityModifiers[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.EffectModifiers) != len(that1.EffectModifiers) {
		return false
	}
	for i := range this.EffectModifiers {
		a := this.EffectModifiers[i]
		b := that1.EffectModifiers[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *StackRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StackRules)
	if !ok {
		that2, ok := that.(StackRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Stacks != that1.Stacks {
		return false
	}
	if this.MaxStacks != that1.MaxStacks {
		return false
	}
	if this.MaxDuration != that1.MaxDuration {
		return false
	}
	return true
}
func (this *Effect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Effect)
	if !ok {
		that2, ok := that.(Effect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Stat != that1.Stat {
		return false
	}
	if !this.Amount.Equal(&that1.Amount) {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if !this.Icon.Equal(that1.Icon) {
		return false
	}
	if this.Delay != that1.Delay {
		return false
	}
	if this.Repeat != that1.Repeat {
		return false
	}
	if !this.StackRules.Equal(&that1.StackRules) {
		return false
	}
	if len(this.Targets) != len(that1.Targets) {
		return false
	}
	for i := range this.Targets {
		a := this.Targets[i]
		b := that1.Targets[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.Triggers) != len(that1.Triggers) {
		return false
	}
	for i := range this.Triggers {
		a := this.Triggers[i]
		b := that1.Triggers[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.Effects) != len(that1.Effects) {
		return false
	}
	for i := range this.Effects {
		a := this.Effects[i]
		b := that1.Effects[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *A) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*A)
	if !ok {
		that2, ok := that.(A)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Icon.Equal(that1.Icon) {
		return false
	}
	if !this.Animation.Equal(that1.Animation) {
		return false
	}
	if this.CastTime != that1.CastTime {
		return false
	}
	if this.ManaCost != that1.ManaCost {
		return false
	}
	if this.Cooldown != that1.Cooldown {
		return false
	}
	if len(this.Effects) != len(that1.Effects) {
		return false
	}
	for i := range this.Effects {
		a := this.Effects[i]
		b := that1.Effects[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *MoveTarget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ability.MoveTarget{")
	s = append(s, "Move: "+fmt.Sprintf("%#v", this.Move)+",\n")
	s = append(s, "TargetType: "+fmt.Sprintf("%#v", this.TargetType)+",\n")
	s = append(s, "TargetID: "+fmt.Sprintf("%#v", this.TargetID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Target) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&ability.Target{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	s = append(s, "Radius: "+fmt.Sprintf("%#v", this.Radius)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Move: "+strings.Replace(this.Move.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AbilityModifier) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ability.AbilityModifier{")
	s = append(s, "Cancel: "+fmt.Sprintf("%#v", this.Cancel)+",\n")
	s = append(s, "CastTime: "+fmt.Sprintf("%#v", this.CastTime)+",\n")
	s = append(s, "ManaCost: "+fmt.Sprintf("%#v", this.ManaCost)+",\n")
	s = append(s, "Cooldown: "+fmt.Sprintf("%#v", this.Cooldown)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EffectModifier) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&ability.EffectModifier{")
	s = append(s, "EffectID: "+fmt.Sprintf("%#v", this.EffectID)+",\n")
	s = append(s, "Cancel: "+fmt.Sprintf("%#v", this.Cancel)+",\n")
	s = append(s, "Stat: "+fmt.Sprintf("%#v", this.Stat)+",\n")
	s = append(s, "Amount: "+strings.Replace(this.Amount.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Delay: "+fmt.Sprintf("%#v", this.Delay)+",\n")
	s = append(s, "Repeat: "+fmt.Sprintf("%#v", this.Repeat)+",\n")
	s = append(s, "StackRules: "+strings.Replace(this.StackRules.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Amount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&ability.Amount{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Direct: "+fmt.Sprintf("%#v", this.Direct)+",\n")
	if this.Target != nil {
		s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	}
	s = append(s, "Stat: "+fmt.Sprintf("%#v", this.Stat)+",\n")
	s = append(s, "Percentage: "+fmt.Sprintf("%#v", this.Percentage)+",\n")
	s = append(s, "EffectID: "+fmt.Sprintf("%#v", this.EffectID)+",\n")
	s = append(s, "StatOutcome: "+fmt.Sprintf("%#v", this.StatOutcome)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Trigger) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ability.Trigger{")
	s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	if this.Amount != nil {
		s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	}
	if this.Treshold != nil {
		s = append(s, "Treshold: "+fmt.Sprintf("%#v", this.Treshold)+",\n")
	}
	keysForAbilityModifiers := make([]string, 0, len(this.AbilityModifiers))
	for k, _ := range this.AbilityModifiers {
		keysForAbilityModifiers = append(keysForAbilityModifiers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAbilityModifiers)
	mapStringForAbilityModifiers := "map[string]AbilityModifier{"
	for _, k := range keysForAbilityModifiers {
		mapStringForAbilityModifiers += fmt.Sprintf("%#v: %#v,", k, this.AbilityModifiers[k])
	}
	mapStringForAbilityModifiers += "}"
	if this.AbilityModifiers != nil {
		s = append(s, "AbilityModifiers: "+mapStringForAbilityModifiers+",\n")
	}
	keysForEffectModifiers := make([]string, 0, len(this.EffectModifiers))
	for k, _ := range this.EffectModifiers {
		keysForEffectModifiers = append(keysForEffectModifiers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffectModifiers)
	mapStringForEffectModifiers := "map[string]EffectModifier{"
	for _, k := range keysForEffectModifiers {
		mapStringForEffectModifiers += fmt.Sprintf("%#v: %#v,", k, this.EffectModifiers[k])
	}
	mapStringForEffectModifiers += "}"
	if this.EffectModifiers != nil {
		s = append(s, "EffectModifiers: "+mapStringForEffectModifiers+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StackRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ability.StackRules{")
	s = append(s, "Stacks: "+fmt.Sprintf("%#v", this.Stacks)+",\n")
	s = append(s, "MaxStacks: "+fmt.Sprintf("%#v", this.MaxStacks)+",\n")
	s = append(s, "MaxDuration: "+fmt.Sprintf("%#v", this.MaxDuration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Effect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&ability.Effect{")
	s = append(s, "Stat: "+fmt.Sprintf("%#v", this.Stat)+",\n")
	s = append(s, "Amount: "+strings.Replace(this.Amount.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "Delay: "+fmt.Sprintf("%#v", this.Delay)+",\n")
	s = append(s, "Repeat: "+fmt.Sprintf("%#v", this.Repeat)+",\n")
	s = append(s, "StackRules: "+strings.Replace(this.StackRules.GoString(), `&`, ``, 1)+",\n")
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]Target{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%#v: %#v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	if this.Targets != nil {
		s = append(s, "Targets: "+mapStringForTargets+",\n")
	}
	keysForTriggers := make([]string, 0, len(this.Triggers))
	for k, _ := range this.Triggers {
		keysForTriggers = append(keysForTriggers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTriggers)
	mapStringForTriggers := "map[string]Trigger{"
	for _, k := range keysForTriggers {
		mapStringForTriggers += fmt.Sprintf("%#v: %#v,", k, this.Triggers[k])
	}
	mapStringForTriggers += "}"
	if this.Triggers != nil {
		s = append(s, "Triggers: "+mapStringForTriggers+",\n")
	}
	keysForEffects := make([]string, 0, len(this.Effects))
	for k, _ := range this.Effects {
		keysForEffects = append(keysForEffects, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffects)
	mapStringForEffects := "map[string]Effect{"
	for _, k := range keysForEffects {
		mapStringForEffects += fmt.Sprintf("%#v: %#v,", k, this.Effects[k])
	}
	mapStringForEffects += "}"
	if this.Effects != nil {
		s = append(s, "Effects: "+mapStringForEffects+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *A) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&ability.A{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "Animation: "+fmt.Sprintf("%#v", this.Animation)+",\n")
	s = append(s, "CastTime: "+fmt.Sprintf("%#v", this.CastTime)+",\n")
	s = append(s, "ManaCost: "+fmt.Sprintf("%#v", this.ManaCost)+",\n")
	s = append(s, "Cooldown: "+fmt.Sprintf("%#v", this.Cooldown)+",\n")
	keysForEffects := make([]string, 0, len(this.Effects))
	for k, _ := range this.Effects {
		keysForEffects = append(keysForEffects, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffects)
	mapStringForEffects := "map[string]Effect{"
	for _, k := range keysForEffects {
		mapStringForEffects += fmt.Sprintf("%#v: %#v,", k, this.Effects[k])
	}
	mapStringForEffects += "}"
	if this.Effects != nil {
		s = append(s, "Effects: "+mapStringForEffects+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAbility(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MoveTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoveTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TargetID.Size()
		i -= size
		if _, err := m.TargetID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TargetType != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.TargetType))
		i--
		dAtA[i] = 0x10
	}
	if m.Move != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Move))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Target) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Move.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Height != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if m.Width != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x20
	}
	if m.Radius != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Radius))
		i--
		dAtA[i] = 0x18
	}
	if m.Range != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Range))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AbilityModifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbilityModifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AbilityModifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cooldown != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Cooldown))
		i--
		dAtA[i] = 0x20
	}
	if m.ManaCost != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.ManaCost))
		i--
		dAtA[i] = 0x18
	}
	if m.CastTime != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.CastTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Cancel {
		i--
		if m.Cancel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EffectModifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectModifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EffectModifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StackRules.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Repeat != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Repeat))
		i--
		dAtA[i] = 0x38
	}
	if m.Delay != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Delay))
		i--
		dAtA[i] = 0x30
	}
	if m.Duration != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Stat != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Stat))
		i--
		dAtA[i] = 0x18
	}
	if m.Cancel {
		i--
		if m.Cancel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.EffectID.Size()
		i -= size
		if _, err := m.EffectID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Amount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Amount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Amount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StatOutcome {
		i--
		if m.StatOutcome {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.EffectID.Size()
		i -= size
		if _, err := m.EffectID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Percentage != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Percentage))
		i--
		dAtA[i] = 0x28
	}
	if m.Stat != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Stat))
		i--
		dAtA[i] = 0x20
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Direct != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Direct))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Trigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EffectModifiers) > 0 {
		for k := range m.EffectModifiers {
			v := m.EffectModifiers[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AbilityModifiers) > 0 {
		for k := range m.AbilityModifiers {
			v := m.AbilityModifiers[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Treshold != nil {
		{
			size, err := m.Treshold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbility(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Operator != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Operator))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StackRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StackRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StackRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxDuration != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.MaxDuration))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxStacks != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.MaxStacks))
		i--
		dAtA[i] = 0x10
	}
	if m.Stacks != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Stacks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Effect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Effect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Effect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Effects) > 0 {
		for k := range m.Effects {
			v := m.Effects[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Triggers) > 0 {
		for k := range m.Triggers {
			v := m.Triggers[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Targets) > 0 {
		for k := range m.Targets {
			v := m.Targets[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size, err := m.StackRules.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Repeat != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Repeat))
		i--
		dAtA[i] = 0x38
	}
	if m.Delay != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Delay))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Icon.Size()
		i -= size
		if _, err := m.Icon.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Duration != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Stat != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Stat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *A) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *A) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *A) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Effects) > 0 {
		for k := range m.Effects {
			v := m.Effects[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAbility(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAbility(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAbility(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Cooldown != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.Cooldown))
		i--
		dAtA[i] = 0x38
	}
	if m.ManaCost != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.ManaCost))
		i--
		dAtA[i] = 0x30
	}
	if m.CastTime != 0 {
		i = encodeVarintAbility(dAtA, i, uint64(m.CastTime))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Animation.Size()
		i -= size
		if _, err := m.Animation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Icon.Size()
		i -= size
		if _, err := m.Icon.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAbility(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAbility(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAbility(dAtA []byte, offset int, v uint64) int {
	offset -= sovAbility(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedMoveTarget(r randyAbility, easy bool) *MoveTarget {
	this := &MoveTarget{}
	this.Move = Move([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.TargetType = TargetType([]int32{0, 1, 3, 4, 5, 6, 7}[r.Intn(7)])
	v1 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.TargetID = *v1
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTarget(r randyAbility, easy bool) *Target {
	this := &Target{}
	this.Type = TargetType([]int32{0, 1, 3, 4, 5, 6, 7}[r.Intn(7)])
	this.Range = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Range *= -1
	}
	this.Radius = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Radius *= -1
	}
	this.Width = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Width *= -1
	}
	this.Height = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Height *= -1
	}
	v2 := NewPopulatedMoveTarget(r, easy)
	this.Move = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAbilityModifier(r randyAbility, easy bool) *AbilityModifier {
	this := &AbilityModifier{}
	this.Cancel = bool(bool(r.Intn(2) == 0))
	this.CastTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CastTime *= -1
	}
	this.ManaCost = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ManaCost *= -1
	}
	this.Cooldown = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Cooldown *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEffectModifier(r randyAbility, easy bool) *EffectModifier {
	this := &EffectModifier{}
	v3 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.EffectID = *v3
	this.Cancel = bool(bool(r.Intn(2) == 0))
	this.Stat = entity.Stat([]int32{0, 1, 2, 4, 5, 6, 7, 8, 9, 10}[r.Intn(10)])
	v4 := NewPopulatedAmount(r, easy)
	this.Amount = *v4
	this.Duration = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Duration *= -1
	}
	this.Delay = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Delay *= -1
	}
	this.Repeat = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Repeat *= -1
	}
	v5 := NewPopulatedStackRules(r, easy)
	this.StackRules = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAmount(r randyAbility, easy bool) *Amount {
	this := &Amount{}
	v6 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.ID = *v6
	this.Direct = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Direct *= -1
	}
	if r.Intn(5) != 0 {
		this.Target = NewPopulatedTarget(r, easy)
	}
	this.Stat = entity.Stat([]int32{0, 1, 2, 4, 5, 6, 7, 8, 9, 10}[r.Intn(10)])
	this.Percentage = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Percentage *= -1
	}
	v7 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.EffectID = *v7
	this.StatOutcome = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTrigger(r randyAbility, easy bool) *Trigger {
	this := &Trigger{}
	this.Operator = Operator([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if r.Intn(5) != 0 {
		this.Amount = NewPopulatedAmount(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Treshold = NewPopulatedAmount(r, easy)
	}
	if r.Intn(5) != 0 {
		v8 := r.Intn(10)
		this.AbilityModifiers = make(map[string]AbilityModifier)
		for i := 0; i < v8; i++ {
			this.AbilityModifiers[randStringAbility(r)] = *NewPopulatedAbilityModifier(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v9 := r.Intn(10)
		this.EffectModifiers = make(map[string]EffectModifier)
		for i := 0; i < v9; i++ {
			this.EffectModifiers[randStringAbility(r)] = *NewPopulatedEffectModifier(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStackRules(r randyAbility, easy bool) *StackRules {
	this := &StackRules{}
	this.Stacks = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Stacks *= -1
	}
	this.MaxStacks = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MaxStacks *= -1
	}
	this.MaxDuration = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MaxDuration *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEffect(r randyAbility, easy bool) *Effect {
	this := &Effect{}
	this.Stat = entity.Stat([]int32{0, 1, 2, 4, 5, 6, 7, 8, 9, 10}[r.Intn(10)])
	v10 := NewPopulatedAmount(r, easy)
	this.Amount = *v10
	this.Duration = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Duration *= -1
	}
	v11 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.Icon = *v11
	this.Delay = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Delay *= -1
	}
	this.Repeat = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Repeat *= -1
	}
	v12 := NewPopulatedStackRules(r, easy)
	this.StackRules = *v12
	if r.Intn(5) != 0 {
		v13 := r.Intn(10)
		this.Targets = make(map[string]Target)
		for i := 0; i < v13; i++ {
			this.Targets[randStringAbility(r)] = *NewPopulatedTarget(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v14 := r.Intn(10)
		this.Triggers = make(map[string]Trigger)
		for i := 0; i < v14; i++ {
			this.Triggers[randStringAbility(r)] = *NewPopulatedTrigger(r, easy)
		}
	}
	if r.Intn(5) == 0 {
		v15 := r.Intn(10)
		this.Effects = make(map[string]Effect)
		for i := 0; i < v15; i++ {
			this.Effects[randStringAbility(r)] = *NewPopulatedEffect(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedA(r randyAbility, easy bool) *A {
	this := &A{}
	v16 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.ID = *v16
	this.Name = string(randStringAbility(r))
	v17 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.Icon = *v17
	v18 := github_com_elojah_game_03_pkg_ulid.NewPopulatedID(r)
	this.Animation = *v18
	this.CastTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CastTime *= -1
	}
	this.ManaCost = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ManaCost *= -1
	}
	this.Cooldown = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Cooldown *= -1
	}
	if r.Intn(5) == 0 {
		v19 := r.Intn(10)
		this.Effects = make(map[string]Effect)
		for i := 0; i < v19; i++ {
			this.Effects[randStringAbility(r)] = *NewPopulatedEffect(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAbility interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAbility(r randyAbility) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAbility(r randyAbility) string {
	v20 := r.Intn(100)
	tmps := make([]rune, v20)
	for i := 0; i < v20; i++ {
		tmps[i] = randUTF8RuneAbility(r)
	}
	return string(tmps)
}
func randUnrecognizedAbility(r randyAbility, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAbility(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAbility(dAtA []byte, r randyAbility, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		v21 := r.Int63()
		if r.Intn(2) == 0 {
			v21 *= -1
		}
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(v21))
	case 1:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAbility(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAbility(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *MoveTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Move != 0 {
		n += 1 + sovAbility(uint64(m.Move))
	}
	if m.TargetType != 0 {
		n += 1 + sovAbility(uint64(m.TargetType))
	}
	l = m.TargetID.Size()
	n += 1 + l + sovAbility(uint64(l))
	return n
}

func (m *Target) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAbility(uint64(m.Type))
	}
	if m.Range != 0 {
		n += 1 + sovAbility(uint64(m.Range))
	}
	if m.Radius != 0 {
		n += 1 + sovAbility(uint64(m.Radius))
	}
	if m.Width != 0 {
		n += 1 + sovAbility(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovAbility(uint64(m.Height))
	}
	l = m.Move.Size()
	n += 1 + l + sovAbility(uint64(l))
	return n
}

func (m *AbilityModifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancel {
		n += 2
	}
	if m.CastTime != 0 {
		n += 1 + sovAbility(uint64(m.CastTime))
	}
	if m.ManaCost != 0 {
		n += 1 + sovAbility(uint64(m.ManaCost))
	}
	if m.Cooldown != 0 {
		n += 1 + sovAbility(uint64(m.Cooldown))
	}
	return n
}

func (m *EffectModifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EffectID.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.Cancel {
		n += 2
	}
	if m.Stat != 0 {
		n += 1 + sovAbility(uint64(m.Stat))
	}
	l = m.Amount.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovAbility(uint64(m.Duration))
	}
	if m.Delay != 0 {
		n += 1 + sovAbility(uint64(m.Delay))
	}
	if m.Repeat != 0 {
		n += 1 + sovAbility(uint64(m.Repeat))
	}
	l = m.StackRules.Size()
	n += 1 + l + sovAbility(uint64(l))
	return n
}

func (m *Amount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.Direct != 0 {
		n += 1 + sovAbility(uint64(m.Direct))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovAbility(uint64(l))
	}
	if m.Stat != 0 {
		n += 1 + sovAbility(uint64(m.Stat))
	}
	if m.Percentage != 0 {
		n += 1 + sovAbility(uint64(m.Percentage))
	}
	l = m.EffectID.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.StatOutcome {
		n += 2
	}
	return n
}

func (m *Trigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operator != 0 {
		n += 1 + sovAbility(uint64(m.Operator))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovAbility(uint64(l))
	}
	if m.Treshold != nil {
		l = m.Treshold.Size()
		n += 1 + l + sovAbility(uint64(l))
	}
	if len(m.AbilityModifiers) > 0 {
		for k, v := range m.AbilityModifiers {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + l + sovAbility(uint64(l))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	if len(m.EffectModifiers) > 0 {
		for k, v := range m.EffectModifiers {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + l + sovAbility(uint64(l))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *StackRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stacks != 0 {
		n += 1 + sovAbility(uint64(m.Stacks))
	}
	if m.MaxStacks != 0 {
		n += 1 + sovAbility(uint64(m.MaxStacks))
	}
	if m.MaxDuration != 0 {
		n += 1 + sovAbility(uint64(m.MaxDuration))
	}
	return n
}

func (m *Effect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stat != 0 {
		n += 1 + sovAbility(uint64(m.Stat))
	}
	l = m.Amount.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovAbility(uint64(m.Duration))
	}
	l = m.Icon.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.Delay != 0 {
		n += 1 + sovAbility(uint64(m.Delay))
	}
	if m.Repeat != 0 {
		n += 1 + sovAbility(uint64(m.Repeat))
	}
	l = m.StackRules.Size()
	n += 1 + l + sovAbility(uint64(l))
	if len(m.Targets) > 0 {
		for k, v := range m.Targets {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + l + sovAbility(uint64(l))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	if len(m.Triggers) > 0 {
		for k, v := range m.Triggers {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + l + sovAbility(uint64(l))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	if len(m.Effects) > 0 {
		for k, v := range m.Effects {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + l + sovAbility(uint64(l))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *A) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovAbility(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAbility(uint64(l))
	}
	l = m.Icon.Size()
	n += 1 + l + sovAbility(uint64(l))
	l = m.Animation.Size()
	n += 1 + l + sovAbility(uint64(l))
	if m.CastTime != 0 {
		n += 1 + sovAbility(uint64(m.CastTime))
	}
	if m.ManaCost != 0 {
		n += 1 + sovAbility(uint64(m.ManaCost))
	}
	if m.Cooldown != 0 {
		n += 1 + sovAbility(uint64(m.Cooldown))
	}
	if len(m.Effects) > 0 {
		for k, v := range m.Effects {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAbility(uint64(len(k))) + 1 + l + sovAbility(uint64(l))
			n += mapEntrySize + 1 + sovAbility(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAbility(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAbility(x uint64) (n int) {
	return sovAbility(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MoveTarget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MoveTarget{`,
		`Move:` + fmt.Sprintf("%v", this.Move) + `,`,
		`TargetType:` + fmt.Sprintf("%v", this.TargetType) + `,`,
		`TargetID:` + fmt.Sprintf("%v", this.TargetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Range:` + fmt.Sprintf("%v", this.Range) + `,`,
		`Radius:` + fmt.Sprintf("%v", this.Radius) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Move:` + strings.Replace(strings.Replace(this.Move.String(), "MoveTarget", "MoveTarget", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AbilityModifier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AbilityModifier{`,
		`Cancel:` + fmt.Sprintf("%v", this.Cancel) + `,`,
		`CastTime:` + fmt.Sprintf("%v", this.CastTime) + `,`,
		`ManaCost:` + fmt.Sprintf("%v", this.ManaCost) + `,`,
		`Cooldown:` + fmt.Sprintf("%v", this.Cooldown) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EffectModifier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EffectModifier{`,
		`EffectID:` + fmt.Sprintf("%v", this.EffectID) + `,`,
		`Cancel:` + fmt.Sprintf("%v", this.Cancel) + `,`,
		`Stat:` + fmt.Sprintf("%v", this.Stat) + `,`,
		`Amount:` + strings.Replace(strings.Replace(this.Amount.String(), "Amount", "Amount", 1), `&`, ``, 1) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Delay:` + fmt.Sprintf("%v", this.Delay) + `,`,
		`Repeat:` + fmt.Sprintf("%v", this.Repeat) + `,`,
		`StackRules:` + strings.Replace(strings.Replace(this.StackRules.String(), "StackRules", "StackRules", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Amount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Amount{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Direct:` + fmt.Sprintf("%v", this.Direct) + `,`,
		`Target:` + strings.Replace(this.Target.String(), "Target", "Target", 1) + `,`,
		`Stat:` + fmt.Sprintf("%v", this.Stat) + `,`,
		`Percentage:` + fmt.Sprintf("%v", this.Percentage) + `,`,
		`EffectID:` + fmt.Sprintf("%v", this.EffectID) + `,`,
		`StatOutcome:` + fmt.Sprintf("%v", this.StatOutcome) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Trigger) String() string {
	if this == nil {
		return "nil"
	}
	keysForAbilityModifiers := make([]string, 0, len(this.AbilityModifiers))
	for k, _ := range this.AbilityModifiers {
		keysForAbilityModifiers = append(keysForAbilityModifiers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAbilityModifiers)
	mapStringForAbilityModifiers := "map[string]AbilityModifier{"
	for _, k := range keysForAbilityModifiers {
		mapStringForAbilityModifiers += fmt.Sprintf("%v: %v,", k, this.AbilityModifiers[k])
	}
	mapStringForAbilityModifiers += "}"
	keysForEffectModifiers := make([]string, 0, len(this.EffectModifiers))
	for k, _ := range this.EffectModifiers {
		keysForEffectModifiers = append(keysForEffectModifiers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffectModifiers)
	mapStringForEffectModifiers := "map[string]EffectModifier{"
	for _, k := range keysForEffectModifiers {
		mapStringForEffectModifiers += fmt.Sprintf("%v: %v,", k, this.EffectModifiers[k])
	}
	mapStringForEffectModifiers += "}"
	s := strings.Join([]string{`&Trigger{`,
		`Operator:` + fmt.Sprintf("%v", this.Operator) + `,`,
		`Amount:` + strings.Replace(this.Amount.String(), "Amount", "Amount", 1) + `,`,
		`Treshold:` + strings.Replace(this.Treshold.String(), "Amount", "Amount", 1) + `,`,
		`AbilityModifiers:` + mapStringForAbilityModifiers + `,`,
		`EffectModifiers:` + mapStringForEffectModifiers + `,`,
		`}`,
	}, "")
	return s
}
func (this *StackRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StackRules{`,
		`Stacks:` + fmt.Sprintf("%v", this.Stacks) + `,`,
		`MaxStacks:` + fmt.Sprintf("%v", this.MaxStacks) + `,`,
		`MaxDuration:` + fmt.Sprintf("%v", this.MaxDuration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Effect) String() string {
	if this == nil {
		return "nil"
	}
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]Target{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%v: %v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	keysForTriggers := make([]string, 0, len(this.Triggers))
	for k, _ := range this.Triggers {
		keysForTriggers = append(keysForTriggers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTriggers)
	mapStringForTriggers := "map[string]Trigger{"
	for _, k := range keysForTriggers {
		mapStringForTriggers += fmt.Sprintf("%v: %v,", k, this.Triggers[k])
	}
	mapStringForTriggers += "}"
	keysForEffects := make([]string, 0, len(this.Effects))
	for k, _ := range this.Effects {
		keysForEffects = append(keysForEffects, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffects)
	mapStringForEffects := "map[string]Effect{"
	for _, k := range keysForEffects {
		mapStringForEffects += fmt.Sprintf("%v: %v,", k, this.Effects[k])
	}
	mapStringForEffects += "}"
	s := strings.Join([]string{`&Effect{`,
		`Stat:` + fmt.Sprintf("%v", this.Stat) + `,`,
		`Amount:` + strings.Replace(strings.Replace(this.Amount.String(), "Amount", "Amount", 1), `&`, ``, 1) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`Delay:` + fmt.Sprintf("%v", this.Delay) + `,`,
		`Repeat:` + fmt.Sprintf("%v", this.Repeat) + `,`,
		`StackRules:` + strings.Replace(strings.Replace(this.StackRules.String(), "StackRules", "StackRules", 1), `&`, ``, 1) + `,`,
		`Targets:` + mapStringForTargets + `,`,
		`Triggers:` + mapStringForTriggers + `,`,
		`Effects:` + mapStringForEffects + `,`,
		`}`,
	}, "")
	return s
}
func (this *A) String() string {
	if this == nil {
		return "nil"
	}
	keysForEffects := make([]string, 0, len(this.Effects))
	for k, _ := range this.Effects {
		keysForEffects = append(keysForEffects, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEffects)
	mapStringForEffects := "map[string]Effect{"
	for _, k := range keysForEffects {
		mapStringForEffects += fmt.Sprintf("%v: %v,", k, this.Effects[k])
	}
	mapStringForEffects += "}"
	s := strings.Join([]string{`&A{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`Animation:` + fmt.Sprintf("%v", this.Animation) + `,`,
		`CastTime:` + fmt.Sprintf("%v", this.CastTime) + `,`,
		`ManaCost:` + fmt.Sprintf("%v", this.ManaCost) + `,`,
		`Cooldown:` + fmt.Sprintf("%v", this.Cooldown) + `,`,
		`Effects:` + mapStringForEffects + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAbility(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MoveTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Move", wireType)
			}
			m.Move = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Move |= Move(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetType", wireType)
			}
			m.TargetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetType |= TargetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Target) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TargetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			m.Radius = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Radius |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Move", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Move.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AbilityModifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbilityModifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbilityModifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cancel = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastTime", wireType)
			}
			m.CastTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CastTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManaCost", wireType)
			}
			m.ManaCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManaCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooldown", wireType)
			}
			m.Cooldown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cooldown |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EffectModifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectModifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectModifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cancel = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			m.Stat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stat |= entity.Stat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeat", wireType)
			}
			m.Repeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Repeat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StackRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Amount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direct", wireType)
			}
			m.Direct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direct |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			m.Stat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stat |= entity.Stat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			m.Percentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Percentage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatOutcome", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatOutcome = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= Operator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Treshold == nil {
				m.Treshold = &Amount{}
			}
			if err := m.Treshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityModifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbilityModifiers == nil {
				m.AbilityModifiers = make(map[string]AbilityModifier)
			}
			var mapkey string
			mapvalue := &AbilityModifier{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAbility
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAbility
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AbilityModifier{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AbilityModifiers[mapkey] = *mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectModifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectModifiers == nil {
				m.EffectModifiers = make(map[string]EffectModifier)
			}
			var mapkey string
			mapvalue := &EffectModifier{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAbility
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAbility
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EffectModifier{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EffectModifiers[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StackRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StackRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StackRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stacks", wireType)
			}
			m.Stacks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stacks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStacks", wireType)
			}
			m.MaxStacks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxStacks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDuration", wireType)
			}
			m.MaxDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Effect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Effect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Effect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			m.Stat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stat |= entity.Stat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeat", wireType)
			}
			m.Repeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Repeat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StackRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Targets == nil {
				m.Targets = make(map[string]Target)
			}
			var mapkey string
			mapvalue := &Target{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAbility
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAbility
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Target{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Targets[mapkey] = *mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Triggers == nil {
				m.Triggers = make(map[string]Trigger)
			}
			var mapkey string
			mapvalue := &Trigger{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAbility
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAbility
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Trigger{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Triggers[mapkey] = *mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Effects == nil {
				m.Effects = make(map[string]Effect)
			}
			var mapkey string
			mapvalue := &Effect{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAbility
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAbility
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Effect{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Effects[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *A) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: A: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: A: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Animation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastTime", wireType)
			}
			m.CastTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CastTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManaCost", wireType)
			}
			m.ManaCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManaCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooldown", wireType)
			}
			m.Cooldown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cooldown |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbility
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbility
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Effects == nil {
				m.Effects = make(map[string]Effect)
			}
			var mapkey string
			mapvalue := &Effect{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbility
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAbility
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbility
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAbility
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAbility
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Effect{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAbility(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAbility
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Effects[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbility(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbility
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAbility(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAbility
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbility
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAbility
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAbility
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAbility
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAbility        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAbility          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAbility = fmt.Errorf("proto: unexpected end of group")
)
