/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: github.com/elojah/game_03/pkg/geometry/geometry.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogo/protobuf/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace geometry {
    export class Vec2 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            X?: number;
            Y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("X" in data && data.X != undefined) {
                    this.X = data.X;
                }
                if ("Y" in data && data.Y != undefined) {
                    this.Y = data.Y;
                }
            }
        }
        get X() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set X(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set Y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            X?: number;
            Y?: number;
        }): Vec2 {
            const message = new Vec2({});
            if (data.X != null) {
                message.X = data.X;
            }
            if (data.Y != null) {
                message.Y = data.Y;
            }
            return message;
        }
        toObject() {
            const data: {
                X?: number;
                Y?: number;
            } = {};
            if (this.X != null) {
                data.X = this.X;
            }
            if (this.Y != null) {
                data.Y = this.Y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.X != 0)
                writer.writeInt64(1, this.X);
            if (this.Y != 0)
                writer.writeInt64(2, this.Y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vec2 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vec2();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.X = reader.readInt64();
                        break;
                    case 2:
                        message.Y = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Vec2 {
            return Vec2.deserialize(bytes);
        }
    }
    export class Rect extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            X?: number;
            Y?: number;
            Height?: number;
            Width?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("X" in data && data.X != undefined) {
                    this.X = data.X;
                }
                if ("Y" in data && data.Y != undefined) {
                    this.Y = data.Y;
                }
                if ("Height" in data && data.Height != undefined) {
                    this.Height = data.Height;
                }
                if ("Width" in data && data.Width != undefined) {
                    this.Width = data.Width;
                }
            }
        }
        get X() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set X(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set Y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get Height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set Height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get Width() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set Width(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            X?: number;
            Y?: number;
            Height?: number;
            Width?: number;
        }): Rect {
            const message = new Rect({});
            if (data.X != null) {
                message.X = data.X;
            }
            if (data.Y != null) {
                message.Y = data.Y;
            }
            if (data.Height != null) {
                message.Height = data.Height;
            }
            if (data.Width != null) {
                message.Width = data.Width;
            }
            return message;
        }
        toObject() {
            const data: {
                X?: number;
                Y?: number;
                Height?: number;
                Width?: number;
            } = {};
            if (this.X != null) {
                data.X = this.X;
            }
            if (this.Y != null) {
                data.Y = this.Y;
            }
            if (this.Height != null) {
                data.Height = this.Height;
            }
            if (this.Width != null) {
                data.Width = this.Width;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.X != 0)
                writer.writeInt64(1, this.X);
            if (this.Y != 0)
                writer.writeInt64(2, this.Y);
            if (this.Height != 0)
                writer.writeUint64(3, this.Height);
            if (this.Width != 0)
                writer.writeUint64(4, this.Width);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Rect {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Rect();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.X = reader.readInt64();
                        break;
                    case 2:
                        message.Y = reader.readInt64();
                        break;
                    case 3:
                        message.Height = reader.readUint64();
                        break;
                    case 4:
                        message.Width = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Rect {
            return Rect.deserialize(bytes);
        }
    }
    export class Circle extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            X?: number;
            Y?: number;
            Radius?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("X" in data && data.X != undefined) {
                    this.X = data.X;
                }
                if ("Y" in data && data.Y != undefined) {
                    this.Y = data.Y;
                }
                if ("Radius" in data && data.Radius != undefined) {
                    this.Radius = data.Radius;
                }
            }
        }
        get X() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set X(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get Y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set Y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get Radius() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set Radius(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            X?: number;
            Y?: number;
            Radius?: number;
        }): Circle {
            const message = new Circle({});
            if (data.X != null) {
                message.X = data.X;
            }
            if (data.Y != null) {
                message.Y = data.Y;
            }
            if (data.Radius != null) {
                message.Radius = data.Radius;
            }
            return message;
        }
        toObject() {
            const data: {
                X?: number;
                Y?: number;
                Radius?: number;
            } = {};
            if (this.X != null) {
                data.X = this.X;
            }
            if (this.Y != null) {
                data.Y = this.Y;
            }
            if (this.Radius != null) {
                data.Radius = this.Radius;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.X != 0)
                writer.writeInt64(1, this.X);
            if (this.Y != 0)
                writer.writeInt64(2, this.Y);
            if (this.Radius != 0)
                writer.writeUint64(3, this.Radius);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Circle {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Circle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.X = reader.readInt64();
                        break;
                    case 2:
                        message.Y = reader.readInt64();
                        break;
                    case 3:
                        message.Radius = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Circle {
            return Circle.deserialize(bytes);
        }
    }
}
