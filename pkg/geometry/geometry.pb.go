// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/game_03/pkg/geometry/geometry.proto

package geometry

import (
	fmt "fmt"
	_ "github.com/elojah/game_03/pkg/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vec2 struct {
	X int64 `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty" cql:"x"`
	Y int64 `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty" cql:"y"`
}

func (m *Vec2) Reset()      { *m = Vec2{} }
func (*Vec2) ProtoMessage() {}
func (*Vec2) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc0e58235b9cb07, []int{0}
}
func (m *Vec2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vec2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vec2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vec2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vec2.Merge(m, src)
}
func (m *Vec2) XXX_Size() int {
	return m.Size()
}
func (m *Vec2) XXX_DiscardUnknown() {
	xxx_messageInfo_Vec2.DiscardUnknown(m)
}

var xxx_messageInfo_Vec2 proto.InternalMessageInfo

type Rect struct {
	X      int64  `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty" cql:"x"`
	Y      int64  `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty" cql:"y"`
	Height uint64 `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty" cql:"height"`
	Width  uint64 `protobuf:"varint,4,opt,name=Width,proto3" json:"Width,omitempty" cql:"width"`
}

func (m *Rect) Reset()      { *m = Rect{} }
func (*Rect) ProtoMessage() {}
func (*Rect) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc0e58235b9cb07, []int{1}
}
func (m *Rect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rect.Merge(m, src)
}
func (m *Rect) XXX_Size() int {
	return m.Size()
}
func (m *Rect) XXX_DiscardUnknown() {
	xxx_messageInfo_Rect.DiscardUnknown(m)
}

var xxx_messageInfo_Rect proto.InternalMessageInfo

type Circle struct {
	X      int64  `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty" cql:"x"`
	Y      int64  `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty" cql:"y"`
	Radius uint64 `protobuf:"varint,3,opt,name=Radius,proto3" json:"Radius,omitempty" cql:"radius"`
}

func (m *Circle) Reset()      { *m = Circle{} }
func (*Circle) ProtoMessage() {}
func (*Circle) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc0e58235b9cb07, []int{2}
}
func (m *Circle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Circle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Circle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Circle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Circle.Merge(m, src)
}
func (m *Circle) XXX_Size() int {
	return m.Size()
}
func (m *Circle) XXX_DiscardUnknown() {
	xxx_messageInfo_Circle.DiscardUnknown(m)
}

var xxx_messageInfo_Circle proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Vec2)(nil), "geometry.Vec2")
	golang_proto.RegisterType((*Vec2)(nil), "geometry.Vec2")
	proto.RegisterType((*Rect)(nil), "geometry.Rect")
	golang_proto.RegisterType((*Rect)(nil), "geometry.Rect")
	proto.RegisterType((*Circle)(nil), "geometry.Circle")
	golang_proto.RegisterType((*Circle)(nil), "geometry.Circle")
}

func init() {
	proto.RegisterFile("github.com/elojah/game_03/pkg/geometry/geometry.proto", fileDescriptor_6dc0e58235b9cb07)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/game_03/pkg/geometry/geometry.proto", fileDescriptor_6dc0e58235b9cb07)
}

var fileDescriptor_6dc0e58235b9cb07 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x31, 0x4f, 0x02, 0x31,
	0x1c, 0xc5, 0xfb, 0x97, 0x13, 0x4d, 0x31, 0xd1, 0xdc, 0x74, 0x3a, 0xfc, 0x21, 0x4d, 0x4c, 0x98,
	0x38, 0x03, 0x71, 0x31, 0x4e, 0xb8, 0x30, 0x77, 0x50, 0x98, 0x0c, 0x1c, 0xcd, 0xf5, 0x14, 0x52,
	0x3c, 0x4b, 0x94, 0xcd, 0x2f, 0x60, 0xe2, 0xc7, 0xf0, 0x23, 0x38, 0x32, 0x32, 0x32, 0x32, 0x11,
	0xaf, 0xb7, 0x38, 0x92, 0x9b, 0x1c, 0x0d, 0x05, 0x1d, 0x74, 0x30, 0x61, 0x7b, 0x7d, 0xbf, 0xf7,
	0x9a, 0x97, 0xfc, 0xe9, 0x69, 0x18, 0x69, 0x39, 0xec, 0x54, 0x02, 0xd5, 0xf7, 0x45, 0x4f, 0xdd,
	0xb4, 0xa5, 0x1f, 0xb6, 0xfb, 0xe2, 0xfa, 0xa4, 0xe6, 0x0f, 0x6e, 0x43, 0x3f, 0x14, 0xaa, 0x2f,
	0x74, 0x3c, 0xfa, 0x11, 0x95, 0x41, 0xac, 0xb4, 0x72, 0x77, 0xbf, 0xdf, 0x47, 0xd5, 0x7f, 0x3e,
	0x50, 0xa1, 0xb2, 0x15, 0xab, 0x56, 0x6d, 0x76, 0x4e, 0x9d, 0x4b, 0x11, 0x54, 0xdd, 0x43, 0x0a,
	0x4d, 0x0f, 0x4a, 0x50, 0xce, 0xd5, 0x0b, 0xd9, 0xbc, 0xb8, 0x13, 0xdc, 0xf5, 0xce, 0xd8, 0x23,
	0xe3, 0xd0, 0x5c, 0xa2, 0x96, 0xb7, 0xf5, 0x0b, 0x8d, 0x18, 0x87, 0x16, 0x7b, 0x06, 0xea, 0x70,
	0x11, 0xe8, 0xcd, 0xea, 0x6e, 0x99, 0xe6, 0x1b, 0x22, 0x0a, 0xa5, 0xf6, 0x72, 0x25, 0x28, 0x3b,
	0xf5, 0x83, 0x6c, 0x5e, 0xdc, 0xb3, 0x5c, 0x5a, 0x9b, 0xf1, 0x35, 0x77, 0x8f, 0xe9, 0xf6, 0x55,
	0xd4, 0xd5, 0xd2, 0x73, 0x6c, 0x70, 0x3f, 0x9b, 0x17, 0x0b, 0x36, 0xf8, 0xb0, 0x74, 0x19, 0x5f,
	0x51, 0x26, 0x69, 0xfe, 0x22, 0x8a, 0x83, 0x9e, 0xd8, 0x7c, 0x10, 0x6f, 0x77, 0xa3, 0xe1, 0xfd,
	0x9f, 0x41, 0xb1, 0xb5, 0x19, 0x5f, 0xf3, 0x7a, 0x63, 0x92, 0x20, 0x99, 0x26, 0x48, 0x66, 0x09,
	0x92, 0x45, 0x82, 0xf0, 0x99, 0x20, 0x3c, 0x19, 0x84, 0x57, 0x83, 0xf0, 0x66, 0x10, 0xc6, 0x06,
	0x61, 0x62, 0x10, 0xa6, 0x06, 0xe1, 0xdd, 0x20, 0x7c, 0x18, 0x24, 0x0b, 0x83, 0xf0, 0x92, 0x22,
	0x19, 0xa7, 0x08, 0xd3, 0x14, 0xc9, 0x2c, 0x45, 0xd2, 0xc9, 0xdb, 0x43, 0xd4, 0xbe, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x8e, 0x04, 0x59, 0x7f, 0xff, 0x01, 0x00, 0x00,
}

func (this *Vec2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Vec2)
	if !ok {
		that2, ok := that.(Vec2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *Rect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rect)
	if !ok {
		that2, ok := that.(Rect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	return true
}
func (this *Circle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Circle)
	if !ok {
		that2, ok := that.(Circle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	if this.Radius != that1.Radius {
		return false
	}
	return true
}
func (this *Vec2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&geometry.Vec2{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Rect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&geometry.Rect{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Circle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&geometry.Circle{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "Radius: "+fmt.Sprintf("%#v", this.Radius)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGeometry(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Vec2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vec2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vec2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i = encodeVarintGeometry(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintGeometry(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Width != 0 {
		i = encodeVarintGeometry(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x20
	}
	if m.Height != 0 {
		i = encodeVarintGeometry(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Y != 0 {
		i = encodeVarintGeometry(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintGeometry(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Circle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Circle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Circle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Radius != 0 {
		i = encodeVarintGeometry(dAtA, i, uint64(m.Radius))
		i--
		dAtA[i] = 0x18
	}
	if m.Y != 0 {
		i = encodeVarintGeometry(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintGeometry(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGeometry(dAtA []byte, offset int, v uint64) int {
	offset -= sovGeometry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedVec2(r randyGeometry, easy bool) *Vec2 {
	this := &Vec2{}
	this.X = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.X *= -1
	}
	this.Y = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Y *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRect(r randyGeometry, easy bool) *Rect {
	this := &Rect{}
	this.X = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.X *= -1
	}
	this.Y = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Y *= -1
	}
	this.Height = uint64(uint64(r.Uint32()))
	this.Width = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCircle(r randyGeometry, easy bool) *Circle {
	this := &Circle{}
	this.X = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.X *= -1
	}
	this.Y = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Y *= -1
	}
	this.Radius = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGeometry interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGeometry(r randyGeometry) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGeometry(r randyGeometry) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneGeometry(r)
	}
	return string(tmps)
}
func randUnrecognizedGeometry(r randyGeometry, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGeometry(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGeometry(dAtA []byte, r randyGeometry, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGeometry(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateGeometry(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateGeometry(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGeometry(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGeometry(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGeometry(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGeometry(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Vec2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovGeometry(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovGeometry(uint64(m.Y))
	}
	return n
}

func (m *Rect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovGeometry(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovGeometry(uint64(m.Y))
	}
	if m.Height != 0 {
		n += 1 + sovGeometry(uint64(m.Height))
	}
	if m.Width != 0 {
		n += 1 + sovGeometry(uint64(m.Width))
	}
	return n
}

func (m *Circle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovGeometry(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovGeometry(uint64(m.Y))
	}
	if m.Radius != 0 {
		n += 1 + sovGeometry(uint64(m.Radius))
	}
	return n
}

func sovGeometry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGeometry(x uint64) (n int) {
	return sovGeometry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Vec2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Vec2{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Rect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rect{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Circle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Circle{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`Radius:` + fmt.Sprintf("%v", this.Radius) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGeometry(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Vec2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeometry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vec2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vec2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeometry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeometry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeometry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeometry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeometry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeometry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeometry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeometry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeometry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeometry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeometry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeometry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeometry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Circle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeometry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Circle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Circle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeometry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeometry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			m.Radius = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeometry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Radius |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeometry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeometry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeometry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGeometry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGeometry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeometry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeometry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGeometry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGeometry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGeometry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGeometry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGeometry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGeometry = fmt.Errorf("proto: unexpected end of group")
)
